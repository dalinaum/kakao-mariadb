
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(current_thd, (char*) (A));      \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, empty_lex_str, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 954 "/data/.r/mariadb-10.0.12/Release/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     ASYNC_COMMIT_SYM = 279,
     AT_SYM = 280,
     AUTHORS_SYM = 281,
     AUTOEXTEND_SIZE_SYM = 282,
     AUTO_INC = 283,
     AUTO_SYM = 284,
     AVG_ROW_LENGTH = 285,
     AVG_SYM = 286,
     BACKUP_SYM = 287,
     BEFORE_SYM = 288,
     BEGIN_SYM = 289,
     BETWEEN_SYM = 290,
     BIGINT = 291,
     BINARY = 292,
     BINLOG_SYM = 293,
     BIN_NUM = 294,
     BIT_AND = 295,
     BIT_OR = 296,
     BIT_SYM = 297,
     BIT_XOR = 298,
     BLOB_SYM = 299,
     BLOCK_SYM = 300,
     BOOLEAN_SYM = 301,
     BOOL_SYM = 302,
     BOTH = 303,
     BTREE_SYM = 304,
     BY = 305,
     BYTE_SYM = 306,
     CACHE_SYM = 307,
     CALL_SYM = 308,
     CASCADE = 309,
     CASCADED = 310,
     CASE_SYM = 311,
     CAST_SYM = 312,
     CATALOG_NAME_SYM = 313,
     CHAIN_SYM = 314,
     CHANGE = 315,
     CHANGED = 316,
     CHARSET = 317,
     CHAR_SYM = 318,
     CHECKPOINT_SYM = 319,
     CHECKSUM_SYM = 320,
     CHECK_SYM = 321,
     CIPHER_SYM = 322,
     CLASS_ORIGIN_SYM = 323,
     CLIENT_SYM = 324,
     CLIENT_STATS_SYM = 325,
     CLOSE_SYM = 326,
     COALESCE = 327,
     CODE_SYM = 328,
     COLLATE_SYM = 329,
     COLLATION_SYM = 330,
     COLUMNS = 331,
     COLUMN_ADD_SYM = 332,
     COLUMN_CHECK_SYM = 333,
     COLUMN_CREATE_SYM = 334,
     COLUMN_DELETE_SYM = 335,
     COLUMN_GET_SYM = 336,
     COLUMN_SYM = 337,
     COLUMN_NAME_SYM = 338,
     COMMENT_SYM = 339,
     COMMITTED_SYM = 340,
     COMMIT_SYM = 341,
     COMPACT_SYM = 342,
     COMPLETION_SYM = 343,
     COMPRESSED_SYM = 344,
     CONCURRENT = 345,
     CONDITION_SYM = 346,
     CONNECTION_SYM = 347,
     CONSISTENT_SYM = 348,
     CONSTRAINT = 349,
     CONSTRAINT_CATALOG_SYM = 350,
     CONSTRAINT_NAME_SYM = 351,
     CONSTRAINT_SCHEMA_SYM = 352,
     CONTAINS_SYM = 353,
     CONTEXT_SYM = 354,
     CONTINUE_SYM = 355,
     CONTRIBUTORS_SYM = 356,
     CONVERT_SYM = 357,
     COUNT_SYM = 358,
     CPU_SYM = 359,
     CREATE = 360,
     CROSS = 361,
     CUBE_SYM = 362,
     CURDATE = 363,
     CURRENT_SYM = 364,
     CURRENT_USER = 365,
     CURRENT_ROLE = 366,
     CURRENT_POS_SYM = 367,
     CURSOR_SYM = 368,
     CURSOR_NAME_SYM = 369,
     CURTIME = 370,
     DATABASE = 371,
     DATABASES = 372,
     DATAFILE_SYM = 373,
     DATA_SYM = 374,
     DATETIME = 375,
     DATE_ADD_INTERVAL = 376,
     DATE_SUB_INTERVAL = 377,
     DATE_SYM = 378,
     DAY_HOUR_SYM = 379,
     DAY_MICROSECOND_SYM = 380,
     DAY_MINUTE_SYM = 381,
     DAY_SECOND_SYM = 382,
     DAY_SYM = 383,
     DEALLOCATE_SYM = 384,
     DECIMAL_NUM = 385,
     DECIMAL_SYM = 386,
     DECLARE_SYM = 387,
     DEFAULT = 388,
     DEFINER_SYM = 389,
     DEFRAGMENT_SYM = 390,
     DELAYED_SYM = 391,
     DELAY_KEY_WRITE_SYM = 392,
     DELETE_SYM = 393,
     DESC = 394,
     DESCRIBE = 395,
     DES_KEY_FILE = 396,
     DETERMINISTIC_SYM = 397,
     DIAGNOSTICS_SYM = 398,
     DIRECTORY_SYM = 399,
     DISABLE_SYM = 400,
     DISCARD = 401,
     DISK_SYM = 402,
     DISTINCT = 403,
     DIV_SYM = 404,
     DOUBLE_SYM = 405,
     DO_SYM = 406,
     DROP = 407,
     DUAL_SYM = 408,
     DUMPFILE = 409,
     DUPLICATE_SYM = 410,
     DYNAMIC_SYM = 411,
     EACH_SYM = 412,
     ELSE = 413,
     ELSEIF_SYM = 414,
     ENABLE_SYM = 415,
     ENCLOSED = 416,
     END = 417,
     ENDS_SYM = 418,
     END_OF_INPUT = 419,
     ENGINES_SYM = 420,
     ENGINE_SYM = 421,
     ENUM = 422,
     EQ = 423,
     EQUAL_SYM = 424,
     ERROR_SYM = 425,
     ERRORS = 426,
     ESCAPED = 427,
     ESCAPE_SYM = 428,
     EVENTS_SYM = 429,
     EVENT_SYM = 430,
     EVERY_SYM = 431,
     EXCHANGE_SYM = 432,
     EXAMINED_SYM = 433,
     EXECUTE_SYM = 434,
     EXISTS = 435,
     EXIT_SYM = 436,
     EXPANSION_SYM = 437,
     EXPORT_SYM = 438,
     EXTENDED_SYM = 439,
     EXTENT_SIZE_SYM = 440,
     EXTRACT_SYM = 441,
     FALSE_SYM = 442,
     FAST_SYM = 443,
     FAULTS_SYM = 444,
     FETCH_SYM = 445,
     FILE_SYM = 446,
     FIRST_SYM = 447,
     FIXED_SYM = 448,
     FLOAT_NUM = 449,
     FLOAT_SYM = 450,
     FLUSH_SYM = 451,
     FORCE_SYM = 452,
     FOREIGN = 453,
     FOR_SYM = 454,
     FOUND_SYM = 455,
     FROM = 456,
     FULL = 457,
     FULLTEXT_SYM = 458,
     FUNCTION_SYM = 459,
     GE = 460,
     GENERAL = 461,
     GENERATED_SYM = 462,
     GEOMETRYCOLLECTION = 463,
     GEOMETRY_SYM = 464,
     GET_FORMAT = 465,
     GET_SYM = 466,
     GLOBAL_SYM = 467,
     GRANT = 468,
     GRANTS = 469,
     GROUP_SYM = 470,
     GROUP_CONCAT_SYM = 471,
     GT_SYM = 472,
     HANDLER_SYM = 473,
     HARD_SYM = 474,
     HASH_SYM = 475,
     HAVING = 476,
     HELP_SYM = 477,
     HEX_NUM = 478,
     HEX_STRING = 479,
     HIGH_PRIORITY = 480,
     HOST_SYM = 481,
     HOSTS_SYM = 482,
     HOUR_MICROSECOND_SYM = 483,
     HOUR_MINUTE_SYM = 484,
     HOUR_SECOND_SYM = 485,
     HOUR_SYM = 486,
     ID_SYM = 487,
     IDENT = 488,
     IDENTIFIED_SYM = 489,
     IDENT_QUOTED = 490,
     IF = 491,
     IGNORE_SYM = 492,
     IGNORE_SERVER_IDS_SYM = 493,
     IMPORT = 494,
     INDEXES = 495,
     INDEX_SYM = 496,
     INDEX_STATS_SYM = 497,
     INFILE = 498,
     INITIAL_SIZE_SYM = 499,
     INNER_SYM = 500,
     INOUT_SYM = 501,
     INSENSITIVE_SYM = 502,
     INSERT = 503,
     INSERT_METHOD = 504,
     INSTALL_SYM = 505,
     INTERVAL_SYM = 506,
     INTO = 507,
     INT_SYM = 508,
     INVOKER_SYM = 509,
     IN_SYM = 510,
     IO_SYM = 511,
     IPC_SYM = 512,
     IS = 513,
     ISOLATION = 514,
     ISSUER_SYM = 515,
     ITERATE_SYM = 516,
     JOIN_SYM = 517,
     KEYS = 518,
     KEY_BLOCK_SIZE = 519,
     KEY_SYM = 520,
     KILL_SYM = 521,
     LANGUAGE_SYM = 522,
     LAST_SYM = 523,
     LAST_VALUE = 524,
     LE = 525,
     LEADING = 526,
     LEAVES = 527,
     LEAVE_SYM = 528,
     LEFT = 529,
     LESS_SYM = 530,
     LEVEL_SYM = 531,
     LEX_HOSTNAME = 532,
     LIKE = 533,
     LIMIT = 534,
     LINEAR_SYM = 535,
     LINES = 536,
     LINESTRING = 537,
     LIST_SYM = 538,
     LOAD = 539,
     LOCAL_SYM = 540,
     LOCATOR_SYM = 541,
     LOCKS_SYM = 542,
     LOCK_SYM = 543,
     LOGFILE_SYM = 544,
     LOGS_SYM = 545,
     LONGBLOB = 546,
     LONGTEXT = 547,
     LONG_NUM = 548,
     LONG_SYM = 549,
     LOOP_SYM = 550,
     LOW_PRIORITY = 551,
     LT = 552,
     MASTER_CONNECT_RETRY_SYM = 553,
     MASTER_GTID_POS_SYM = 554,
     MASTER_HOST_SYM = 555,
     MASTER_LOG_FILE_SYM = 556,
     MASTER_LOG_POS_SYM = 557,
     MASTER_PASSWORD_SYM = 558,
     MASTER_PORT_SYM = 559,
     MASTER_SERVER_ID_SYM = 560,
     MASTER_SSL_CAPATH_SYM = 561,
     MASTER_SSL_CA_SYM = 562,
     MASTER_SSL_CERT_SYM = 563,
     MASTER_SSL_CIPHER_SYM = 564,
     MASTER_SSL_CRL_SYM = 565,
     MASTER_SSL_CRLPATH_SYM = 566,
     MASTER_SSL_KEY_SYM = 567,
     MASTER_SSL_SYM = 568,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 569,
     MASTER_SYM = 570,
     MASTER_USER_SYM = 571,
     MASTER_USE_GTID_SYM = 572,
     MASTER_HEARTBEAT_PERIOD_SYM = 573,
     MATCH = 574,
     MAX_CONNECTIONS_PER_HOUR = 575,
     MAX_QUERIES_PER_HOUR = 576,
     MAX_ROWS = 577,
     MAX_SIZE_SYM = 578,
     MAX_SYM = 579,
     MAX_UPDATES_PER_HOUR = 580,
     MAX_USER_CONNECTIONS_SYM = 581,
     MAX_VALUE_SYM = 582,
     MEDIUMBLOB = 583,
     MEDIUMINT = 584,
     MEDIUMTEXT = 585,
     MEDIUM_SYM = 586,
     MEMORY_SYM = 587,
     MERGE_SYM = 588,
     MESSAGE_TEXT_SYM = 589,
     MICROSECOND_SYM = 590,
     MIGRATE_SYM = 591,
     MINUTE_MICROSECOND_SYM = 592,
     MINUTE_SECOND_SYM = 593,
     MINUTE_SYM = 594,
     MIN_ROWS = 595,
     MIN_SYM = 596,
     MODE_SYM = 597,
     MODIFIES_SYM = 598,
     MODIFY_SYM = 599,
     MOD_SYM = 600,
     MONTH_SYM = 601,
     MULTILINESTRING = 602,
     MULTIPOINT = 603,
     MULTIPOLYGON = 604,
     MUTEX_SYM = 605,
     MYSQL_ERRNO_SYM = 606,
     NAMES_SYM = 607,
     NAME_SYM = 608,
     NATIONAL_SYM = 609,
     NATURAL = 610,
     NCHAR_STRING = 611,
     NCHAR_SYM = 612,
     NDBCLUSTER_SYM = 613,
     NE = 614,
     NEG = 615,
     NEW_SYM = 616,
     NEXT_SYM = 617,
     NODEGROUP_SYM = 618,
     NONE_SYM = 619,
     NOT2_SYM = 620,
     NOT_SYM = 621,
     NOW_SYM = 622,
     NO_SYM = 623,
     NO_WAIT_SYM = 624,
     NO_WRITE_TO_BINLOG = 625,
     NULL_SYM = 626,
     NUM = 627,
     NUMBER_SYM = 628,
     NUMERIC_SYM = 629,
     NVARCHAR_SYM = 630,
     OFFSET_SYM = 631,
     OLD_PASSWORD = 632,
     ON = 633,
     ONE_SYM = 634,
     ONLY_SYM = 635,
     ONLINE_SYM = 636,
     OPEN_SYM = 637,
     OPTIMIZE = 638,
     OPTIONS_SYM = 639,
     OPTION = 640,
     OPTIONALLY = 641,
     OR2_SYM = 642,
     ORDER_SYM = 643,
     OR_OR_SYM = 644,
     OR_SYM = 645,
     OUTER = 646,
     OUTFILE = 647,
     OUT_SYM = 648,
     OWNER_SYM = 649,
     PACK_KEYS_SYM = 650,
     PAGE_SYM = 651,
     PAGE_CHECKSUM_SYM = 652,
     PARAM_MARKER = 653,
     PARSER_SYM = 654,
     PARSE_VCOL_EXPR_SYM = 655,
     PARTIAL = 656,
     PARTITION_SYM = 657,
     PARTITIONS_SYM = 658,
     PARTITIONING_SYM = 659,
     PASSWORD = 660,
     PERSISTENT_SYM = 661,
     PHASE_SYM = 662,
     PLUGINS_SYM = 663,
     PLUGIN_SYM = 664,
     POINT_SYM = 665,
     POLYGON = 666,
     PORT_SYM = 667,
     POSITION_SYM = 668,
     PRECISION = 669,
     PREPARE_SYM = 670,
     PRESERVE_SYM = 671,
     PREV_SYM = 672,
     PRIMARY_SYM = 673,
     PRIVILEGES = 674,
     PROCEDURE_SYM = 675,
     PROCESS = 676,
     PROCESSLIST_SYM = 677,
     PROFILE_SYM = 678,
     PROFILES_SYM = 679,
     PROXY_SYM = 680,
     PURGE = 681,
     QUARTER_SYM = 682,
     QUERY_SYM = 683,
     QUICK = 684,
     RANGE_SYM = 685,
     READS_SYM = 686,
     READ_ONLY_SYM = 687,
     READ_SYM = 688,
     READ_WRITE_SYM = 689,
     REAL = 690,
     REBUILD_SYM = 691,
     RECOVER_SYM = 692,
     REDOFILE_SYM = 693,
     REDO_BUFFER_SIZE_SYM = 694,
     REDUNDANT_SYM = 695,
     REFERENCES = 696,
     REGEXP = 697,
     RELAY = 698,
     RELAYLOG_SYM = 699,
     RELAY_LOG_FILE_SYM = 700,
     RELAY_LOG_POS_SYM = 701,
     RELAY_THREAD = 702,
     RELEASE_SYM = 703,
     RELOAD = 704,
     REMOVE_SYM = 705,
     RENAME = 706,
     REORGANIZE_SYM = 707,
     REPAIR = 708,
     REPEATABLE_SYM = 709,
     REPEAT_SYM = 710,
     REPLACE = 711,
     REPLICATION = 712,
     REQUIRE_SYM = 713,
     RESET_SYM = 714,
     RESIGNAL_SYM = 715,
     RESOURCES = 716,
     RESTORE_SYM = 717,
     RESTRICT = 718,
     RESUME_SYM = 719,
     RETURNED_SQLSTATE_SYM = 720,
     RETURNING_SYM = 721,
     RETURNS_SYM = 722,
     RETURN_SYM = 723,
     REVERSE_SYM = 724,
     REVOKE = 725,
     RIGHT = 726,
     ROLE_SYM = 727,
     ROLLBACK_SYM = 728,
     ROLLUP_SYM = 729,
     ROUTINE_SYM = 730,
     ROWS_SYM = 731,
     ROW_FORMAT_SYM = 732,
     ROW_SYM = 733,
     ROW_COUNT_SYM = 734,
     RTREE_SYM = 735,
     SAVEPOINT_SYM = 736,
     SCHEDULE_SYM = 737,
     SCHEMA_NAME_SYM = 738,
     SECOND_MICROSECOND_SYM = 739,
     SECOND_SYM = 740,
     SECURITY_SYM = 741,
     SELECT_SYM = 742,
     SENSITIVE_SYM = 743,
     SEPARATOR_SYM = 744,
     SERIALIZABLE_SYM = 745,
     SERIAL_SYM = 746,
     SESSION_SYM = 747,
     SERVER_SYM = 748,
     SERVER_OPTIONS = 749,
     SET = 750,
     SET_VAR = 751,
     SHARE_SYM = 752,
     SHIFT_LEFT = 753,
     SHIFT_RIGHT = 754,
     SHOW = 755,
     SHUTDOWN = 756,
     SIGNAL_SYM = 757,
     SIGNED_SYM = 758,
     SIMPLE_SYM = 759,
     SLAVE = 760,
     SLAVES = 761,
     SLAVE_POS_SYM = 762,
     SLOW = 763,
     SMALLINT = 764,
     SNAPSHOT_SYM = 765,
     SOCKET_SYM = 766,
     SOFT_SYM = 767,
     SONAME_SYM = 768,
     SOUNDS_SYM = 769,
     SOURCE_SYM = 770,
     SPATIAL_SYM = 771,
     SPECIFIC_SYM = 772,
     SQLEXCEPTION_SYM = 773,
     SQLSTATE_SYM = 774,
     SQLWARNING_SYM = 775,
     SQL_BIG_RESULT = 776,
     SQL_BUFFER_RESULT = 777,
     SQL_CACHE_SYM = 778,
     SQL_CALC_FOUND_ROWS = 779,
     SQL_NO_CACHE_SYM = 780,
     SQL_SMALL_RESULT = 781,
     SQL_SYM = 782,
     SQL_THREAD = 783,
     SSL_SYM = 784,
     STARTING = 785,
     STARTS_SYM = 786,
     START_SYM = 787,
     STATS_AUTO_RECALC_SYM = 788,
     STATS_PERSISTENT_SYM = 789,
     STATS_SAMPLE_PAGES_SYM = 790,
     STATUS_SYM = 791,
     STDDEV_SAMP_SYM = 792,
     STD_SYM = 793,
     STOP_SYM = 794,
     STORAGE_SYM = 795,
     STRAIGHT_JOIN = 796,
     STRING_SYM = 797,
     SUBCLASS_ORIGIN_SYM = 798,
     SUBDATE_SYM = 799,
     SUBJECT_SYM = 800,
     SUBPARTITIONS_SYM = 801,
     SUBPARTITION_SYM = 802,
     SUBSTRING = 803,
     SUM_SYM = 804,
     SUPER_SYM = 805,
     SUSPEND_SYM = 806,
     SWAPS_SYM = 807,
     SWITCHES_SYM = 808,
     SYSDATE = 809,
     TABLES = 810,
     TABLESPACE = 811,
     TABLE_REF_PRIORITY = 812,
     TABLE_STATS_SYM = 813,
     TABLE_SYM = 814,
     TABLE_CHECKSUM_SYM = 815,
     TABLE_NAME_SYM = 816,
     TEMPORARY = 817,
     TEMPTABLE_SYM = 818,
     TERMINATED = 819,
     TEXT_STRING = 820,
     TEXT_SYM = 821,
     THAN_SYM = 822,
     THEN_SYM = 823,
     TIMESTAMP = 824,
     TIMESTAMP_ADD = 825,
     TIMESTAMP_DIFF = 826,
     TIME_SYM = 827,
     TINYBLOB = 828,
     TINYINT = 829,
     TINYTEXT = 830,
     TO_SYM = 831,
     TRAILING = 832,
     TRANSACTION_SYM = 833,
     TRANSACTIONAL_SYM = 834,
     TRIGGERS_SYM = 835,
     TRIGGER_SYM = 836,
     TRIM = 837,
     TRUE_SYM = 838,
     TRUNCATE_SYM = 839,
     TYPES_SYM = 840,
     TYPE_SYM = 841,
     UDF_RETURNS_SYM = 842,
     ULONGLONG_NUM = 843,
     UNCOMMITTED_SYM = 844,
     UNDEFINED_SYM = 845,
     UNDERSCORE_CHARSET = 846,
     UNDOFILE_SYM = 847,
     UNDO_BUFFER_SIZE_SYM = 848,
     UNDO_SYM = 849,
     UNICODE_SYM = 850,
     UNINSTALL_SYM = 851,
     UNION_SYM = 852,
     UNIQUE_SYM = 853,
     UNKNOWN_SYM = 854,
     UNLOCK_SYM = 855,
     UNSIGNED = 856,
     UNTIL_SYM = 857,
     UPDATE_SYM = 858,
     UPGRADE_SYM = 859,
     USAGE = 860,
     USER = 861,
     USER_STATS_SYM = 862,
     USE_FRM = 863,
     USE_SYM = 864,
     USING = 865,
     UTC_DATE_SYM = 866,
     UTC_TIMESTAMP_SYM = 867,
     UTC_TIME_SYM = 868,
     VALUES = 869,
     VALUE_SYM = 870,
     VARBINARY = 871,
     VARCHAR = 872,
     VARIABLES = 873,
     VARIANCE_SYM = 874,
     VARYING = 875,
     VAR_SAMP_SYM = 876,
     VIA_SYM = 877,
     VIEW_SYM = 878,
     VIRTUAL_SYM = 879,
     WAIT_SYM = 880,
     WARNINGS = 881,
     WEEK_SYM = 882,
     WEIGHT_STRING_SYM = 883,
     WHEN_SYM = 884,
     WHERE = 885,
     WHILE_SYM = 886,
     WITH = 887,
     WITH_CUBE_SYM = 888,
     WITH_ROLLUP_SYM = 889,
     WORK_SYM = 890,
     WRAPPER_SYM = 891,
     WRITE_SYM = 892,
     X509_SYM = 893,
     XA_SYM = 894,
     XML_SYM = 895,
     XOR = 896,
     YEAR_MONTH_SYM = 897,
     YEAR_SYM = 898,
     ZEROFILL = 899,
     IMPOSSIBLE_ACTION = 900
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define ASYNC_COMMIT_SYM 279
#define AT_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLIENT_STATS_SYM 325
#define CLOSE_SYM 326
#define COALESCE 327
#define CODE_SYM 328
#define COLLATE_SYM 329
#define COLLATION_SYM 330
#define COLUMNS 331
#define COLUMN_ADD_SYM 332
#define COLUMN_CHECK_SYM 333
#define COLUMN_CREATE_SYM 334
#define COLUMN_DELETE_SYM 335
#define COLUMN_GET_SYM 336
#define COLUMN_SYM 337
#define COLUMN_NAME_SYM 338
#define COMMENT_SYM 339
#define COMMITTED_SYM 340
#define COMMIT_SYM 341
#define COMPACT_SYM 342
#define COMPLETION_SYM 343
#define COMPRESSED_SYM 344
#define CONCURRENT 345
#define CONDITION_SYM 346
#define CONNECTION_SYM 347
#define CONSISTENT_SYM 348
#define CONSTRAINT 349
#define CONSTRAINT_CATALOG_SYM 350
#define CONSTRAINT_NAME_SYM 351
#define CONSTRAINT_SCHEMA_SYM 352
#define CONTAINS_SYM 353
#define CONTEXT_SYM 354
#define CONTINUE_SYM 355
#define CONTRIBUTORS_SYM 356
#define CONVERT_SYM 357
#define COUNT_SYM 358
#define CPU_SYM 359
#define CREATE 360
#define CROSS 361
#define CUBE_SYM 362
#define CURDATE 363
#define CURRENT_SYM 364
#define CURRENT_USER 365
#define CURRENT_ROLE 366
#define CURRENT_POS_SYM 367
#define CURSOR_SYM 368
#define CURSOR_NAME_SYM 369
#define CURTIME 370
#define DATABASE 371
#define DATABASES 372
#define DATAFILE_SYM 373
#define DATA_SYM 374
#define DATETIME 375
#define DATE_ADD_INTERVAL 376
#define DATE_SUB_INTERVAL 377
#define DATE_SYM 378
#define DAY_HOUR_SYM 379
#define DAY_MICROSECOND_SYM 380
#define DAY_MINUTE_SYM 381
#define DAY_SECOND_SYM 382
#define DAY_SYM 383
#define DEALLOCATE_SYM 384
#define DECIMAL_NUM 385
#define DECIMAL_SYM 386
#define DECLARE_SYM 387
#define DEFAULT 388
#define DEFINER_SYM 389
#define DEFRAGMENT_SYM 390
#define DELAYED_SYM 391
#define DELAY_KEY_WRITE_SYM 392
#define DELETE_SYM 393
#define DESC 394
#define DESCRIBE 395
#define DES_KEY_FILE 396
#define DETERMINISTIC_SYM 397
#define DIAGNOSTICS_SYM 398
#define DIRECTORY_SYM 399
#define DISABLE_SYM 400
#define DISCARD 401
#define DISK_SYM 402
#define DISTINCT 403
#define DIV_SYM 404
#define DOUBLE_SYM 405
#define DO_SYM 406
#define DROP 407
#define DUAL_SYM 408
#define DUMPFILE 409
#define DUPLICATE_SYM 410
#define DYNAMIC_SYM 411
#define EACH_SYM 412
#define ELSE 413
#define ELSEIF_SYM 414
#define ENABLE_SYM 415
#define ENCLOSED 416
#define END 417
#define ENDS_SYM 418
#define END_OF_INPUT 419
#define ENGINES_SYM 420
#define ENGINE_SYM 421
#define ENUM 422
#define EQ 423
#define EQUAL_SYM 424
#define ERROR_SYM 425
#define ERRORS 426
#define ESCAPED 427
#define ESCAPE_SYM 428
#define EVENTS_SYM 429
#define EVENT_SYM 430
#define EVERY_SYM 431
#define EXCHANGE_SYM 432
#define EXAMINED_SYM 433
#define EXECUTE_SYM 434
#define EXISTS 435
#define EXIT_SYM 436
#define EXPANSION_SYM 437
#define EXPORT_SYM 438
#define EXTENDED_SYM 439
#define EXTENT_SIZE_SYM 440
#define EXTRACT_SYM 441
#define FALSE_SYM 442
#define FAST_SYM 443
#define FAULTS_SYM 444
#define FETCH_SYM 445
#define FILE_SYM 446
#define FIRST_SYM 447
#define FIXED_SYM 448
#define FLOAT_NUM 449
#define FLOAT_SYM 450
#define FLUSH_SYM 451
#define FORCE_SYM 452
#define FOREIGN 453
#define FOR_SYM 454
#define FOUND_SYM 455
#define FROM 456
#define FULL 457
#define FULLTEXT_SYM 458
#define FUNCTION_SYM 459
#define GE 460
#define GENERAL 461
#define GENERATED_SYM 462
#define GEOMETRYCOLLECTION 463
#define GEOMETRY_SYM 464
#define GET_FORMAT 465
#define GET_SYM 466
#define GLOBAL_SYM 467
#define GRANT 468
#define GRANTS 469
#define GROUP_SYM 470
#define GROUP_CONCAT_SYM 471
#define GT_SYM 472
#define HANDLER_SYM 473
#define HARD_SYM 474
#define HASH_SYM 475
#define HAVING 476
#define HELP_SYM 477
#define HEX_NUM 478
#define HEX_STRING 479
#define HIGH_PRIORITY 480
#define HOST_SYM 481
#define HOSTS_SYM 482
#define HOUR_MICROSECOND_SYM 483
#define HOUR_MINUTE_SYM 484
#define HOUR_SECOND_SYM 485
#define HOUR_SYM 486
#define ID_SYM 487
#define IDENT 488
#define IDENTIFIED_SYM 489
#define IDENT_QUOTED 490
#define IF 491
#define IGNORE_SYM 492
#define IGNORE_SERVER_IDS_SYM 493
#define IMPORT 494
#define INDEXES 495
#define INDEX_SYM 496
#define INDEX_STATS_SYM 497
#define INFILE 498
#define INITIAL_SIZE_SYM 499
#define INNER_SYM 500
#define INOUT_SYM 501
#define INSENSITIVE_SYM 502
#define INSERT 503
#define INSERT_METHOD 504
#define INSTALL_SYM 505
#define INTERVAL_SYM 506
#define INTO 507
#define INT_SYM 508
#define INVOKER_SYM 509
#define IN_SYM 510
#define IO_SYM 511
#define IPC_SYM 512
#define IS 513
#define ISOLATION 514
#define ISSUER_SYM 515
#define ITERATE_SYM 516
#define JOIN_SYM 517
#define KEYS 518
#define KEY_BLOCK_SIZE 519
#define KEY_SYM 520
#define KILL_SYM 521
#define LANGUAGE_SYM 522
#define LAST_SYM 523
#define LAST_VALUE 524
#define LE 525
#define LEADING 526
#define LEAVES 527
#define LEAVE_SYM 528
#define LEFT 529
#define LESS_SYM 530
#define LEVEL_SYM 531
#define LEX_HOSTNAME 532
#define LIKE 533
#define LIMIT 534
#define LINEAR_SYM 535
#define LINES 536
#define LINESTRING 537
#define LIST_SYM 538
#define LOAD 539
#define LOCAL_SYM 540
#define LOCATOR_SYM 541
#define LOCKS_SYM 542
#define LOCK_SYM 543
#define LOGFILE_SYM 544
#define LOGS_SYM 545
#define LONGBLOB 546
#define LONGTEXT 547
#define LONG_NUM 548
#define LONG_SYM 549
#define LOOP_SYM 550
#define LOW_PRIORITY 551
#define LT 552
#define MASTER_CONNECT_RETRY_SYM 553
#define MASTER_GTID_POS_SYM 554
#define MASTER_HOST_SYM 555
#define MASTER_LOG_FILE_SYM 556
#define MASTER_LOG_POS_SYM 557
#define MASTER_PASSWORD_SYM 558
#define MASTER_PORT_SYM 559
#define MASTER_SERVER_ID_SYM 560
#define MASTER_SSL_CAPATH_SYM 561
#define MASTER_SSL_CA_SYM 562
#define MASTER_SSL_CERT_SYM 563
#define MASTER_SSL_CIPHER_SYM 564
#define MASTER_SSL_CRL_SYM 565
#define MASTER_SSL_CRLPATH_SYM 566
#define MASTER_SSL_KEY_SYM 567
#define MASTER_SSL_SYM 568
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 569
#define MASTER_SYM 570
#define MASTER_USER_SYM 571
#define MASTER_USE_GTID_SYM 572
#define MASTER_HEARTBEAT_PERIOD_SYM 573
#define MATCH 574
#define MAX_CONNECTIONS_PER_HOUR 575
#define MAX_QUERIES_PER_HOUR 576
#define MAX_ROWS 577
#define MAX_SIZE_SYM 578
#define MAX_SYM 579
#define MAX_UPDATES_PER_HOUR 580
#define MAX_USER_CONNECTIONS_SYM 581
#define MAX_VALUE_SYM 582
#define MEDIUMBLOB 583
#define MEDIUMINT 584
#define MEDIUMTEXT 585
#define MEDIUM_SYM 586
#define MEMORY_SYM 587
#define MERGE_SYM 588
#define MESSAGE_TEXT_SYM 589
#define MICROSECOND_SYM 590
#define MIGRATE_SYM 591
#define MINUTE_MICROSECOND_SYM 592
#define MINUTE_SECOND_SYM 593
#define MINUTE_SYM 594
#define MIN_ROWS 595
#define MIN_SYM 596
#define MODE_SYM 597
#define MODIFIES_SYM 598
#define MODIFY_SYM 599
#define MOD_SYM 600
#define MONTH_SYM 601
#define MULTILINESTRING 602
#define MULTIPOINT 603
#define MULTIPOLYGON 604
#define MUTEX_SYM 605
#define MYSQL_ERRNO_SYM 606
#define NAMES_SYM 607
#define NAME_SYM 608
#define NATIONAL_SYM 609
#define NATURAL 610
#define NCHAR_STRING 611
#define NCHAR_SYM 612
#define NDBCLUSTER_SYM 613
#define NE 614
#define NEG 615
#define NEW_SYM 616
#define NEXT_SYM 617
#define NODEGROUP_SYM 618
#define NONE_SYM 619
#define NOT2_SYM 620
#define NOT_SYM 621
#define NOW_SYM 622
#define NO_SYM 623
#define NO_WAIT_SYM 624
#define NO_WRITE_TO_BINLOG 625
#define NULL_SYM 626
#define NUM 627
#define NUMBER_SYM 628
#define NUMERIC_SYM 629
#define NVARCHAR_SYM 630
#define OFFSET_SYM 631
#define OLD_PASSWORD 632
#define ON 633
#define ONE_SYM 634
#define ONLY_SYM 635
#define ONLINE_SYM 636
#define OPEN_SYM 637
#define OPTIMIZE 638
#define OPTIONS_SYM 639
#define OPTION 640
#define OPTIONALLY 641
#define OR2_SYM 642
#define ORDER_SYM 643
#define OR_OR_SYM 644
#define OR_SYM 645
#define OUTER 646
#define OUTFILE 647
#define OUT_SYM 648
#define OWNER_SYM 649
#define PACK_KEYS_SYM 650
#define PAGE_SYM 651
#define PAGE_CHECKSUM_SYM 652
#define PARAM_MARKER 653
#define PARSER_SYM 654
#define PARSE_VCOL_EXPR_SYM 655
#define PARTIAL 656
#define PARTITION_SYM 657
#define PARTITIONS_SYM 658
#define PARTITIONING_SYM 659
#define PASSWORD 660
#define PERSISTENT_SYM 661
#define PHASE_SYM 662
#define PLUGINS_SYM 663
#define PLUGIN_SYM 664
#define POINT_SYM 665
#define POLYGON 666
#define PORT_SYM 667
#define POSITION_SYM 668
#define PRECISION 669
#define PREPARE_SYM 670
#define PRESERVE_SYM 671
#define PREV_SYM 672
#define PRIMARY_SYM 673
#define PRIVILEGES 674
#define PROCEDURE_SYM 675
#define PROCESS 676
#define PROCESSLIST_SYM 677
#define PROFILE_SYM 678
#define PROFILES_SYM 679
#define PROXY_SYM 680
#define PURGE 681
#define QUARTER_SYM 682
#define QUERY_SYM 683
#define QUICK 684
#define RANGE_SYM 685
#define READS_SYM 686
#define READ_ONLY_SYM 687
#define READ_SYM 688
#define READ_WRITE_SYM 689
#define REAL 690
#define REBUILD_SYM 691
#define RECOVER_SYM 692
#define REDOFILE_SYM 693
#define REDO_BUFFER_SIZE_SYM 694
#define REDUNDANT_SYM 695
#define REFERENCES 696
#define REGEXP 697
#define RELAY 698
#define RELAYLOG_SYM 699
#define RELAY_LOG_FILE_SYM 700
#define RELAY_LOG_POS_SYM 701
#define RELAY_THREAD 702
#define RELEASE_SYM 703
#define RELOAD 704
#define REMOVE_SYM 705
#define RENAME 706
#define REORGANIZE_SYM 707
#define REPAIR 708
#define REPEATABLE_SYM 709
#define REPEAT_SYM 710
#define REPLACE 711
#define REPLICATION 712
#define REQUIRE_SYM 713
#define RESET_SYM 714
#define RESIGNAL_SYM 715
#define RESOURCES 716
#define RESTORE_SYM 717
#define RESTRICT 718
#define RESUME_SYM 719
#define RETURNED_SQLSTATE_SYM 720
#define RETURNING_SYM 721
#define RETURNS_SYM 722
#define RETURN_SYM 723
#define REVERSE_SYM 724
#define REVOKE 725
#define RIGHT 726
#define ROLE_SYM 727
#define ROLLBACK_SYM 728
#define ROLLUP_SYM 729
#define ROUTINE_SYM 730
#define ROWS_SYM 731
#define ROW_FORMAT_SYM 732
#define ROW_SYM 733
#define ROW_COUNT_SYM 734
#define RTREE_SYM 735
#define SAVEPOINT_SYM 736
#define SCHEDULE_SYM 737
#define SCHEMA_NAME_SYM 738
#define SECOND_MICROSECOND_SYM 739
#define SECOND_SYM 740
#define SECURITY_SYM 741
#define SELECT_SYM 742
#define SENSITIVE_SYM 743
#define SEPARATOR_SYM 744
#define SERIALIZABLE_SYM 745
#define SERIAL_SYM 746
#define SESSION_SYM 747
#define SERVER_SYM 748
#define SERVER_OPTIONS 749
#define SET 750
#define SET_VAR 751
#define SHARE_SYM 752
#define SHIFT_LEFT 753
#define SHIFT_RIGHT 754
#define SHOW 755
#define SHUTDOWN 756
#define SIGNAL_SYM 757
#define SIGNED_SYM 758
#define SIMPLE_SYM 759
#define SLAVE 760
#define SLAVES 761
#define SLAVE_POS_SYM 762
#define SLOW 763
#define SMALLINT 764
#define SNAPSHOT_SYM 765
#define SOCKET_SYM 766
#define SOFT_SYM 767
#define SONAME_SYM 768
#define SOUNDS_SYM 769
#define SOURCE_SYM 770
#define SPATIAL_SYM 771
#define SPECIFIC_SYM 772
#define SQLEXCEPTION_SYM 773
#define SQLSTATE_SYM 774
#define SQLWARNING_SYM 775
#define SQL_BIG_RESULT 776
#define SQL_BUFFER_RESULT 777
#define SQL_CACHE_SYM 778
#define SQL_CALC_FOUND_ROWS 779
#define SQL_NO_CACHE_SYM 780
#define SQL_SMALL_RESULT 781
#define SQL_SYM 782
#define SQL_THREAD 783
#define SSL_SYM 784
#define STARTING 785
#define STARTS_SYM 786
#define START_SYM 787
#define STATS_AUTO_RECALC_SYM 788
#define STATS_PERSISTENT_SYM 789
#define STATS_SAMPLE_PAGES_SYM 790
#define STATUS_SYM 791
#define STDDEV_SAMP_SYM 792
#define STD_SYM 793
#define STOP_SYM 794
#define STORAGE_SYM 795
#define STRAIGHT_JOIN 796
#define STRING_SYM 797
#define SUBCLASS_ORIGIN_SYM 798
#define SUBDATE_SYM 799
#define SUBJECT_SYM 800
#define SUBPARTITIONS_SYM 801
#define SUBPARTITION_SYM 802
#define SUBSTRING 803
#define SUM_SYM 804
#define SUPER_SYM 805
#define SUSPEND_SYM 806
#define SWAPS_SYM 807
#define SWITCHES_SYM 808
#define SYSDATE 809
#define TABLES 810
#define TABLESPACE 811
#define TABLE_REF_PRIORITY 812
#define TABLE_STATS_SYM 813
#define TABLE_SYM 814
#define TABLE_CHECKSUM_SYM 815
#define TABLE_NAME_SYM 816
#define TEMPORARY 817
#define TEMPTABLE_SYM 818
#define TERMINATED 819
#define TEXT_STRING 820
#define TEXT_SYM 821
#define THAN_SYM 822
#define THEN_SYM 823
#define TIMESTAMP 824
#define TIMESTAMP_ADD 825
#define TIMESTAMP_DIFF 826
#define TIME_SYM 827
#define TINYBLOB 828
#define TINYINT 829
#define TINYTEXT 830
#define TO_SYM 831
#define TRAILING 832
#define TRANSACTION_SYM 833
#define TRANSACTIONAL_SYM 834
#define TRIGGERS_SYM 835
#define TRIGGER_SYM 836
#define TRIM 837
#define TRUE_SYM 838
#define TRUNCATE_SYM 839
#define TYPES_SYM 840
#define TYPE_SYM 841
#define UDF_RETURNS_SYM 842
#define ULONGLONG_NUM 843
#define UNCOMMITTED_SYM 844
#define UNDEFINED_SYM 845
#define UNDERSCORE_CHARSET 846
#define UNDOFILE_SYM 847
#define UNDO_BUFFER_SIZE_SYM 848
#define UNDO_SYM 849
#define UNICODE_SYM 850
#define UNINSTALL_SYM 851
#define UNION_SYM 852
#define UNIQUE_SYM 853
#define UNKNOWN_SYM 854
#define UNLOCK_SYM 855
#define UNSIGNED 856
#define UNTIL_SYM 857
#define UPDATE_SYM 858
#define UPGRADE_SYM 859
#define USAGE 860
#define USER 861
#define USER_STATS_SYM 862
#define USE_FRM 863
#define USE_SYM 864
#define USING 865
#define UTC_DATE_SYM 866
#define UTC_TIMESTAMP_SYM 867
#define UTC_TIME_SYM 868
#define VALUES 869
#define VALUE_SYM 870
#define VARBINARY 871
#define VARCHAR 872
#define VARIABLES 873
#define VARIANCE_SYM 874
#define VARYING 875
#define VAR_SAMP_SYM 876
#define VIA_SYM 877
#define VIEW_SYM 878
#define VIRTUAL_SYM 879
#define WAIT_SYM 880
#define WARNINGS 881
#define WEEK_SYM 882
#define WEIGHT_STRING_SYM 883
#define WHEN_SYM 884
#define WHERE 885
#define WHILE_SYM 886
#define WITH 887
#define WITH_CUBE_SYM 888
#define WITH_ROLLUP_SYM 889
#define WORK_SYM 890
#define WRAPPER_SYM 891
#define WRITE_SYM 892
#define X509_SYM 893
#define XA_SYM 894
#define XML_SYM 895
#define XOR 896
#define YEAR_MONTH_SYM 897
#define YEAR_SYM 898
#define ZEROFILL 899
#define IMPOSSIBLE_ACTION 900




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 896 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2342 "/data/.r/mariadb-10.0.12/Release/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 956 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2359 "/data/.r/mariadb-10.0.12/Release/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  624
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   66647

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  665
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  999
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2830
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4799

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   900

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   658,     2,     2,     2,   652,   647,     2,
     655,   656,   650,   649,   657,   648,   663,   651,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   664,   661,
       2,     2,     2,     2,   662,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   653,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   659,   646,   660,   654,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   135,   137,   139,   144,
     146,   149,   150,   155,   156,   159,   163,   165,   168,   169,
     173,   174,   181,   183,   187,   191,   195,   199,   203,   207,
     211,   215,   219,   223,   227,   231,   235,   239,   243,   247,
     253,   255,   256,   258,   262,   264,   268,   272,   276,   280,
     284,   288,   292,   293,   295,   297,   298,   306,   307,   308,
     324,   325,   326,   342,   343,   344,   360,   361,   368,   369,
     373,   378,   384,   389,   393,   396,   407,   409,   413,   416,
     419,   422,   425,   428,   431,   434,   435,   449,   450,   457,
     460,   461,   463,   467,   469,   470,   473,   474,   477,   478,
     480,   484,   489,   490,   493,   494,   497,   499,   501,   503,
     505,   507,   509,   511,   513,   515,   517,   519,   521,   523,
     524,   528,   530,   531,   534,   535,   538,   541,   544,   547,
     550,   554,   558,   560,   562,   564,   567,   571,   575,   576,
     581,   582,   586,   587,   589,   593,   595,   596,   598,   602,
     604,   605,   609,   610,   612,   616,   618,   623,   624,   626,
     628,   630,   631,   635,   638,   642,   643,   647,   648,   654,
     660,   661,   669,   675,   676,   679,   681,   683,   685,   689,
     691,   693,   695,   699,   700,   702,   704,   706,   708,   711,
     713,   717,   719,   721,   722,   724,   725,   728,   732,   738,
     740,   742,   744,   746,   748,   750,   752,   754,   756,   758,
     760,   762,   764,   766,   768,   772,   777,   778,   780,   782,
     786,   788,   792,   796,   798,   801,   803,   805,   807,   809,
     813,   817,   819,   821,   823,   825,   827,   829,   831,   833,
     835,   837,   839,   841,   843,   845,   849,   850,   853,   855,
     857,   859,   861,   863,   865,   867,   869,   871,   873,   875,
     877,   879,   880,   886,   887,   890,   891,   895,   896,   899,
     902,   905,   908,   909,   916,   919,   920,   923,   925,   927,
     931,   932,   933,   934,   942,   943,   946,   949,   951,   953,
     954,   955,   964,   965,   972,   974,   977,   979,   982,   983,
     984,   991,   992,   993,  1000,  1001,  1004,  1005,  1011,  1012,
    1014,  1015,  1021,  1022,  1025,  1026,  1032,  1037,  1038,  1039,
    1048,  1049,  1057,  1059,  1061,  1063,  1065,  1067,  1070,  1075,
    1081,  1082,  1087,  1092,  1097,  1101,  1105,  1108,  1111,  1112,
    1115,  1117,  1120,  1124,  1126,  1128,  1130,  1132,  1134,  1137,
    1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,  1157,  1159,
    1161,  1164,  1168,  1170,  1172,  1174,  1176,  1178,  1180,  1182,
    1185,  1189,  1191,  1193,  1195,  1197,  1199,  1201,  1203,  1205,
    1207,  1210,  1214,  1216,  1218,  1220,  1223,  1226,  1229,  1231,
    1233,  1235,  1237,  1240,  1244,  1248,  1252,  1256,  1260,  1264,
    1268,  1272,  1277,  1278,  1280,  1282,  1284,  1286,  1288,  1289,
    1297,  1301,  1302,  1308,  1310,  1313,  1318,  1319,  1320,  1326,
    1327,  1335,  1337,  1338,  1340,  1341,  1346,  1347,  1348,  1352,
    1358,  1365,  1366,  1371,  1374,  1377,  1380,  1383,  1384,  1386,
    1387,  1391,  1392,  1394,  1396,  1400,  1402,  1407,  1413,  1419,
    1420,  1423,  1424,  1425,  1433,  1434,  1445,  1447,  1451,  1453,
    1455,  1456,  1459,  1460,  1464,  1466,  1470,  1471,  1478,  1480,
    1481,  1482,  1488,  1489,  1494,  1496,  1498,  1500,  1504,  1506,
    1510,  1511,  1512,  1518,  1520,  1524,  1526,  1528,  1529,  1533,
    1535,  1539,  1540,  1545,  1547,  1548,  1550,  1553,  1555,  1559,
    1564,  1568,  1572,  1576,  1580,  1585,  1590,  1594,  1595,  1596,
    1603,  1604,  1606,  1607,  1609,  1611,  1614,  1616,  1618,  1619,
    1621,  1623,  1626,  1628,  1629,  1633,  1635,  1639,  1640,  1642,
    1644,  1647,  1649,  1652,  1656,  1660,  1664,  1668,  1672,  1676,
    1680,  1684,  1688,  1692,  1696,  1700,  1704,  1708,  1712,  1716,
    1720,  1724,  1728,  1732,  1736,  1737,  1744,  1746,  1748,  1752,
    1757,  1762,  1765,  1768,  1771,  1775,  1779,  1783,  1787,  1791,
    1795,  1799,  1804,  1809,  1811,  1813,  1815,  1817,  1819,  1821,
    1823,  1825,  1827,  1829,  1831,  1833,  1835,  1838,  1840,  1842,
    1844,  1846,  1848,  1850,  1854,  1856,  1858,  1861,  1864,  1865,
    1874,  1875,  1885,  1886,  1896,  1897,  1907,  1916,  1919,  1920,
    1922,  1927,  1928,  1930,  1933,  1934,  1938,  1941,  1950,  1951,
    1954,  1955,  1957,  1959,  1960,  1962,  1965,  1967,  1969,  1972,
    1975,  1980,  1984,  1988,  1992,  1996,  1998,  2001,  2003,  2005,
    2009,  2012,  2016,  2019,  2022,  2024,  2028,  2032,  2035,  2039,
    2041,  2044,  2047,  2050,  2052,  2055,  2057,  2059,  2061,  2064,
    2068,  2071,  2075,  2078,  2081,  2085,  2089,  2093,  2094,  2101,
    2102,  2109,  2112,  2114,  2116,  2118,  2120,  2122,  2124,  2126,
    2128,  2130,  2132,  2134,  2137,  2140,  2142,  2145,  2147,  2150,
    2154,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2174,
    2175,  2177,  2179,  2185,  2186,  2188,  2191,  2193,  2195,  2197,
    2199,  2203,  2207,  2211,  2215,  2216,  2218,  2219,  2221,  2222,
    2224,  2227,  2229,  2231,  2234,  2237,  2242,  2244,  2248,  2251,
    2253,  2256,  2259,  2262,  2266,  2270,  2274,  2278,  2281,  2284,
    2286,  2288,  2290,  2293,  2295,  2297,  2299,  2301,  2303,  2304,
    2307,  2309,  2311,  2313,  2315,  2317,  2318,  2321,  2323,  2325,
    2326,  2328,  2330,  2333,  2336,  2338,  2341,  2344,  2345,  2347,
    2349,  2351,  2355,  2357,  2361,  2362,  2364,  2365,  2370,  2372,
    2374,  2376,  2377,  2379,  2382,  2384,  2386,  2389,  2391,  2395,
    2399,  2401,  2403,  2404,  2407,  2408,  2410,  2416,  2417,  2421,
    2425,  2427,  2428,  2431,  2434,  2437,  2438,  2442,  2446,  2453,
    2460,  2462,  2464,  2467,  2470,  2473,  2475,  2478,  2481,  2483,
    2485,  2486,  2488,  2490,  2492,  2494,  2495,  2497,  2499,  2501,
    2502,  2504,  2507,  2508,  2510,  2511,  2513,  2514,  2516,  2518,
    2521,  2523,  2526,  2528,  2531,  2534,  2537,  2541,  2544,  2548,
    2552,  2556,  2560,  2562,  2564,  2566,  2568,  2572,  2574,  2576,
    2578,  2583,  2586,  2588,  2593,  2594,  2596,  2599,  2600,  2603,
    2605,  2609,  2610,  2611,  2619,  2620,  2626,  2634,  2635,  2641,
    2642,  2648,  2649,  2655,  2656,  2661,  2662,  2673,  2677,  2682,
    2686,  2690,  2698,  2699,  2703,  2705,  2710,  2711,  2715,  2716,
    2719,  2720,  2722,  2723,  2726,  2729,  2731,  2734,  2737,  2739,
    2741,  2743,  2748,  2753,  2754,  2761,  2766,  2767,  2773,  2774,
    2781,  2786,  2790,  2792,  2800,  2803,  2805,  2807,  2808,  2815,
    2816,  2820,  2823,  2824,  2830,  2831,  2832,  2839,  2841,  2845,
    2847,  2848,  2851,  2854,  2858,  2860,  2864,  2868,  2872,  2875,
    2880,  2881,  2889,  2890,  2891,  2900,  2906,  2912,  2916,  2921,
    2924,  2927,  2934,  2940,  2944,  2950,  2952,  2954,  2956,  2958,
    2960,  2961,  2963,  2965,  2968,  2971,  2975,  2979,  2983,  2987,
    2988,  2990,  2991,  2993,  2994,  2996,  2997,  3000,  3001,  3003,
    3006,  3008,  3010,  3012,  3013,  3015,  3017,  3018,  3021,  3023,
    3024,  3026,  3028,  3030,  3031,  3038,  3039,  3045,  3050,  3055,
    3059,  3060,  3062,  3064,  3068,  3072,  3075,  3078,  3079,  3082,
    3084,  3088,  3089,  3091,  3093,  3094,  3097,  3102,  3104,  3108,
    3109,  3115,  3116,  3118,  3120,  3121,  3128,  3129,  3131,  3133,
    3136,  3138,  3140,  3142,  3143,  3149,  3151,  3155,  3158,  3159,
    3163,  3165,  3170,  3172,  3173,  3178,  3180,  3181,  3186,  3187,
    3189,  3193,  3194,  3196,  3200,  3202,  3204,  3207,  3208,  3214,
    3215,  3217,  3219,  3222,  3224,  3226,  3228,  3230,  3232,  3235,
    3236,  3242,  3243,  3245,  3247,  3248,  3253,  3258,  3262,  3268,
    3270,  3274,  3278,  3279,  3286,  3288,  3290,  3292,  3296,  3299,
    3303,  3305,  3307,  3308,  3315,  3317,  3319,  3321,  3325,  3329,
    3334,  3335,  3342,  3343,  3346,  3347,  3352,  3353,  3356,  3358,
    3361,  3366,  3369,  3373,  3376,  3380,  3381,  3385,  3386,  3387,
    3394,  3397,  3399,  3401,  3404,  3407,  3416,  3421,  3422,  3424,
    3427,  3429,  3431,  3433,  3435,  3436,  3439,  3444,  3448,  3450,
    3452,  3456,  3461,  3462,  3463,  3464,  3467,  3470,  3472,  3474,
    3475,  3478,  3482,  3483,  3486,  3490,  3491,  3494,  3498,  3502,
    3506,  3509,  3513,  3518,  3522,  3527,  3531,  3536,  3538,  3542,
    3547,  3551,  3555,  3562,  3564,  3570,  3577,  3583,  3591,  3598,
    3607,  3613,  3620,  3625,  3630,  3636,  3640,  3645,  3647,  3651,
    3655,  3659,  3663,  3667,  3671,  3677,  3683,  3687,  3691,  3695,
    3699,  3703,  3707,  3709,  3711,  3713,  3715,  3717,  3719,  3721,
    3723,  3725,  3727,  3729,  3731,  3733,  3735,  3737,  3739,  3741,
    3742,  3745,  3747,  3750,  3752,  3754,  3756,  3759,  3762,  3764,
    3766,  3769,  3772,  3777,  3779,  3783,  3785,  3787,  3789,  3791,
    3793,  3797,  3799,  3801,  3803,  3805,  3809,  3812,  3815,  3818,
    3821,  3825,  3829,  3835,  3842,  3847,  3852,  3860,  3863,  3870,
    3876,  3883,  3890,  3895,  3900,  3906,  3911,  3918,  3921,  3924,
    3929,  3934,  3939,  3950,  3957,  3966,  3973,  3978,  3983,  3990,
    3995,  4000,  4005,  4012,  4017,  4025,  4033,  4041,  4048,  4055,
    4062,  4069,  4073,  4078,  4085,  4094,  4097,  4100,  4109,  4118,
    4125,  4132,  4135,  4142,  4149,  4158,  4167,  4174,  4183,  4190,
    4193,  4202,  4211,  4214,  4217,  4220,  4227,  4234,  4239,  4244,
    4253,  4258,  4263,  4268,  4273,  4277,  4286,  4291,  4296,  4303,
    4308,  4313,  4318,  4325,  4334,  4339,  4343,  4350,  4355,  4362,
    4368,  4377,  4385,  4396,  4398,  4405,  4410,  4415,  4420,  4425,
    4430,  4437,  4442,  4443,  4449,  4456,  4459,  4463,  4464,  4469,
    4470,  4474,  4475,  4477,  4479,  4483,  4488,  4493,  4499,  4504,
    4509,  4514,  4520,  4525,  4526,  4527,  4535,  4540,  4546,  4551,
    4557,  4562,  4567,  4572,  4577,  4582,  4588,  4589,  4598,  4599,
    4603,  4607,  4609,  4614,  4615,  4617,  4618,  4621,  4622,  4623,
    4628,  4633,  4636,  4637,  4641,  4644,  4648,  4651,  4653,  4655,
    4658,  4660,  4663,  4665,  4668,  4671,  4674,  4675,  4679,  4680,
    4682,  4684,  4688,  4690,  4694,  4696,  4700,  4701,  4703,  4704,
    4707,  4712,  4718,  4720,  4722,  4724,  4726,  4731,  4733,  4737,
    4741,  4742,  4749,  4750,  4759,  4764,  4765,  4774,  4775,  4786,
    4793,  4794,  4803,  4804,  4815,  4822,  4824,  4827,  4829,  4831,
    4834,  4835,  4837,  4843,  4844,  4850,  4854,  4860,  4863,  4864,
    4865,  4873,  4875,  4876,  4877,  4884,  4885,  4889,  4890,  4891,
    4897,  4898,  4900,  4901,  4903,  4904,  4907,  4911,  4915,  4917,
    4919,  4920,  4928,  4929,  4937,  4939,  4942,  4943,  4944,  4947,
    4948,  4951,  4952,  4954,  4956,  4958,  4960,  4964,  4966,  4970,
    4972,  4974,  4976,  4978,  4980,  4982,  4984,  4986,  4988,  4990,
    4992,  4994,  4996,  4998,  5000,  5002,  5004,  5006,  5008,  5010,
    5012,  5014,  5016,  5018,  5020,  5021,  5023,  5025,  5026,  5029,
    5030,  5032,  5033,  5034,  5038,  5039,  5040,  5044,  5047,  5048,
    5049,  5054,  5059,  5062,  5063,  5065,  5067,  5071,  5075,  5077,
    5080,  5081,  5083,  5084,  5089,  5094,  5097,  5098,  5100,  5102,
    5103,  5105,  5106,  5108,  5111,  5117,  5122,  5124,  5128,  5132,
    5134,  5136,  5138,  5140,  5142,  5144,  5145,  5148,  5152,  5157,
    5159,  5162,  5165,  5167,  5169,  5171,  5173,  5175,  5177,  5179,
    5181,  5183,  5185,  5187,  5189,  5191,  5193,  5195,  5197,  5199,
    5201,  5203,  5205,  5207,  5209,  5211,  5213,  5215,  5217,  5218,
    5219,  5226,  5227,  5229,  5233,  5235,  5239,  5240,  5243,  5247,
    5249,  5252,  5254,  5255,  5259,  5260,  5261,  5269,  5272,  5274,
    5275,  5279,  5280,  5288,  5289,  5297,  5302,  5309,  5314,  5319,
    5324,  5329,  5330,  5337,  5342,  5347,  5353,  5360,  5365,  5367,
    5371,  5373,  5376,  5378,  5382,  5384,  5385,  5388,  5389,  5391,
    5392,  5393,  5402,  5403,  5404,  5411,  5412,  5414,  5416,  5418,
    5420,  5422,  5425,  5427,  5429,  5431,  5435,  5440,  5441,  5445,
    5449,  5451,  5454,  5457,  5458,  5462,  5463,  5469,  5473,  5475,
    5479,  5481,  5485,  5487,  5489,  5490,  5492,  5493,  5498,  5499,
    5501,  5505,  5507,  5509,  5511,  5512,  5513,  5520,  5521,  5522,
    5534,  5538,  5540,  5544,  5548,  5550,  5554,  5555,  5557,  5558,
    5563,  5564,  5565,  5575,  5576,  5582,  5583,  5590,  5591,  5594,
    5596,  5600,  5603,  5608,  5609,  5612,  5613,  5616,  5618,  5620,
    5622,  5623,  5628,  5629,  5631,  5632,  5634,  5636,  5640,  5642,
    5644,  5647,  5650,  5653,  5655,  5657,  5659,  5661,  5662,  5666,
    5667,  5671,  5674,  5679,  5684,  5688,  5693,  5698,  5700,  5704,
    5708,  5712,  5716,  5723,  5726,  5729,  5730,  5737,  5738,  5746,
    5752,  5755,  5757,  5759,  5761,  5767,  5773,  5776,  5779,  5781,
    5786,  5790,  5793,  5797,  5800,  5803,  5805,  5809,  5814,  5818,
    5822,  5825,  5829,  5832,  5836,  5838,  5840,  5842,  5844,  5848,
    5852,  5856,  5860,  5864,  5868,  5872,  5876,  5880,  5882,  5884,
    5886,  5888,  5890,  5891,  5893,  5894,  5897,  5898,  5900,  5902,
    5904,  5905,  5908,  5909,  5912,  5913,  5916,  5919,  5920,  5925,
    5926,  5931,  5933,  5935,  5937,  5939,  5941,  5943,  5945,  5946,
    5948,  5950,  5951,  5953,  5955,  5956,  5961,  5962,  5967,  5969,
    5970,  5972,  5977,  5978,  5982,  5986,  5988,  5991,  5994,  5997,
    6000,  6003,  6007,  6010,  6012,  6014,  6016,  6018,  6021,  6023,
    6025,  6027,  6029,  6031,  6033,  6035,  6036,  6038,  6039,  6043,
    6044,  6048,  6052,  6054,  6055,  6060,  6062,  6065,  6066,  6068,
    6069,  6073,  6077,  6080,  6083,  6084,  6090,  6091,  6093,  6095,
    6096,  6098,  6100,  6103,  6105,  6108,  6110,  6113,  6114,  6115,
    6116,  6117,  6140,  6142,  6144,  6145,  6147,  6148,  6150,  6152,
    6153,  6155,  6157,  6158,  6161,  6164,  6166,  6170,  6175,  6179,
    6183,  6184,  6187,  6190,  6192,  6196,  6200,  6201,  6206,  6207,
    6211,  6213,  6215,  6216,  6220,  6223,  6227,  6229,  6231,  6234,
    6235,  6238,  6242,  6244,  6250,  6252,  6254,  6257,  6260,  6262,
    6264,  6266,  6268,  6270,  6272,  6275,  6278,  6280,  6282,  6284,
    6286,  6288,  6290,  6292,  6294,  6296,  6299,  6302,  6304,  6306,
    6308,  6310,  6312,  6315,  6318,  6321,  6323,  6325,  6329,  6335,
    6337,  6339,  6341,  6343,  6345,  6349,  6354,  6360,  6362,  6368,
    6372,  6375,  6377,  6381,  6384,  6387,  6392,  6394,  6396,  6398,
    6400,  6402,  6404,  6406,  6408,  6410,  6412,  6414,  6416,  6418,
    6420,  6424,  6427,  6429,  6431,  6433,  6435,  6437,  6439,  6441,
    6443,  6445,  6447,  6449,  6451,  6453,  6455,  6457,  6459,  6461,
    6463,  6465,  6467,  6469,  6471,  6473,  6475,  6477,  6479,  6481,
    6483,  6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,  6501,
    6503,  6505,  6507,  6509,  6511,  6513,  6515,  6517,  6519,  6521,
    6523,  6525,  6527,  6529,  6531,  6533,  6535,  6537,  6539,  6541,
    6543,  6545,  6547,  6549,  6551,  6553,  6555,  6557,  6559,  6561,
    6563,  6565,  6567,  6569,  6571,  6573,  6575,  6577,  6579,  6581,
    6583,  6585,  6587,  6589,  6591,  6593,  6595,  6597,  6599,  6601,
    6603,  6605,  6607,  6609,  6611,  6613,  6615,  6617,  6619,  6621,
    6623,  6625,  6627,  6629,  6631,  6633,  6635,  6637,  6639,  6641,
    6643,  6645,  6647,  6649,  6651,  6653,  6655,  6657,  6659,  6661,
    6663,  6665,  6667,  6669,  6671,  6673,  6675,  6677,  6679,  6681,
    6683,  6685,  6687,  6689,  6691,  6693,  6695,  6697,  6699,  6701,
    6703,  6705,  6707,  6709,  6711,  6713,  6715,  6717,  6719,  6721,
    6723,  6725,  6727,  6729,  6731,  6733,  6735,  6737,  6739,  6741,
    6743,  6745,  6747,  6749,  6751,  6753,  6755,  6757,  6759,  6761,
    6763,  6765,  6767,  6769,  6771,  6773,  6775,  6777,  6779,  6781,
    6783,  6785,  6787,  6789,  6791,  6793,  6795,  6797,  6799,  6801,
    6803,  6805,  6807,  6809,  6811,  6813,  6815,  6817,  6819,  6821,
    6823,  6825,  6827,  6829,  6831,  6833,  6835,  6837,  6839,  6841,
    6843,  6845,  6847,  6849,  6851,  6853,  6855,  6857,  6859,  6861,
    6863,  6865,  6867,  6869,  6871,  6873,  6875,  6877,  6879,  6881,
    6883,  6885,  6887,  6889,  6891,  6893,  6895,  6897,  6899,  6901,
    6903,  6905,  6907,  6909,  6911,  6913,  6915,  6917,  6919,  6921,
    6923,  6925,  6927,  6929,  6931,  6933,  6935,  6937,  6939,  6941,
    6943,  6945,  6947,  6949,  6951,  6953,  6955,  6957,  6959,  6961,
    6963,  6965,  6967,  6969,  6971,  6973,  6975,  6977,  6979,  6981,
    6983,  6985,  6987,  6989,  6991,  6993,  6995,  6997,  6999,  7001,
    7003,  7005,  7007,  7009,  7011,  7013,  7015,  7017,  7019,  7021,
    7023,  7025,  7027,  7029,  7031,  7033,  7035,  7037,  7039,  7041,
    7043,  7045,  7047,  7049,  7051,  7053,  7055,  7057,  7059,  7061,
    7063,  7065,  7067,  7069,  7071,  7073,  7075,  7077,  7079,  7081,
    7083,  7085,  7087,  7089,  7091,  7093,  7095,  7097,  7099,  7101,
    7103,  7105,  7107,  7109,  7111,  7113,  7115,  7117,  7119,  7121,
    7123,  7125,  7127,  7129,  7131,  7133,  7135,  7137,  7139,  7141,
    7143,  7145,  7147,  7149,  7151,  7153,  7155,  7157,  7159,  7161,
    7163,  7165,  7167,  7169,  7171,  7173,  7175,  7177,  7178,  7182,
    7183,  7187,  7188,  7192,  7193,  7197,  7198,  7202,  7205,  7206,
    7209,  7210,  7213,  7214,  7219,  7220,  7224,  7226,  7228,  7230,
    7232,  7233,  7235,  7237,  7239,  7240,  7243,  7246,  7249,  7253,
    7257,  7262,  7269,  7272,  7276,  7280,  7283,  7287,  7293,  7295,
    7299,  7303,  7305,  7307,  7311,  7315,  7317,  7321,  7324,  7327,
    7330,  7333,  7336,  7338,  7340,  7345,  7350,  7352,  7354,  7356,
    7358,  7360,  7361,  7366,  7368,  7370,  7372,  7376,  7380,  7382,
    7384,  7387,  7390,  7393,  7394,  7398,  7403,  7407,  7408,  7416,
    7418,  7421,  7423,  7425,  7427,  7429,  7431,  7433,  7434,  7440,
    7442,  7444,  7446,  7448,  7450,  7454,  7461,  7468,  7475,  7483,
    7489,  7493,  7498,  7500,  7504,  7513,  7522,  7531,  7538,  7543,
    7544,  7548,  7549,  7553,  7555,  7559,  7562,  7564,  7566,  7567,
    7569,  7571,  7574,  7575,  7577,  7579,  7583,  7584,  7588,  7589,
    7593,  7594,  7598,  7599,  7603,  7605,  7607,  7609,  7611,  7613,
    7615,  7617,  7619,  7621,  7623,  7625,  7628,  7631,  7633,  7637,
    7640,  7643,  7646,  7649,  7652,  7655,  7658,  7661,  7663,  7665,
    7668,  7669,  7671,  7675,  7677,  7680,  7683,  7686,  7688,  7692,
    7696,  7698,  7700,  7704,  7706,  7710,  7712,  7716,  7718,  7720,
    7722,  7724,  7729,  7735,  7740,  7747,  7749,  7750,  7754,  7758,
    7760,  7762,  7763,  7766,  7769,  7772,  7775,  7776,  7779,  7780,
    7784,  7787,  7789,  7792,  7795,  7798,  7801,  7804,  7805,  7809,
    7810,  7812,  7813,  7817,  7820,  7821,  7823,  7826,  7827,  7829,
    7834,  7839,  7845,  7848,  7852,  7853,  7855,  7856,  7861,  7862,
    7864,  7866,  7867,  7869,  7870,  7873,  7876,  7878,  7879,  7881,
    7883,  7886,  7890,  7893,  7894,  7901,  7905,  7906,  7907,  7908,
    7910,  7913,  7915,  7917,  7919,  7921,  7923,  7925,  7927,  7929,
    7931,  7934,  7937,  7941,  7943,  7945,  7947,  7949,  7951,  7953,
    7955,  7957,  7959,  7961,  7963,  7965,  7967,  7968,  7972,  7976,
    7980,  7984,  7985,  7989,  7993,  7994,  8002,  8003,  8007,  8009,
    8013,  8014,  8018,  8021,  8026,  8027,  8031,  8036,  8041,  8042,
    8043,  8044,  8061,  8070,  8078,  8079,  8080,  8081,  8082,  8083,
    8099,  8100,  8101,  8102,  8103,  8116,  8121,  8126,  8130,  8135,
    8139,  8142,  8144,  8148,  8154,  8156,  8158,  8159,  8161,  8163,
    8164,  8167,  8168,  8169,  8173,  8174,  8177,  8183,  8187,  8191,
    8195
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     666,     0,    -1,   164,    -1,    -1,   669,   667,   661,   668,
      -1,   669,   164,    -1,    -1,   164,    -1,   670,    -1,  1593,
      -1,  1056,    -1,  1127,    -1,  1140,    -1,   724,    -1,   682,
      -1,  1141,    -1,  1119,    -1,  1599,    -1,   691,    -1,   671,
      -1,  1392,    -1,  1426,    -1,  1343,    -1,  1345,    -1,   675,
      -1,  1433,    -1,   760,    -1,  1559,    -1,  1549,    -1,   680,
      -1,  1356,    -1,  1661,    -1,  1663,    -1,  1154,    -1,  1454,
      -1,  1461,    -1,  1541,    -1,  1146,    -1,   970,    -1,   879,
      -1,  1161,    -1,   673,    -1,  1450,    -1,  1602,    -1,  1149,
      -1,  1122,    -1,  1359,    -1,  1444,    -1,   759,    -1,  1556,
      -1,  1600,    -1,  1601,    -1,  1173,    -1,  1514,    -1,   752,
      -1,  1412,    -1,  1459,    -1,  1106,    -1,  1109,    -1,  1405,
      -1,  1662,    -1,  1547,    -1,  1384,    -1,  1460,    -1,  1653,
      -1,   672,   415,  1506,    -1,   129,    -1,   152,    -1,   415,
    1506,   201,   674,    -1,  1503,    -1,   662,  1508,    -1,    -1,
     179,  1506,   676,   677,    -1,    -1,   610,   678,    -1,   678,
     657,   679,    -1,   679,    -1,   662,  1508,    -1,    -1,   222,
     681,  1508,    -1,    -1,    60,   315,   689,   576,   683,   684,
      -1,   685,    -1,   684,   657,   685,    -1,   300,   168,  1503,
      -1,   316,   168,  1503,    -1,   303,   168,  1503,    -1,   304,
     168,  1322,    -1,   298,   168,  1322,    -1,   313,   168,  1322,
      -1,   307,   168,  1503,    -1,   306,   168,  1503,    -1,   308,
     168,  1503,    -1,   309,   168,  1503,    -1,   312,   168,  1503,
      -1,   314,   168,  1322,    -1,   310,   168,  1503,    -1,   311,
     168,  1503,    -1,   318,   168,  1490,    -1,   238,   168,   655,
     686,   656,    -1,   688,    -1,    -1,   687,    -1,   686,   657,
     687,    -1,  1322,    -1,   301,   168,  1503,    -1,   302,   168,
    1324,    -1,   445,   168,  1503,    -1,   446,   168,  1322,    -1,
     317,   168,   112,    -1,   317,   168,   507,    -1,   317,   168,
     368,    -1,    -1,   690,    -1,  1503,    -1,    -1,   935,   931,
     559,   934,  1499,   692,   867,    -1,    -1,    -1,   105,  1033,
     241,   934,  1506,  1037,   378,  1499,   693,   655,  1050,   656,
    1038,   694,  1092,    -1,    -1,    -1,   105,  1034,   241,   934,
    1506,  1036,   378,  1499,   695,   655,  1050,   656,  1039,   696,
    1092,    -1,    -1,    -1,   105,  1035,   241,   934,  1506,  1036,
     378,  1499,   697,   655,  1050,   656,  1040,   698,  1092,    -1,
      -1,   105,   116,   934,  1506,   699,   928,    -1,    -1,   935,
     700,  1621,    -1,   105,   606,   717,  1580,    -1,   105,   472,
     717,  1563,  1561,    -1,   105,   289,   215,   830,    -1,   105,
     556,   827,    -1,   105,   701,    -1,   493,  1508,   198,   119,
     636,  1508,   384,   655,   702,   656,    -1,   703,    -1,   702,
     657,   703,    -1,   606,  1503,    -1,   226,  1503,    -1,   116,
    1503,    -1,   394,  1503,    -1,   405,  1503,    -1,   511,  1503,
      -1,   412,  1322,    -1,    -1,  1190,   175,   934,   718,   705,
     378,   482,   706,   711,   708,   713,   151,   714,    -1,    -1,
     176,  1196,  1292,   707,   709,   710,    -1,    25,  1196,    -1,
      -1,   160,    -1,   145,   378,   505,    -1,   145,    -1,    -1,
     531,  1196,    -1,    -1,   163,  1196,    -1,    -1,   712,    -1,
     378,    88,   416,    -1,   378,    88,   366,   416,    -1,    -1,
      84,  1503,    -1,    -1,   715,   716,    -1,   776,    -1,   778,
      -1,   774,    -1,   795,    -1,   813,    -1,   815,    -1,   810,
      -1,   780,    -1,   782,    -1,   783,    -1,   784,    -1,   785,
      -1,   787,    -1,    -1,  1506,   663,  1506,    -1,  1506,    -1,
      -1,   719,   721,    -1,    -1,   720,   722,    -1,    84,  1503,
      -1,   267,   527,    -1,   368,   527,    -1,    98,   527,    -1,
     431,   527,   119,    -1,   343,   527,   119,    -1,   723,    -1,
     721,    -1,   142,    -1,  1202,   142,    -1,   527,   486,   134,
      -1,   527,   486,   254,    -1,    -1,    53,   718,   725,   726,
      -1,    -1,   655,   727,   656,    -1,    -1,   728,    -1,   728,
     657,  1196,    -1,  1196,    -1,    -1,   730,    -1,   730,   657,
     732,    -1,   732,    -1,    -1,  1506,   731,   993,    -1,    -1,
     734,    -1,   734,   657,   735,    -1,   735,    -1,   736,   731,
    1506,   993,    -1,    -1,   255,    -1,   393,    -1,   246,    -1,
      -1,   737,   773,   661,    -1,   773,   661,    -1,   738,   773,
     661,    -1,    -1,   739,   740,   661,    -1,    -1,   132,   771,
     741,   993,   772,    -1,   132,  1506,    91,   199,   748,    -1,
      -1,   132,   745,   218,   199,   742,   746,   773,    -1,   132,
    1506,   113,   199,   743,    -1,    -1,   744,  1173,    -1,   181,
      -1,   100,    -1,   747,    -1,   746,   657,   747,    -1,   751,
      -1,  1322,    -1,   749,    -1,   519,   750,  1504,    -1,    -1,
     615,    -1,   748,    -1,  1506,    -1,   520,    -1,  1202,   200,
      -1,   518,    -1,   502,   753,   755,    -1,  1506,    -1,   749,
      -1,    -1,   753,    -1,    -1,   495,   756,    -1,   758,   168,
     757,    -1,   756,   657,   758,   168,   757,    -1,  1489,    -1,
    1227,    -1,  1495,    -1,    68,    -1,   543,    -1,    95,    -1,
      97,    -1,    96,    -1,    58,    -1,   483,    -1,   561,    -1,
      83,    -1,   114,    -1,   334,    -1,   351,    -1,   460,   754,
     755,    -1,   211,   761,   143,   762,    -1,    -1,   109,    -1,
     763,    -1,    91,   767,   768,    -1,   764,    -1,   763,   657,
     764,    -1,   765,   168,   766,    -1,  1506,    -1,   662,  1508,
      -1,   373,    -1,   479,    -1,   757,    -1,   769,    -1,   768,
     657,   769,    -1,   765,   168,   770,    -1,    68,    -1,   543,
      -1,    95,    -1,    97,    -1,    96,    -1,    58,    -1,   483,
      -1,   561,    -1,    83,    -1,   114,    -1,   334,    -1,   351,
      -1,   465,    -1,  1506,    -1,   771,   657,  1506,    -1,    -1,
     133,  1196,    -1,   776,    -1,   778,    -1,   774,    -1,   795,
      -1,   813,    -1,   815,    -1,   810,    -1,   780,    -1,   782,
      -1,   783,    -1,   784,    -1,   785,    -1,   787,    -1,    -1,
     236,   775,   790,   162,   236,    -1,    -1,   777,   670,    -1,
      -1,   468,   779,  1196,    -1,    -1,   781,   819,    -1,   273,
    1507,    -1,   261,  1507,    -1,   382,  1506,    -1,    -1,   190,
     788,  1506,   252,   786,   789,    -1,    71,  1506,    -1,    -1,
     362,   201,    -1,   201,    -1,  1506,    -1,   789,   657,  1506,
      -1,    -1,    -1,    -1,   791,  1196,   568,   792,   738,   793,
     794,    -1,    -1,   159,   790,    -1,   158,   738,    -1,   796,
      -1,   799,    -1,    -1,    -1,    56,   797,  1196,   798,   801,
     809,   162,    56,    -1,    -1,    56,   800,   802,   809,   162,
      56,    -1,   803,    -1,   801,   803,    -1,   806,    -1,   802,
     806,    -1,    -1,    -1,   629,   804,  1196,   805,   568,   738,
      -1,    -1,    -1,   629,   807,  1196,   808,   568,   738,    -1,
      -1,   158,   738,    -1,    -1,  1507,   664,   811,   819,   812,
      -1,    -1,  1507,    -1,    -1,  1507,   664,   814,   817,   812,
      -1,    -1,   816,   817,    -1,    -1,    34,   818,   739,   737,
     162,    -1,   295,   738,   162,   295,    -1,    -1,    -1,   631,
     820,  1196,   151,   821,   738,   162,   631,    -1,    -1,   455,
     738,   602,   822,  1196,   162,   455,    -1,    33,    -1,     9,
      -1,   248,    -1,   603,    -1,   138,    -1,   852,   854,    -1,
     852,    60,   849,   833,    -1,   852,     6,   849,   828,   837,
      -1,    -1,   609,   289,   215,  1506,    -1,   852,     6,   849,
     840,    -1,   852,   152,   849,   840,    -1,   853,   832,   843,
      -1,   853,   832,   846,    -1,     6,   850,    -1,     6,   851,
      -1,    -1,   834,   835,    -1,   836,    -1,   835,   836,    -1,
     835,   657,   836,    -1,   855,    -1,   856,    -1,   857,    -1,
     838,    -1,   839,    -1,   838,   839,    -1,   838,   657,   839,
      -1,   855,    -1,   856,    -1,   857,    -1,   858,    -1,   861,
      -1,   863,    -1,   865,    -1,   862,    -1,   841,    -1,   842,
      -1,   841,   842,    -1,   841,   657,   842,    -1,   855,    -1,
     856,    -1,   857,    -1,   863,    -1,   865,    -1,   844,    -1,
     845,    -1,   844,   845,    -1,   844,   657,   845,    -1,   855,
      -1,   859,    -1,   860,    -1,   861,    -1,   863,    -1,   865,
      -1,   862,    -1,   847,    -1,   848,    -1,   847,   848,    -1,
     847,   657,   848,    -1,   855,    -1,   863,    -1,   865,    -1,
     118,  1503,    -1,   592,  1503,    -1,   438,  1503,    -1,  1506,
      -1,  1506,    -1,   432,    -1,   434,    -1,   366,     4,    -1,
     244,  1376,   866,    -1,    27,  1376,   866,    -1,   323,  1376,
     866,    -1,   185,  1376,   866,    -1,   593,  1376,   866,    -1,
     439,  1376,   866,    -1,   363,  1376,  1323,    -1,    84,  1376,
    1503,    -1,  1419,   166,  1376,   943,    -1,    -1,   865,    -1,
     625,    -1,   369,    -1,  1325,    -1,  1502,    -1,    -1,   655,
     949,   656,   868,   936,   874,   871,    -1,   936,   874,   871,
      -1,    -1,   655,   924,   656,   869,  1606,    -1,   870,    -1,
     278,  1499,    -1,   655,   278,  1499,   656,    -1,    -1,    -1,
    1469,   927,   924,   872,  1603,    -1,    -1,  1469,   927,   655,
     924,   656,   873,  1606,    -1,   875,    -1,    -1,   876,    -1,
      -1,   402,   878,   877,   881,    -1,    -1,    -1,   402,   880,
     881,    -1,    50,   882,   892,   893,   900,    -1,   884,   265,
     885,   655,   886,   656,    -1,    -1,   884,   220,   883,   890,
      -1,   430,   890,    -1,   430,   889,    -1,   283,   890,    -1,
     283,   889,    -1,    -1,   280,    -1,    -1,    12,   168,  1323,
      -1,    -1,   887,    -1,   888,    -1,   887,   657,   888,    -1,
    1506,    -1,    76,   655,   886,   656,    -1,   655,  1190,   898,
    1191,   656,    -1,   655,  1190,   898,  1191,   656,    -1,    -1,
     403,  1323,    -1,    -1,    -1,   547,    50,   884,   220,   891,
     894,   899,    -1,    -1,   547,    50,   884,   265,   885,   655,
     896,   656,   895,   899,    -1,   897,    -1,   896,   657,   897,
      -1,  1506,    -1,  1199,    -1,    -1,   546,  1323,    -1,    -1,
     655,   901,   656,    -1,   902,    -1,   901,   657,   902,    -1,
      -1,   402,   903,   904,   905,   921,   916,    -1,  1506,    -1,
      -1,    -1,   614,   275,   567,   906,   908,    -1,    -1,   614,
     255,   907,   909,    -1,   327,    -1,   911,    -1,   911,    -1,
     655,   910,   656,    -1,   911,    -1,   910,   657,   911,    -1,
      -1,    -1,   655,   912,   914,   913,   656,    -1,   915,    -1,
     914,   657,   915,    -1,   327,    -1,  1199,    -1,    -1,   655,
     917,   656,    -1,   918,    -1,   917,   657,   918,    -1,    -1,
     547,   919,   920,   921,    -1,  1508,    -1,    -1,   922,    -1,
     922,   923,    -1,   923,    -1,   556,  1376,  1508,    -1,  1419,
     166,  1376,   943,    -1,    92,  1376,  1503,    -1,   363,  1376,
    1323,    -1,   322,  1376,  1325,    -1,   340,  1376,  1325,    -1,
     119,   144,  1376,  1503,    -1,   241,   144,  1376,  1503,    -1,
      84,  1376,  1503,    -1,    -1,    -1,   487,   925,  1184,  1188,
     926,   947,    -1,    -1,    20,    -1,    -1,   929,    -1,   930,
      -1,   929,   930,    -1,   942,    -1,   941,    -1,    -1,   932,
      -1,   933,    -1,   933,   932,    -1,   562,    -1,    -1,   236,
    1202,   180,    -1,   105,    -1,   105,   390,   456,    -1,    -1,
     938,    -1,   939,    -1,   939,   937,    -1,   939,    -1,   939,
     938,    -1,   939,   657,   938,    -1,   166,  1376,   943,    -1,
     322,  1376,  1324,    -1,   340,  1376,  1324,    -1,    30,  1376,
    1322,    -1,   405,  1376,  1503,    -1,    84,  1376,  1503,    -1,
      28,  1376,  1324,    -1,   395,  1376,  1322,    -1,   395,  1376,
     133,    -1,   533,  1376,  1322,    -1,   533,  1376,   133,    -1,
     534,  1376,  1322,    -1,   534,  1376,   133,    -1,   535,  1376,
    1322,    -1,   535,  1376,   133,    -1,    65,  1376,  1322,    -1,
     560,  1376,  1322,    -1,   397,  1376,  1328,    -1,   137,  1376,
    1322,    -1,   477,  1376,   945,    -1,    -1,   597,  1376,   940,
     655,  1442,   656,    -1,   941,    -1,   942,    -1,   249,  1376,
     946,    -1,   119,   144,  1376,  1503,    -1,   241,   144,  1376,
    1503,    -1,   556,  1506,    -1,   540,   147,    -1,   540,   332,
      -1,    92,  1376,  1503,    -1,   264,  1376,  1322,    -1,   579,
    1376,  1328,    -1,  1502,  1375,  1503,    -1,  1502,  1375,  1506,
      -1,  1502,  1375,  1325,    -1,  1502,  1375,   133,    -1,  1005,
     996,  1376,   998,    -1,  1005,    74,  1376,  1004,    -1,  1508,
      -1,  1508,    -1,   133,    -1,   193,    -1,   156,    -1,    89,
      -1,   440,    -1,    87,    -1,   396,    -1,   368,    -1,   192,
      -1,   268,    -1,  1315,    -1,  1183,  1187,    -1,   542,    -1,
     435,    -1,   131,    -1,   253,    -1,   950,    -1,   951,    -1,
     950,   657,   951,    -1,   952,    -1,   953,    -1,   962,   958,
      -1,   962,  1022,    -1,    -1,  1028,  1053,  1037,   655,  1050,
     656,   954,  1038,    -1,    -1,  1034,  1031,  1053,  1036,   655,
    1050,   656,   955,  1039,    -1,    -1,  1035,  1031,  1053,  1036,
     655,  1050,   656,   956,  1040,    -1,    -1,   960,  1029,  1053,
    1037,   655,  1050,   656,   957,  1038,    -1,   960,   198,   265,
    1053,   655,  1050,   656,  1022,    -1,   960,   959,    -1,    -1,
     959,    -1,    66,   655,  1196,   656,    -1,    -1,   961,    -1,
      94,  1052,    -1,    -1,  1498,   963,   964,    -1,   972,   990,
      -1,   972,   965,    20,   655,   971,   656,   966,   967,    -1,
      -1,   207,    15,    -1,    -1,   624,    -1,   406,    -1,    -1,
     968,    -1,   968,   969,    -1,   969,    -1,   598,    -1,   598,
     265,    -1,    84,  1503,    -1,   400,   655,   971,   656,    -1,
    1190,  1196,  1191,    -1,   980,   988,   984,    -1,   981,   989,
     984,    -1,   195,   982,   984,    -1,    42,    -1,    42,   987,
      -1,    47,    -1,    46,    -1,   976,   987,  1008,    -1,   976,
    1008,    -1,   977,   987,  1009,    -1,   977,  1009,    -1,    37,
     987,    -1,    37,    -1,   978,   987,  1008,    -1,   979,   987,
    1009,    -1,   616,   987,    -1,   643,   988,   984,    -1,   123,
      -1,   572,   988,    -1,   569,   988,    -1,   120,   988,    -1,
     573,    -1,    44,   988,    -1,   975,    -1,   328,    -1,   291,
      -1,   294,   616,    -1,   294,   978,  1008,    -1,   575,  1008,
      -1,   566,   988,  1008,    -1,   330,  1008,    -1,   292,  1008,
      -1,   131,   982,   984,    -1,   374,   982,   984,    -1,   193,
     982,   984,    -1,    -1,   167,   973,   655,  1055,   656,  1008,
      -1,    -1,   495,   974,   655,  1055,   656,  1008,    -1,   294,
    1008,    -1,   491,    -1,   209,    -1,   208,    -1,   410,    -1,
     348,    -1,   282,    -1,   347,    -1,   411,    -1,   349,    -1,
      63,    -1,   357,    -1,   354,    63,    -1,   976,   620,    -1,
     617,    -1,   354,   617,    -1,   375,    -1,   357,   617,    -1,
     354,    63,   620,    -1,   357,   620,    -1,   253,    -1,   574,
      -1,   509,    -1,   329,    -1,    36,    -1,   435,    -1,   150,
      -1,   150,   414,    -1,    -1,   987,    -1,   983,    -1,   655,
     372,   657,   372,   656,    -1,    -1,   985,    -1,   985,   986,
      -1,   986,    -1,   503,    -1,   601,    -1,   644,    -1,   655,
     293,   656,    -1,   655,   588,   656,    -1,   655,   130,   656,
      -1,   655,   372,   656,    -1,    -1,   987,    -1,    -1,   983,
      -1,    -1,   991,    -1,   991,   992,    -1,   992,    -1,   371,
      -1,  1202,   371,    -1,   133,   994,    -1,   378,   603,   367,
    1193,    -1,    28,    -1,   491,   133,   615,    -1,  1021,   265,
      -1,   598,    -1,   598,   265,    -1,    84,  1503,    -1,    74,
    1002,    -1,  1502,  1375,  1503,    -1,  1502,  1375,  1506,    -1,
    1502,  1375,  1325,    -1,  1502,  1375,   133,    -1,   972,  1003,
      -1,   367,  1193,    -1,  1488,    -1,   223,    -1,   224,    -1,
      63,   495,    -1,    62,    -1,  1508,    -1,    37,    -1,   997,
      -1,   133,    -1,    -1,   996,   998,    -1,  1508,    -1,    37,
      -1,  1000,    -1,   133,    -1,  1508,    -1,    -1,    74,  1004,
      -1,  1002,    -1,   133,    -1,    -1,   133,    -1,    22,    -1,
      37,    22,    -1,    22,    37,    -1,   595,    -1,   595,    37,
      -1,    37,   595,    -1,    -1,  1006,    -1,  1007,    -1,    51,
      -1,   996,   997,  1009,    -1,    37,    -1,    37,   996,   997,
      -1,    -1,    37,    -1,    -1,   655,  1323,  1011,   656,    -1,
      21,    -1,   139,    -1,   469,    -1,    -1,  1012,    -1,  1012,
    1013,    -1,  1013,    -1,  1323,    -1,  1015,  1014,    -1,  1016,
      -1,  1017,   657,  1016,    -1,  1015,   648,  1015,    -1,  1017,
      -1,  1018,    -1,    -1,   276,  1019,    -1,    -1,   418,    -1,
     441,  1499,  1023,  1025,  1026,    -1,    -1,   655,  1024,   656,
      -1,  1024,   657,  1506,    -1,  1506,    -1,    -1,   319,   202,
      -1,   319,   401,    -1,   319,   504,    -1,    -1,   378,   603,
    1027,    -1,   378,   138,  1027,    -1,   378,   603,  1027,   378,
     138,  1027,    -1,   378,   138,  1027,   378,   603,  1027,    -1,
     463,    -1,    54,    -1,   495,   371,    -1,   368,     5,    -1,
     495,   133,    -1,  1030,    -1,   418,   265,    -1,   598,  1031,
      -1,   265,    -1,   241,    -1,    -1,  1030,    -1,   263,    -1,
     241,    -1,   240,    -1,    -1,   598,    -1,   203,    -1,   516,
      -1,    -1,  1036,    -1,  1036,  1044,    -1,    -1,  1041,    -1,
      -1,  1043,    -1,    -1,  1042,    -1,  1046,    -1,  1041,  1046,
      -1,  1047,    -1,  1042,  1047,    -1,  1048,    -1,  1043,  1048,
      -1,   610,  1049,    -1,   586,  1049,    -1,   264,  1376,  1322,
      -1,    84,  1503,    -1,  1502,  1375,  1503,    -1,  1502,  1375,
    1506,    -1,  1502,  1375,  1325,    -1,  1502,  1375,   133,    -1,
    1045,    -1,  1044,    -1,  1045,    -1,  1045,    -1,   632,   399,
    1502,    -1,    49,    -1,   480,    -1,   220,    -1,  1050,   657,
    1051,  1313,    -1,  1051,  1313,    -1,  1506,    -1,  1506,   655,
     372,   656,    -1,    -1,  1498,    -1,   934,  1052,    -1,    -1,
     663,  1506,    -1,  1486,    -1,  1055,   657,  1486,    -1,    -1,
      -1,    14,  1057,  1098,   559,  1499,  1058,  1069,    -1,    -1,
      14,   116,  1068,  1059,   929,    -1,    14,   116,  1506,   604,
     119,   144,   353,    -1,    -1,    14,   420,   718,  1060,   719,
      -1,    -1,    14,   204,   718,  1061,   719,    -1,    -1,    14,
    1627,  1624,  1062,  1629,    -1,    -1,    14,  1624,  1063,  1629,
      -1,    -1,    14,  1624,   175,   718,  1064,  1065,  1066,   708,
     713,  1067,    -1,    14,   556,   829,    -1,    14,   289,   215,
     831,    -1,    14,   556,   826,    -1,    14,   556,   825,    -1,
      14,   493,  1508,   384,   655,   702,   656,    -1,    -1,   378,
     482,   706,    -1,   712,    -1,   378,   482,   706,   712,    -1,
      -1,   451,   576,   718,    -1,    -1,   151,   714,    -1,    -1,
    1506,    -1,    -1,   146,   556,    -1,   239,   556,    -1,  1085,
      -1,  1086,   875,    -1,  1086,  1073,    -1,  1073,    -1,   876,
      -1,  1075,    -1,   152,   402,  1354,  1082,    -1,   436,   402,
    1148,  1074,    -1,    -1,   383,   402,  1148,  1074,  1070,  1148,
      -1,    16,   402,  1148,  1074,    -1,    -1,    66,   402,  1074,
    1071,  1143,    -1,    -1,   453,   402,  1148,  1074,  1072,  1124,
      -1,    72,   402,  1148,  1323,    -1,   584,   402,  1074,    -1,
    1078,    -1,   177,   402,  1083,   632,   559,  1499,   878,    -1,
     450,   404,    -1,    13,    -1,  1082,    -1,    -1,     6,   402,
     934,  1148,  1076,  1077,    -1,    -1,   655,   901,   656,    -1,
     403,  1323,    -1,    -1,   452,   402,  1148,  1079,  1080,    -1,
      -1,    -1,  1082,  1081,   252,   655,   901,   656,    -1,  1083,
      -1,  1082,   657,  1083,    -1,  1506,    -1,    -1,   241,   418,
      -1,   241,  1506,    -1,   135,  1084,  1097,    -1,  1088,    -1,
    1086,   657,  1088,    -1,     6,  1095,   934,    -1,  1087,   952,
    1104,    -1,     6,   953,    -1,  1087,   655,   949,   656,    -1,
      -1,    60,  1095,  1354,  1498,  1089,   962,  1104,    -1,    -1,
      -1,   344,  1095,  1354,  1498,  1090,   964,  1091,  1104,    -1,
     152,  1095,  1354,  1498,  1103,    -1,   152,   198,   265,  1354,
    1498,    -1,   152,   418,   265,    -1,   152,  1030,  1354,  1498,
      -1,   145,   263,    -1,   160,   263,    -1,    14,  1095,  1498,
     495,   133,  1488,    -1,    14,  1095,  1498,   152,   133,    -1,
     451,  1105,  1499,    -1,   102,   576,   996,   998,  1003,    -1,
     937,    -1,   197,    -1,  1306,    -1,  1093,    -1,  1094,    -1,
      -1,  1094,    -1,  1093,    -1,  1094,  1093,    -1,  1093,  1094,
      -1,    12,  1376,   133,    -1,    12,  1376,  1506,    -1,   288,
    1376,   133,    -1,   288,  1376,  1506,    -1,    -1,    82,    -1,
      -1,   237,    -1,    -1,    24,    -1,    -1,  1099,  1100,    -1,
      -1,  1101,    -1,  1101,  1102,    -1,  1102,    -1,   237,    -1,
     381,    -1,    -1,   463,    -1,    54,    -1,    -1,     9,  1506,
      -1,   192,    -1,    -1,   576,    -1,   168,    -1,    20,    -1,
      -1,   532,   505,   689,  1113,  1107,  1117,    -1,    -1,   532,
      13,   506,  1113,  1108,    -1,   539,   505,   689,  1113,    -1,
     539,    13,   506,  1113,    -1,   532,   578,  1110,    -1,    -1,
    1111,    -1,  1112,    -1,  1111,   657,  1112,    -1,   632,    93,
     510,    -1,   433,   380,    -1,   433,   637,    -1,    -1,  1114,
    1115,    -1,  1116,    -1,  1115,   657,  1116,    -1,    -1,   528,
      -1,   447,    -1,    -1,   602,  1118,    -1,   602,   299,   168,
    1503,    -1,   688,    -1,  1118,   657,   688,    -1,    -1,    65,
    1543,  1120,  1349,  1121,    -1,    -1,   429,    -1,   184,    -1,
      -1,   453,  1148,  1543,  1123,  1349,  1124,    -1,    -1,  1125,
      -1,  1126,    -1,  1126,  1125,    -1,   429,    -1,   184,    -1,
     608,    -1,    -1,    16,  1148,  1543,  1128,  1129,    -1,  1130,
      -1,  1129,   657,  1130,    -1,  1350,  1131,    -1,    -1,   406,
     199,  1132,    -1,    13,    -1,    76,  1133,   240,  1135,    -1,
      13,    -1,    -1,   655,  1134,  1137,   656,    -1,    13,    -1,
      -1,   655,  1136,  1138,   656,    -1,    -1,  1506,    -1,  1137,
     657,  1506,    -1,    -1,  1139,    -1,  1138,   657,  1139,    -1,
    1506,    -1,   418,    -1,    38,  1503,    -1,    -1,    66,  1543,
    1142,  1349,  1143,    -1,    -1,  1144,    -1,  1145,    -1,  1145,
    1144,    -1,   429,    -1,   188,    -1,   331,    -1,   184,    -1,
      61,    -1,   199,   604,    -1,    -1,   383,  1148,  1543,  1147,
    1349,    -1,    -1,   370,    -1,   285,    -1,    -1,   451,  1543,
    1150,  1152,    -1,   451,   606,   717,  1151,    -1,  1511,   576,
    1511,    -1,  1151,   657,  1511,   576,  1511,    -1,  1153,    -1,
    1152,   657,  1153,    -1,  1499,   576,  1499,    -1,    -1,    52,
     241,  1155,  1156,   255,  1160,    -1,  1157,    -1,  1159,    -1,
    1158,    -1,  1157,   657,  1158,    -1,  1499,  1169,    -1,  1499,
    1167,  1169,    -1,  1506,    -1,   133,    -1,    -1,   284,   241,
     252,    52,  1162,  1163,    -1,  1166,    -1,  1164,    -1,  1165,
      -1,  1164,   657,  1165,    -1,  1499,  1169,  1172,    -1,  1499,
    1167,  1169,  1172,    -1,    -1,   402,   878,  1168,   655,  1074,
     656,    -1,    -1,  1170,  1171,    -1,    -1,  1030,   655,  1288,
     656,    -1,    -1,   237,   272,    -1,  1174,    -1,   487,  1177,
      -1,   655,  1175,   656,  1606,    -1,   487,  1179,    -1,   655,
    1175,   656,    -1,   487,  1267,    -1,   655,  1176,   656,    -1,
      -1,  1179,  1178,  1603,    -1,    -1,    -1,  1180,  1184,  1188,
    1181,  1182,  1187,    -1,  1309,  1315,    -1,  1338,    -1,  1183,
      -1,  1338,  1183,    -1,  1183,  1338,    -1,   201,  1247,  1298,
    1303,  1300,  1309,  1315,  1329,    -1,   201,   153,  1298,  1315,
      -1,    -1,  1185,    -1,  1185,  1186,    -1,  1186,    -1,  1620,
      -1,   525,    -1,   523,    -1,    -1,   199,   603,    -1,   288,
     255,   497,   342,    -1,  1188,   657,  1189,    -1,  1189,    -1,
     650,    -1,  1190,  1493,  1191,    -1,  1190,  1196,  1191,  1192,
      -1,    -1,    -1,    -1,    20,  1506,    -1,    20,  1503,    -1,
    1506,    -1,  1503,    -1,    -1,   655,   656,    -1,   655,  1323,
     656,    -1,    -1,   655,   656,    -1,   655,  1323,   656,    -1,
      -1,   655,   656,    -1,  1196,  1200,  1196,    -1,  1196,   641,
    1196,    -1,  1196,  1201,  1196,    -1,   366,  1196,    -1,  1197,
     258,   583,    -1,  1197,   258,  1202,   583,    -1,  1197,   258,
     187,    -1,  1197,   258,  1202,   187,    -1,  1197,   258,   599,
      -1,  1197,   258,  1202,   599,    -1,  1197,    -1,  1197,   258,
     371,    -1,  1197,   258,  1202,   371,    -1,  1197,   169,  1198,
      -1,  1197,  1204,  1198,    -1,  1197,  1204,  1205,   655,  1615,
     656,    -1,  1198,    -1,  1199,   255,   655,  1615,   656,    -1,
    1199,  1202,   255,   655,  1615,   656,    -1,  1199,   255,   655,
    1196,   656,    -1,  1199,   255,   655,  1196,   657,  1240,   656,
      -1,  1199,  1202,   255,   655,  1196,   656,    -1,  1199,  1202,
     255,   655,  1196,   657,  1240,   656,    -1,  1199,    35,  1199,
      18,  1198,    -1,  1199,  1202,    35,  1199,    18,  1198,    -1,
    1199,   514,   278,  1199,    -1,  1199,   278,  1210,  1302,    -1,
    1199,  1202,   278,  1210,  1302,    -1,  1199,   442,  1199,    -1,
    1199,  1202,   442,  1199,    -1,  1199,    -1,  1199,   646,  1199,
      -1,  1199,   647,  1199,    -1,  1199,   498,  1199,    -1,  1199,
     499,  1199,    -1,  1199,   649,  1199,    -1,  1199,   648,  1199,
      -1,  1199,   649,   251,  1196,  1292,    -1,  1199,   648,   251,
    1196,  1292,    -1,  1199,   650,  1199,    -1,  1199,   651,  1199,
      -1,  1199,   652,  1199,    -1,  1199,   149,  1199,    -1,  1199,
     345,  1199,    -1,  1199,   653,  1199,    -1,  1210,    -1,   390,
      -1,   387,    -1,    18,    -1,    17,    -1,   366,    -1,   365,
      -1,   658,    -1,   365,    -1,   168,    -1,   205,    -1,   217,
      -1,   270,    -1,   297,    -1,   359,    -1,    13,    -1,    19,
      -1,    -1,    20,  1207,    -1,   253,    -1,   601,   253,    -1,
     150,    -1,   435,    -1,   195,    -1,   131,   982,    -1,   976,
    1008,    -1,   977,    -1,   123,    -1,   572,   988,    -1,   120,
     988,    -1,  1196,   657,  1196,  1206,    -1,  1208,    -1,  1209,
     657,  1208,    -1,  1495,    -1,  1211,    -1,  1212,    -1,  1215,
      -1,  1213,    -1,  1210,    74,  1508,    -1,  1489,    -1,  1487,
      -1,  1227,    -1,  1223,    -1,  1210,   389,  1210,    -1,   649,
    1210,    -1,   648,  1210,    -1,   654,  1210,    -1,  1203,  1210,
      -1,   655,  1615,   656,    -1,   655,  1196,   656,    -1,   655,
    1196,   657,  1240,   656,    -1,   478,   655,  1196,   657,  1240,
     656,    -1,   180,   655,  1615,   656,    -1,   659,  1506,  1196,
     660,    -1,   319,  1241,    10,   655,  1199,  1217,   656,    -1,
      37,  1210,    -1,    57,   655,  1196,    20,  1237,   656,    -1,
      56,  1243,  1245,  1244,   162,    -1,   102,   655,  1196,   657,
    1237,   656,    -1,   102,   655,  1196,   610,   997,   656,    -1,
     133,   655,  1495,   656,    -1,   614,   655,  1496,   656,    -1,
     251,  1196,  1292,   649,  1196,    -1,    63,   655,  1240,   656,
      -1,    63,   655,  1240,   610,   997,   656,    -1,   110,  1195,
      -1,   111,  1195,    -1,   123,   655,  1196,   656,    -1,   128,
     655,  1196,   656,    -1,   231,   655,  1196,   656,    -1,   248,
     655,  1196,   657,  1196,   657,  1196,   657,  1196,   656,    -1,
     251,   655,  1196,   657,  1196,   656,    -1,   251,   655,  1196,
     657,  1196,   657,  1240,   656,    -1,   274,   655,  1196,   657,
    1196,   656,    -1,   339,   655,  1196,   656,    -1,   346,   655,
    1196,   656,    -1,   471,   655,  1196,   657,  1196,   656,    -1,
     485,   655,  1196,   656,    -1,   572,   655,  1196,   656,    -1,
     569,   655,  1196,   656,    -1,   569,   655,  1196,   657,  1196,
     656,    -1,   582,   655,  1196,   656,    -1,   582,   655,   271,
    1196,   201,  1196,   656,    -1,   582,   655,   577,  1196,   201,
    1196,   656,    -1,   582,   655,    48,  1196,   201,  1196,   656,
      -1,   582,   655,   271,   201,  1196,   656,    -1,   582,   655,
     577,   201,  1196,   656,    -1,   582,   655,    48,   201,  1196,
     656,    -1,   582,   655,  1196,   201,  1196,   656,    -1,   606,
     655,   656,    -1,   643,   655,  1196,   656,    -1,     8,   655,
    1196,   657,  1196,   656,    -1,     8,   655,  1196,   657,   251,
    1196,  1292,   656,    -1,   108,  1195,    -1,   115,  1194,    -1,
     121,   655,  1196,   657,   251,  1196,  1292,   656,    -1,   122,
     655,  1196,   657,   251,  1196,  1292,   656,    -1,   186,   655,
    1292,   201,  1196,   656,    -1,   210,   655,  1294,   657,  1196,
     656,    -1,   367,  1194,    -1,   413,   655,  1199,   255,  1196,
     656,    -1,   544,   655,  1196,   657,  1196,   656,    -1,   544,
     655,  1196,   657,   251,  1196,  1292,   656,    -1,   548,   655,
    1196,   657,  1196,   657,  1196,   656,    -1,   548,   655,  1196,
     657,  1196,   656,    -1,   548,   655,  1196,   201,  1196,   199,
    1196,   656,    -1,   548,   655,  1196,   201,  1196,   656,    -1,
     554,  1194,    -1,   570,   655,  1293,   657,  1196,   657,  1196,
     656,    -1,   571,   655,  1293,   657,  1196,   657,  1196,   656,
      -1,   611,  1195,    -1,   613,  1194,    -1,   612,  1194,    -1,
      77,   655,  1196,   657,  1209,   656,    -1,    80,   655,  1196,
     657,  1240,   656,    -1,    78,   655,  1196,   656,    -1,    79,
     655,  1209,   656,    -1,    81,   655,  1196,   657,  1196,    20,
    1237,   656,    -1,    22,   655,  1196,   656,    -1,    62,   655,
    1196,   656,    -1,    72,   655,  1240,   656,    -1,    75,   655,
    1196,   656,    -1,   116,   655,   656,    -1,   236,   655,  1196,
     657,  1196,   657,  1196,   656,    -1,   269,   655,  1240,   656,
      -1,   335,   655,  1196,   656,    -1,   345,   655,  1196,   657,
    1196,   656,    -1,   377,   655,  1196,   656,    -1,   405,   655,
    1196,   656,    -1,   427,   655,  1196,   656,    -1,   455,   655,
    1196,   657,  1196,   656,    -1,   456,   655,  1196,   657,  1196,
     657,  1196,   656,    -1,   469,   655,  1196,   656,    -1,   479,
     655,   656,    -1,   584,   655,  1196,   657,  1196,   656,    -1,
     627,   655,  1196,   656,    -1,   627,   655,  1196,   657,  1196,
     656,    -1,   628,   655,  1196,  1020,   656,    -1,   628,   655,
    1196,    20,    63,  1010,  1020,   656,    -1,   628,   655,  1196,
      20,    37,  1010,   656,    -1,   628,   655,  1196,   657,  1322,
     657,  1322,   657,  1322,   656,    -1,  1214,    -1,    98,   655,
    1196,   657,  1196,   656,    -1,   208,   655,  1240,   656,    -1,
     282,   655,  1240,   656,    -1,   347,   655,  1240,   656,    -1,
     348,   655,  1240,   656,    -1,   349,   655,  1240,   656,    -1,
     410,   655,  1196,   657,  1196,   656,    -1,   411,   655,  1240,
     656,    -1,    -1,  1502,   655,  1216,  1220,   656,    -1,  1506,
     663,  1506,   655,  1239,   656,    -1,  1218,  1219,    -1,   255,
      46,   342,    -1,    -1,   255,   355,   267,   342,    -1,    -1,
     632,   428,   182,    -1,    -1,  1221,    -1,  1222,    -1,  1221,
     657,  1222,    -1,  1190,  1196,  1191,  1192,    -1,    31,   655,
    1235,   656,    -1,    31,   655,   148,  1235,   656,    -1,    40,
     655,  1235,   656,    -1,    41,   655,  1235,   656,    -1,    43,
     655,  1235,   656,    -1,   103,   655,  1297,   650,   656,    -1,
     103,   655,  1235,   656,    -1,    -1,    -1,   103,   655,   148,
    1224,  1240,  1225,   656,    -1,   341,   655,  1235,   656,    -1,
     341,   655,   148,  1235,   656,    -1,   324,   655,  1235,   656,
      -1,   324,   655,   148,  1235,   656,    -1,   538,   655,  1235,
     656,    -1,   619,   655,  1235,   656,    -1,   537,   655,  1235,
     656,    -1,   621,   655,  1235,   656,    -1,   549,   655,  1235,
     656,    -1,   549,   655,   148,  1235,   656,    -1,    -1,   216,
     655,  1230,  1226,  1240,  1232,  1231,   656,    -1,    -1,   662,
    1228,  1229,    -1,  1508,   496,  1196,    -1,  1508,    -1,   662,
    1530,  1508,  1054,    -1,    -1,   148,    -1,    -1,   489,  1486,
      -1,    -1,    -1,   388,    50,  1233,  1234,    -1,  1234,   657,
    1494,  1313,    -1,  1494,  1313,    -1,    -1,  1297,  1236,  1196,
      -1,    37,   988,    -1,    63,   988,  1008,    -1,   357,   988,
      -1,   253,    -1,   503,    -1,   503,   253,    -1,   601,    -1,
     601,   253,    -1,   123,    -1,   572,   988,    -1,   120,   988,
      -1,   131,   982,    -1,    -1,   150,  1238,   989,    -1,    -1,
    1240,    -1,  1196,    -1,  1240,   657,  1196,    -1,  1242,    -1,
     655,  1242,   656,    -1,  1495,    -1,  1242,   657,  1495,    -1,
      -1,  1196,    -1,    -1,   158,  1196,    -1,   629,  1196,   568,
    1196,    -1,  1245,   629,  1196,   568,  1196,    -1,  1261,    -1,
    1250,    -1,  1249,    -1,  1246,    -1,   659,  1506,  1246,   660,
      -1,  1248,    -1,  1249,   657,  1248,    -1,  1246,  1258,  1246,
      -1,    -1,  1246,  1258,  1246,   378,  1251,  1196,    -1,    -1,
    1246,  1258,  1246,   610,  1252,   655,  1291,   656,    -1,  1246,
     355,  1257,  1261,    -1,    -1,  1246,   274,  1277,   262,  1246,
     378,  1253,  1196,    -1,    -1,  1246,   274,  1277,   262,  1261,
    1254,   610,   655,  1291,   656,    -1,  1246,   355,   274,  1277,
     262,  1261,    -1,    -1,  1246,   471,  1277,   262,  1246,   378,
    1255,  1196,    -1,    -1,  1246,   471,  1277,   262,  1261,  1256,
     610,   655,  1291,   656,    -1,  1246,   355,   471,  1277,   262,
    1261,    -1,   262,    -1,   245,   262,    -1,   541,    -1,  1257,
      -1,   106,   262,    -1,    -1,  1260,    -1,   402,   655,  1291,
     656,   878,    -1,    -1,  1262,  1499,  1259,  1296,  1286,    -1,
    1276,  1275,  1272,    -1,   655,  1275,  1263,   656,  1296,    -1,
    1270,  1607,    -1,    -1,    -1,  1263,   597,  1611,  1264,  1612,
    1265,  1607,    -1,  1267,    -1,    -1,    -1,  1268,  1618,  1188,
    1269,   947,  1187,    -1,    -1,  1275,  1271,  1249,    -1,    -1,
      -1,  1273,  1184,  1188,  1274,   947,    -1,    -1,   487,    -1,
      -1,   391,    -1,    -1,   199,   262,    -1,   199,   388,    50,
      -1,   199,   215,    50,    -1,   197,    -1,   237,    -1,    -1,
    1279,  1030,  1278,  1281,   655,  1290,   656,    -1,    -1,   609,
    1030,  1278,  1282,   655,  1288,   656,    -1,  1280,    -1,  1283,
    1280,    -1,    -1,    -1,  1285,  1283,    -1,    -1,  1287,  1284,
      -1,    -1,  1290,    -1,  1506,    -1,   418,    -1,  1289,    -1,
    1290,   657,  1289,    -1,  1506,    -1,  1291,   657,  1506,    -1,
    1293,    -1,   124,    -1,   125,    -1,   126,    -1,   127,    -1,
     228,    -1,   229,    -1,   230,    -1,   337,    -1,   338,    -1,
     484,    -1,   642,    -1,   128,    -1,   627,    -1,   231,    -1,
     339,    -1,   346,    -1,   427,    -1,   485,    -1,   335,    -1,
     643,    -1,   123,    -1,   572,    -1,   120,    -1,   569,    -1,
      -1,    20,    -1,   168,    -1,    -1,  1295,  1506,    -1,    -1,
      13,    -1,    -1,    -1,   630,  1299,  1196,    -1,    -1,    -1,
     221,  1301,  1196,    -1,   173,  1210,    -1,    -1,    -1,   215,
      50,  1304,  1305,    -1,  1304,   657,  1494,  1313,    -1,  1494,
    1313,    -1,    -1,   633,    -1,   634,    -1,   388,    50,  1307,
      -1,  1307,   657,  1308,    -1,  1308,    -1,  1496,  1313,    -1,
      -1,  1310,    -1,    -1,   388,    50,  1311,  1312,    -1,  1312,
     657,  1494,  1313,    -1,  1494,  1313,    -1,    -1,    21,    -1,
     139,    -1,    -1,  1316,    -1,    -1,  1316,    -1,   279,  1317,
      -1,   279,  1317,   476,   178,  1319,    -1,   279,   476,   178,
    1319,    -1,  1318,    -1,  1318,   657,  1318,    -1,  1318,   376,
    1318,    -1,  1506,    -1,  1487,    -1,   588,    -1,   293,    -1,
     372,    -1,  1318,    -1,    -1,   279,  1318,    -1,   279,   476,
     178,    -1,   279,  1318,   476,   178,    -1,   372,    -1,   648,
     372,    -1,   648,   293,    -1,   372,    -1,   223,    -1,   293,
      -1,   588,    -1,   130,    -1,   194,    -1,   372,    -1,   223,
      -1,   293,    -1,   588,    -1,  1326,    -1,   372,    -1,   588,
      -1,   293,    -1,   130,    -1,   194,    -1,   372,    -1,   588,
      -1,   223,    -1,   293,    -1,  1326,    -1,  1327,    -1,   130,
      -1,   194,    -1,  1322,    -1,   133,    -1,    -1,    -1,   420,
    1506,  1330,   655,  1331,   656,    -1,    -1,  1332,    -1,  1332,
     657,  1333,    -1,  1333,    -1,  1190,  1196,  1191,    -1,    -1,
    1335,  1336,    -1,  1336,   657,  1337,    -1,  1337,    -1,   662,
    1508,    -1,  1508,    -1,    -1,   252,  1339,  1340,    -1,    -1,
      -1,   392,  1505,  1341,   999,  1342,  1470,  1473,    -1,   154,
    1505,    -1,  1334,    -1,    -1,   151,  1344,  1240,    -1,    -1,
     152,  1355,  1543,  1354,  1346,  1349,  1103,    -1,    -1,   152,
     241,  1354,  1506,   378,  1499,  1347,    -1,   152,   116,  1354,
    1506,    -1,   152,   204,  1354,  1506,   663,  1506,    -1,   152,
     204,  1354,  1506,    -1,   152,   420,  1354,   718,    -1,   152,
     606,   717,  1579,    -1,   152,   472,   717,  1563,    -1,    -1,
     152,   623,  1354,  1348,  1349,  1103,    -1,   152,   175,  1354,
     718,    -1,   152,   581,  1354,   718,    -1,   152,   556,   852,
     863,   864,    -1,   152,   289,   215,   853,   863,   864,    -1,
     152,   493,  1354,  1508,    -1,  1350,    -1,  1349,   657,  1350,
      -1,  1499,    -1,  1499,  1259,    -1,  1353,    -1,  1352,   657,
    1353,    -1,  1500,    -1,    -1,   236,   180,    -1,    -1,   562,
      -1,    -1,    -1,   248,  1357,  1362,  1096,  1364,  1358,  1366,
    1382,    -1,    -1,    -1,   456,  1360,  1363,  1364,  1361,  1366,
      -1,    -1,   296,    -1,   136,    -1,   225,    -1,  1391,    -1,
     136,    -1,   252,  1365,    -1,  1365,    -1,  1351,    -1,  1369,
      -1,   655,   656,  1369,    -1,   655,  1368,   656,  1369,    -1,
      -1,   495,  1367,  1373,    -1,  1368,   657,  1492,    -1,  1492,
      -1,   614,  1372,    -1,   615,  1372,    -1,    -1,   924,  1370,
    1603,    -1,    -1,   655,   924,   656,  1371,  1606,    -1,  1372,
     657,  1377,    -1,  1377,    -1,  1373,   657,  1374,    -1,  1374,
      -1,  1496,  1375,  1381,    -1,   168,    -1,   496,    -1,    -1,
    1375,    -1,    -1,   655,  1378,  1379,   656,    -1,    -1,  1380,
      -1,  1380,   657,  1381,    -1,  1381,    -1,  1196,    -1,   133,
      -1,    -1,    -1,   378,   155,  1383,   265,   603,  1389,    -1,
      -1,    -1,   603,  1385,  1391,  1096,  1247,   495,  1387,  1386,
    1298,  1309,  1320,    -1,  1387,   657,  1388,    -1,  1388,    -1,
    1496,  1375,  1381,    -1,  1389,   657,  1390,    -1,  1390,    -1,
    1496,  1375,  1381,    -1,    -1,   296,    -1,    -1,   138,  1393,
    1403,  1394,    -1,    -1,    -1,   201,  1499,  1259,  1395,  1298,
    1309,  1320,  1396,  1399,    -1,    -1,  1400,  1397,   201,  1247,
    1298,    -1,    -1,   201,  1352,  1398,   610,  1247,  1298,    -1,
      -1,   466,  1188,    -1,  1401,    -1,  1400,   657,  1401,    -1,
    1506,  1402,    -1,  1506,   663,  1506,  1402,    -1,    -1,   663,
     650,    -1,    -1,  1404,  1403,    -1,   429,    -1,   296,    -1,
     237,    -1,    -1,   584,  1407,  1406,  1350,    -1,    -1,   559,
      -1,    -1,  1409,    -1,  1410,    -1,  1409,   657,  1410,    -1,
     104,    -1,   332,    -1,    45,   256,    -1,    99,   553,    -1,
     396,   189,    -1,   257,    -1,   552,    -1,   515,    -1,    13,
      -1,    -1,   199,   428,   372,    -1,    -1,   500,  1413,  1414,
      -1,   117,  1425,    -1,  1421,   555,  1420,  1425,    -1,  1421,
     580,  1420,  1425,    -1,   174,  1420,  1425,    -1,   559,   536,
    1420,  1425,    -1,   382,   555,  1420,  1425,    -1,   408,    -1,
     408,   513,  1503,    -1,   408,   513,  1425,    -1,   166,   944,
    1417,    -1,   166,    13,  1417,    -1,  1421,    76,  1422,  1499,
    1420,  1425,    -1,  1418,   290,    -1,   505,   227,    -1,    -1,
      38,   174,  1423,  1424,  1415,  1314,    -1,    -1,   444,   689,
     174,  1423,  1424,  1416,  1314,    -1,  1032,  1422,  1499,  1420,
    1298,    -1,  1419,   165,    -1,    26,    -1,   101,    -1,   419,
      -1,   103,   655,   650,   656,   626,    -1,   103,   655,   650,
     656,   171,    -1,   626,  1314,    -1,   171,  1314,    -1,   424,
      -1,   423,  1408,  1411,  1314,    -1,  1529,   536,  1425,    -1,
    1421,   422,    -1,  1529,   618,  1425,    -1,   996,  1425,    -1,
      75,  1425,    -1,   214,    -1,   214,   199,  1510,    -1,   105,
     116,   934,  1506,    -1,   105,   559,  1499,    -1,   105,   623,
    1499,    -1,   315,   536,    -1,    13,   506,   536,    -1,   505,
     536,    -1,   505,   690,   536,    -1,    70,    -1,   607,    -1,
     558,    -1,   242,    -1,   105,   420,   718,    -1,   105,   204,
     718,    -1,   105,   581,   718,    -1,   420,   536,  1425,    -1,
     204,   536,  1425,    -1,   420,    73,   718,    -1,   204,    73,
     718,    -1,   105,   175,   718,    -1,  1430,   199,  1196,    -1,
     536,    -1,   350,    -1,   290,    -1,   315,    -1,    37,    -1,
      -1,   540,    -1,    -1,  1422,  1506,    -1,    -1,   202,    -1,
     201,    -1,   255,    -1,    -1,   255,  1503,    -1,    -1,   201,
    1324,    -1,    -1,   278,  1503,    -1,   630,  1196,    -1,    -1,
    1430,  1499,  1427,  1432,    -1,    -1,  1430,  1431,  1428,  1429,
      -1,  1173,    -1,  1356,    -1,  1359,    -1,  1384,    -1,  1392,
      -1,   139,    -1,   140,    -1,    -1,   184,    -1,   403,    -1,
      -1,  1486,    -1,  1506,    -1,    -1,   196,  1148,  1434,  1435,
      -1,    -1,  1543,  1436,  1442,  1437,    -1,  1440,    -1,    -1,
    1438,    -1,   632,   433,   288,  1443,    -1,    -1,   199,  1439,
     183,    -1,  1440,   657,  1441,    -1,  1441,    -1,   170,   290,
      -1,   166,   290,    -1,   206,   290,    -1,   508,   290,    -1,
      37,   290,    -1,   443,   290,   689,    -1,   428,    52,    -1,
     227,    -1,   419,    -1,   290,    -1,   536,    -1,   505,   689,
      -1,    70,    -1,   607,    -1,   558,    -1,   242,    -1,   315,
      -1,   141,    -1,   461,    -1,    -1,  1349,    -1,    -1,    18,
     145,    64,    -1,    -1,   459,  1445,  1446,    -1,  1446,   657,
    1447,    -1,  1447,    -1,    -1,   505,  1448,   689,  1449,    -1,
     315,    -1,   428,    52,    -1,    -1,    13,    -1,    -1,   426,
    1451,  1452,    -1,  1418,   290,  1453,    -1,   576,  1503,    -1,
      33,  1196,    -1,    -1,   266,  1455,  1456,  1457,  1458,    -1,
      -1,   219,    -1,   512,    -1,    -1,    92,    -1,   428,    -1,
     428,   232,    -1,  1196,    -1,   606,  1511,    -1,   501,    -1,
     609,  1506,    -1,    -1,    -1,    -1,    -1,   284,  1466,  1462,
    1468,  1467,   243,  1505,  1463,  1469,   252,   559,  1499,  1259,
    1464,   999,  1465,  1476,  1470,  1473,  1477,  1479,  1482,    -1,
     119,    -1,   640,    -1,    -1,   285,    -1,    -1,    90,    -1,
     296,    -1,    -1,   456,    -1,   237,    -1,    -1,    76,  1471,
      -1,  1471,  1472,    -1,  1472,    -1,   564,    50,  1486,    -1,
     386,   161,    50,  1486,    -1,   161,    50,  1486,    -1,   172,
      50,  1486,    -1,    -1,   281,  1474,    -1,  1474,  1475,    -1,
    1475,    -1,   564,    50,  1486,    -1,   530,    50,  1486,    -1,
      -1,   476,   234,    50,  1486,    -1,    -1,   237,   372,  1478,
      -1,   281,    -1,   476,    -1,    -1,   655,  1480,   656,    -1,
     655,   656,    -1,  1480,   657,  1481,    -1,  1481,    -1,  1496,
      -1,   662,  1508,    -1,    -1,   495,  1483,    -1,  1483,   657,
    1484,    -1,  1484,    -1,  1496,  1375,  1190,  1381,  1191,    -1,
     565,    -1,   356,    -1,   591,   565,    -1,  1485,  1504,    -1,
    1504,    -1,   223,    -1,   224,    -1,    39,    -1,   398,    -1,
    1489,    -1,   649,  1490,    -1,   648,  1490,    -1,  1485,    -1,
    1490,    -1,  1491,    -1,   371,    -1,   187,    -1,   583,    -1,
     223,    -1,   224,    -1,    39,    -1,   591,   995,    -1,   591,
      39,    -1,   372,    -1,   293,    -1,   588,    -1,   130,    -1,
     194,    -1,   123,   565,    -1,   572,   565,    -1,   569,   565,
      -1,  1496,    -1,  1493,    -1,  1506,   663,   650,    -1,  1506,
     663,  1506,   663,   650,    -1,  1196,    -1,  1506,    -1,  1497,
      -1,  1506,    -1,  1497,    -1,  1506,   663,  1506,    -1,   663,
    1506,   663,  1506,    -1,  1506,   663,  1506,   663,  1506,    -1,
    1506,    -1,  1506,   663,  1506,   663,  1506,    -1,  1506,   663,
    1506,    -1,   663,  1506,    -1,  1506,    -1,  1506,   663,  1506,
      -1,   663,  1506,    -1,  1506,  1402,    -1,  1506,   663,  1506,
    1402,    -1,  1506,    -1,   233,    -1,   235,    -1,   565,    -1,
     565,    -1,   565,    -1,  1502,    -1,  1512,    -1,  1502,    -1,
    1513,    -1,  1506,    -1,  1503,    -1,   277,    -1,  1508,    -1,
    1508,   662,  1508,    -1,   110,  1195,    -1,  1509,    -1,  1564,
      -1,  1509,    -1,  1513,    -1,    22,    -1,    32,    -1,    34,
      -1,    51,    -1,    52,    -1,    62,    -1,    65,    -1,    64,
      -1,    71,    -1,    77,    -1,    78,    -1,    79,    -1,    80,
      -1,    81,    -1,    84,    -1,    86,    -1,    98,    -1,   129,
      -1,   135,    -1,   151,    -1,   162,    -1,   178,    -1,   179,
      -1,   196,    -1,   211,    -1,   218,    -1,   222,    -1,   226,
      -1,   250,    -1,   267,    -1,   368,    -1,   382,    -1,   385,
      -1,   384,    -1,   394,    -1,   399,    -1,   412,    -1,   415,
      -1,   450,    -1,   453,    -1,   459,    -1,   462,    -1,   473,
      -1,   481,    -1,   486,    -1,   493,    -1,   501,    -1,   503,
      -1,   511,    -1,   505,    -1,   506,    -1,   513,    -1,   532,
      -1,   539,    -1,   584,    -1,   595,    -1,   596,    -1,   636,
      -1,   639,    -1,   604,    -1,     5,    -1,     8,    -1,     7,
      -1,     9,    -1,    10,    -1,    11,    -1,    12,    -1,    15,
      -1,    19,    -1,    24,    -1,    25,    -1,    26,    -1,    28,
      -1,    27,    -1,    29,    -1,    30,    -1,    31,    -1,    38,
      -1,    42,    -1,    45,    -1,    47,    -1,    46,    -1,    49,
      -1,    55,    -1,    58,    -1,    59,    -1,    61,    -1,    67,
      -1,    70,    -1,    69,    -1,    68,    -1,    72,    -1,    73,
      -1,    75,    -1,    83,    -1,    76,    -1,    85,    -1,    87,
      -1,    88,    -1,    89,    -1,    90,    -1,    92,    -1,    93,
      -1,    95,    -1,    97,    -1,    96,    -1,    99,    -1,   101,
      -1,   112,    -1,   104,    -1,   107,    -1,   109,    -1,   114,
      -1,   119,    -1,   118,    -1,   120,    -1,   123,    -1,   128,
      -1,   134,    -1,   137,    -1,   141,    -1,   143,    -1,   144,
      -1,   145,    -1,   146,    -1,   147,    -1,   154,    -1,   155,
      -1,   156,    -1,   163,    -1,   167,    -1,   166,    -1,   165,
      -1,   170,    -1,   171,    -1,   173,    -1,   175,    -1,   174,
      -1,   176,    -1,   177,    -1,   182,    -1,   183,    -1,   184,
      -1,   185,    -1,   189,    -1,   188,    -1,   200,    -1,   160,
      -1,   202,    -1,   191,    -1,   192,    -1,   193,    -1,   206,
      -1,   207,    -1,   209,    -1,   208,    -1,   210,    -1,   214,
      -1,   212,    -1,   220,    -1,   219,    -1,   227,    -1,   231,
      -1,   232,    -1,   234,    -1,   238,    -1,   242,    -1,   254,
      -1,   239,    -1,   240,    -1,   244,    -1,   256,    -1,   257,
      -1,   259,    -1,   260,    -1,   249,    -1,   264,    -1,   269,
      -1,   268,    -1,   272,    -1,   275,    -1,   276,    -1,   282,
      -1,   283,    -1,   285,    -1,   287,    -1,   289,    -1,   290,
      -1,   322,    -1,   315,    -1,   318,    -1,   299,    -1,   300,
      -1,   304,    -1,   301,    -1,   302,    -1,   316,    -1,   317,
      -1,   303,    -1,   305,    -1,   298,    -1,   313,    -1,   307,
      -1,   306,    -1,   308,    -1,   309,    -1,   310,    -1,   311,
      -1,   312,    -1,   320,    -1,   321,    -1,   323,    -1,   325,
      -1,   326,    -1,   331,    -1,   332,    -1,   333,    -1,   334,
      -1,   335,    -1,   336,    -1,   339,    -1,   340,    -1,   344,
      -1,   342,    -1,   346,    -1,   347,    -1,   348,    -1,   349,
      -1,   350,    -1,   351,    -1,   353,    -1,   352,    -1,   354,
      -1,   357,    -1,   358,    -1,   362,    -1,   361,    -1,   369,
      -1,   363,    -1,   364,    -1,   373,    -1,   375,    -1,   376,
      -1,   377,    -1,   379,    -1,   381,    -1,   380,    -1,   395,
      -1,   396,    -1,   401,    -1,   404,    -1,   403,    -1,   405,
      -1,   406,    -1,   407,    -1,   409,    -1,   408,    -1,   410,
      -1,   411,    -1,   416,    -1,   417,    -1,   419,    -1,   421,
      -1,   422,    -1,   423,    -1,   424,    -1,   425,    -1,   427,
      -1,   428,    -1,   429,    -1,   432,    -1,   436,    -1,   437,
      -1,   439,    -1,   438,    -1,   440,    -1,   443,    -1,   444,
      -1,   445,    -1,   446,    -1,   447,    -1,   449,    -1,   452,
      -1,   454,    -1,   457,    -1,   461,    -1,   464,    -1,   465,
      -1,   467,    -1,   469,    -1,   472,    -1,   474,    -1,   475,
      -1,   476,    -1,   479,    -1,   477,    -1,   478,    -1,   480,
      -1,   482,    -1,   483,    -1,   485,    -1,   491,    -1,   490,
      -1,   492,    -1,   504,    -1,   497,    -1,   507,    -1,   508,
      -1,   510,    -1,   512,    -1,   514,    -1,   515,    -1,   523,
      -1,   522,    -1,   525,    -1,   528,    -1,   531,    -1,   536,
      -1,   540,    -1,   542,    -1,   543,    -1,   544,    -1,   545,
      -1,   547,    -1,   546,    -1,   550,    -1,   551,    -1,   552,
      -1,   553,    -1,   561,    -1,   558,    -1,   555,    -1,   560,
      -1,   556,    -1,   562,    -1,   563,    -1,   566,    -1,   567,
      -1,   578,    -1,   579,    -1,   580,    -1,   569,    -1,   570,
      -1,   571,    -1,   572,    -1,   585,    -1,   586,    -1,   587,
      -1,   204,    -1,   589,    -1,   590,    -1,   593,    -1,   592,
      -1,   599,    -1,   602,    -1,   606,    -1,   607,    -1,   608,
      -1,   618,    -1,   623,    -1,   624,    -1,   615,    -1,   626,
      -1,   625,    -1,   627,    -1,   628,    -1,   635,    -1,   638,
      -1,   640,    -1,   643,    -1,   622,    -1,    -1,   495,  1515,
    1516,    -1,    -1,  1532,  1517,  1522,    -1,    -1,   578,  1518,
    1534,    -1,    -1,  1528,  1519,  1520,    -1,    -1,  1531,  1521,
    1522,    -1,   578,  1534,    -1,    -1,   657,  1523,    -1,    -1,
    1524,  1526,    -1,    -1,  1523,   657,  1525,  1526,    -1,    -1,
    1528,  1527,  1531,    -1,  1532,    -1,   212,    -1,   285,    -1,
     492,    -1,    -1,   212,    -1,   285,    -1,   492,    -1,    -1,
     212,   663,    -1,   285,   663,    -1,   492,   663,    -1,  1533,
    1375,  1540,    -1,  1533,  1375,  1540,    -1,   662,  1508,  1375,
    1196,    -1,   662,   662,  1530,  1533,  1375,  1540,    -1,   996,
    1001,    -1,   352,  1375,  1196,    -1,   352,   998,  1003,    -1,
     472,  1508,    -1,   405,  1375,  1539,    -1,   405,   199,  1511,
    1375,  1539,    -1,  1506,    -1,  1506,   663,  1506,    -1,   133,
     663,  1506,    -1,  1535,    -1,  1536,    -1,  1535,   657,  1536,
      -1,  1536,   657,  1535,    -1,  1537,    -1,   259,   276,  1538,
      -1,   433,   380,    -1,   433,   637,    -1,   433,   589,    -1,
     433,    85,    -1,   454,   433,    -1,   490,    -1,   565,    -1,
     405,   655,   565,   656,    -1,   377,   655,   565,   656,    -1,
    1196,    -1,   133,    -1,   378,    -1,    13,    -1,    37,    -1,
      -1,   288,  1543,  1542,  1544,    -1,   559,    -1,   555,    -1,
    1545,    -1,  1544,   657,  1545,    -1,  1499,  1296,  1546,    -1,
     433,    -1,   637,    -1,   637,    90,    -1,   296,   637,    -1,
     433,   285,    -1,    -1,   600,  1548,  1543,    -1,   218,  1499,
     382,  1296,    -1,   218,  1501,    71,    -1,    -1,   218,  1501,
     433,  1550,  1551,  1298,  1315,    -1,  1552,    -1,  1506,  1553,
      -1,   192,    -1,   362,    -1,   192,    -1,   362,    -1,   417,
      -1,   268,    -1,    -1,  1555,  1554,   655,  1380,   656,    -1,
     168,    -1,   205,    -1,   270,    -1,   217,    -1,   297,    -1,
     470,   717,  1557,    -1,  1567,   378,  1566,  1578,   201,  1581,
      -1,  1567,   378,   204,  1578,   201,  1581,    -1,  1567,   378,
     420,  1578,   201,  1581,    -1,    13,  1568,   657,   213,   385,
     201,  1581,    -1,   425,   378,  1511,   201,  1579,    -1,  1558,
     201,  1581,    -1,     7,   385,   199,  1565,    -1,  1565,    -1,
     213,   717,  1560,    -1,  1567,   378,  1566,  1578,   576,  1580,
    1588,  1589,    -1,  1567,   378,   204,  1578,   576,  1580,  1588,
    1589,    -1,  1567,   378,   420,  1578,   576,  1580,  1588,  1589,
      -1,   425,   378,  1511,   576,  1580,  1590,    -1,  1565,   576,
    1580,  1562,    -1,    -1,   632,     7,  1510,    -1,    -1,   632,
       7,   385,    -1,  1565,    -1,  1563,   657,  1565,    -1,   111,
    1195,    -1,  1508,    -1,  1564,    -1,    -1,   559,    -1,  1569,
      -1,    13,  1568,    -1,    -1,   419,    -1,  1570,    -1,  1569,
     657,  1570,    -1,    -1,   487,  1571,  1585,    -1,    -1,   248,
    1572,  1585,    -1,    -1,   603,  1573,  1585,    -1,    -1,   441,
    1574,  1585,    -1,   138,    -1,   605,    -1,   241,    -1,    14,
      -1,   105,    -1,   152,    -1,   179,    -1,   449,    -1,   501,
      -1,   421,    -1,   191,    -1,   213,   385,    -1,   500,   117,
      -1,   550,    -1,   105,   562,   555,    -1,   288,   555,    -1,
     457,   505,    -1,   457,    69,    -1,   105,   623,    -1,   500,
     623,    -1,   105,   475,    -1,    14,   475,    -1,   105,   606,
      -1,   175,    -1,   581,    -1,   105,   556,    -1,    -1,    18,
      -1,  1577,  1575,  1576,    -1,  1577,    -1,   545,   565,    -1,
     260,   565,    -1,    67,   565,    -1,   650,    -1,  1506,   663,
     650,    -1,   650,   663,   650,    -1,  1499,    -1,  1511,    -1,
    1579,   657,  1511,    -1,  1584,    -1,  1580,   657,  1584,    -1,
    1510,    -1,  1581,   657,  1510,    -1,   622,    -1,   632,    -1,
     610,    -1,    20,    -1,  1511,   234,    50,   565,    -1,  1511,
     234,    50,   405,   565,    -1,  1511,   234,  1582,  1508,    -1,
    1511,   234,  1582,  1508,  1583,  1503,    -1,  1510,    -1,    -1,
     655,  1586,   656,    -1,  1586,   657,  1587,    -1,  1587,    -1,
    1506,    -1,    -1,   458,  1576,    -1,   458,   529,    -1,   458,
     638,    -1,   458,   364,    -1,    -1,   632,  1591,    -1,    -1,
     632,   213,   385,    -1,  1591,  1592,    -1,  1592,    -1,   213,
     385,    -1,   321,  1322,    -1,   325,  1322,    -1,   320,  1322,
      -1,   326,  1321,    -1,    -1,    34,  1594,  1595,    -1,    -1,
     635,    -1,    -1,    18,   368,    59,    -1,    18,    59,    -1,
      -1,   448,    -1,   368,   448,    -1,    -1,   481,    -1,    86,
    1595,  1596,  1597,    -1,   473,  1595,  1596,  1597,    -1,   473,
    1595,   576,  1598,  1506,    -1,   481,  1506,    -1,   448,   481,
    1506,    -1,    -1,  1604,    -1,    -1,   597,  1611,  1605,  1174,
      -1,    -1,  1604,    -1,  1608,    -1,    -1,  1608,    -1,    -1,
    1609,  1610,    -1,  1310,  1314,    -1,  1316,    -1,    -1,   148,
      -1,    13,    -1,   487,  1266,    -1,   655,  1176,   656,    -1,
    1612,  1607,    -1,    -1,  1613,   597,  1611,  1614,  1612,  1607,
      -1,  1616,  1613,  1617,    -1,    -1,    -1,    -1,  1619,    -1,
    1619,  1620,    -1,  1620,    -1,   541,    -1,   225,    -1,   148,
      -1,   526,    -1,   521,    -1,   522,    -1,   524,    -1,    13,
      -1,  1626,  1622,    -1,  1625,  1623,    -1,  1627,  1624,  1629,
      -1,  1629,    -1,  1637,    -1,  1648,    -1,  1642,    -1,   704,
      -1,  1629,    -1,  1637,    -1,  1648,    -1,  1642,    -1,  1641,
      -1,   704,    -1,  1625,    -1,  1626,    -1,    -1,   134,   168,
    1510,    -1,    12,   168,   590,    -1,    12,   168,   333,    -1,
      12,   168,   563,    -1,    -1,   527,   486,   134,    -1,   527,
     486,   254,    -1,    -1,  1628,   623,  1499,  1630,  1631,    20,
    1633,    -1,    -1,   655,  1632,   656,    -1,  1506,    -1,  1632,
     657,  1506,    -1,    -1,  1634,  1635,  1636,    -1,   487,  1177,
      -1,   655,  1175,   656,  1606,    -1,    -1,   632,    66,   385,
      -1,   632,    55,    66,   385,    -1,   632,   285,    66,   385,
      -1,    -1,    -1,    -1,   581,  1190,   718,   823,   824,   378,
    1190,  1638,  1499,   199,  1190,  1639,   157,   478,  1640,   773,
      -1,    11,  1190,   204,  1506,   467,   948,   513,  1503,    -1,
    1190,   204,  1506,   467,   948,   513,  1503,    -1,    -1,    -1,
      -1,    -1,    -1,  1190,   204,   718,   655,  1643,   729,   656,
    1644,   467,  1645,   993,  1646,   720,  1647,   773,    -1,    -1,
      -1,    -1,    -1,   420,  1190,   718,  1649,   655,  1650,   733,
     656,  1651,   720,  1652,   773,    -1,   639,  1655,  1654,  1656,
      -1,   639,   162,  1654,  1658,    -1,   639,   415,  1654,    -1,
     639,    86,  1654,  1657,    -1,   639,   473,  1654,    -1,   639,
     437,    -1,  1486,    -1,  1486,   657,  1486,    -1,  1486,   657,
    1486,   657,  1322,    -1,    34,    -1,   532,    -1,    -1,   262,
      -1,   464,    -1,    -1,   379,   407,    -1,    -1,    -1,   551,
    1659,  1660,    -1,    -1,   199,   336,    -1,   250,   409,  1506,
     513,  1503,    -1,   250,   513,  1503,    -1,   596,   409,  1506,
      -1,   596,   513,  1503,    -1,   645,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1939,  1939,  1951,  1950,  1975,  1982,  1984,  1988,  1989,
    1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
    2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
    2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
    2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,
    2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
    2044,  2045,  2046,  2047,  2048,  2052,  2061,  2062,  2066,  2075,
    2081,  2091,  2090,  2100,  2102,  2106,  2107,  2111,  2124,  2123,
    2143,  2142,  2151,  2152,  2156,  2160,  2164,  2168,  2172,  2176,
    2181,  2185,  2189,  2193,  2197,  2201,  2206,  2210,  2215,  2246,
    2251,  2254,  2256,  2257,  2261,  2267,  2271,  2287,  2291,  2297,
    2307,  2317,  2330,  2334,  2338,  2354,  2353,  2398,  2403,  2397,
    2410,  2415,  2408,  2422,  2427,  2420,  2433,  2432,  2445,  2444,
    2460,  2464,  2468,  2472,  2476,  2483,  2496,  2497,  2501,  2505,
    2509,  2513,  2517,  2521,  2525,  2533,  2532,  2563,  2562,  2569,
    2576,  2577,  2583,  2589,  2599,  2605,  2611,  2613,  2620,  2621,
    2625,  2631,  2640,  2641,  2649,  2649,  2705,  2706,  2707,  2708,
    2709,  2710,  2711,  2712,  2713,  2714,  2715,  2716,  2717,  2722,
    2736,  2752,  2770,  2771,  2775,  2776,  2781,  2783,  2785,  2787,
    2789,  2791,  2793,  2799,  2800,  2801,  2805,  2809,  2817,  2816,
    2829,  2831,  2834,  2836,  2840,  2844,  2851,  2853,  2857,  2858,
    2863,  2883,  2911,  2913,  2917,  2918,  2922,  2949,  2950,  2951,
    2952,  2956,  2957,  2961,  2962,  2967,  2970,  2997,  2996,  3060,
    3076,  3075,  3131,  3157,  3157,  3180,  3181,  3186,  3188,  3193,
    3215,  3226,  3230,  3252,  3253,  3257,  3261,  3270,  3276,  3282,
    3291,  3305,  3328,  3334,  3335,  3341,  3344,  3348,  3356,  3376,
    3378,  3396,  3402,  3404,  3406,  3408,  3410,  3412,  3414,  3416,
    3418,  3420,  3422,  3424,  3429,  3444,  3460,  3461,  3466,  3472,
    3481,  3487,  3496,  3504,  3513,  3522,  3524,  3533,  3538,  3544,
    3553,  3561,  3563,  3565,  3567,  3569,  3571,  3573,  3575,  3577,
    3579,  3581,  3583,  3585,  3590,  3608,  3629,  3630,  3634,  3635,
    3636,  3637,  3638,  3639,  3640,  3641,  3642,  3643,  3644,  3645,
    3646,  3651,  3650,  3657,  3657,  3712,  3711,  3740,  3740,  3755,
    3808,  3851,  3872,  3871,  3893,  3912,  3914,  3915,  3919,  3939,
    3962,  3964,  3980,  3962,  3999,  4001,  4002,  4006,  4007,  4012,
    4018,  4011,  4039,  4038,  4054,  4055,  4059,  4060,  4065,  4069,
    4064,  4090,  4094,  4089,  4113,  4123,  4128,  4127,  4162,  4163,
    4168,  4167,  4199,  4199,  4214,  4213,  4250,  4262,  4264,  4261,
    4291,  4290,  4311,  4313,  4318,  4320,  4322,  4339,  4344,  4350,
    4357,  4358,  4366,  4372,  4381,  4387,  4393,  4394,  4398,  4398,
    4403,  4404,  4405,  4409,  4410,  4411,  4415,  4419,  4420,  4421,
    4425,  4426,  4427,  4428,  4429,  4430,  4431,  4432,  4436,  4440,
    4441,  4442,  4446,  4447,  4448,  4449,  4450,  4454,  4458,  4459,
    4460,  4464,  4465,  4466,  4467,  4468,  4469,  4470,  4474,  4478,
    4479,  4480,  4484,  4485,  4486,  4491,  4499,  4507,  4515,  4527,
    4539,  4544,  4549,  4557,  4565,  4573,  4581,  4589,  4597,  4605,
    4618,  4631,  4644,  4646,  4650,  4655,  4668,  4669,  4721,  4720,
    4723,  4729,  4729,  4730,  4744,  4745,  4749,  4751,  4750,  4754,
    4753,  4759,  4796,  4797,  4802,  4801,  4820,  4839,  4838,  4855,
    4859,  4867,  4866,  4869,  4871,  4873,  4875,  4880,  4881,  4887,
    4888,  4905,  4906,  4910,  4911,  4915,  4934,  4944,  4955,  4964,
    4965,  4981,  4983,  4982,  4987,  4985,  4996,  4997,  5001,  5019,
    5035,  5036,  5052,  5067,  5089,  5090,  5095,  5094,  5118,  5128,
    5150,  5149,  5167,  5166,  5186,  5208,  5212,  5241,  5253,  5254,
    5259,  5270,  5258,  5295,  5296,  5300,  5313,  5334,  5347,  5373,
    5374,  5379,  5378,  5415,  5420,  5421,  5425,  5426,  5430,  5432,
    5438,  5444,  5446,  5448,  5450,  5452,  5454,  5464,  5479,  5463,
    5493,  5494,  5498,  5499,  5503,  5504,  5508,  5509,  5513,  5514,
    5518,  5519,  5523,  5528,  5532,  5540,  5544,  5550,  5552,  5556,
    5557,  5561,  5562,  5563,  5567,  5572,  5577,  5582,  5587,  5592,
    5597,  5602,  5617,  5623,  5638,  5643,  5658,  5664,  5682,  5687,
    5692,  5697,  5702,  5707,  5713,  5712,  5738,  5739,  5740,  5745,
    5750,  5755,  5757,  5759,  5761,  5767,  5772,  5777,  5783,  5789,
    5795,  5804,  5822,  5839,  5862,  5876,  5877,  5878,  5879,  5880,
    5881,  5882,  5886,  5887,  5888,  5892,  5893,  5897,  5898,  5899,
    5900,  5905,  5912,  5913,  5917,  5918,  5922,  5923,  5931,  5930,
    5939,  5937,  5947,  5945,  5955,  5953,  5961,  5982,  5988,  5990,
    5994,  5998,  5999,  6003,  6008,  6007,  6033,  6034,  6043,  6045,
    6050,  6053,  6057,  6064,  6065,  6069,  6070,  6074,  6080,  6086,
    6090,  6106,  6122,  6123,  6124,  6125,  6130,  6134,  6139,  6144,
    6148,  6153,  6158,  6164,  6169,  6175,  6179,  6184,  6189,  6207,
    6209,  6211,  6224,  6226,  6231,  6236,  6248,  6253,  6258,  6263,
    6265,  6267,  6269,  6271,  6273,  6275,  6277,  6280,  6279,  6284,
    6283,  6287,  6289,  6298,  6299,  6300,  6305,  6306,  6307,  6308,
    6309,  6313,  6317,  6318,  6322,  6323,  6327,  6328,  6329,  6330,
    6331,  6335,  6336,  6337,  6338,  6339,  6343,  6348,  6350,  6356,
    6357,  6359,  6364,  6373,  6374,  6378,  6379,  6383,  6384,  6385,
    6389,  6390,  6391,  6392,  6395,  6396,  6400,  6401,  6405,  6406,
    6410,  6411,  6415,  6416,  6417,  6418,  6425,  6426,  6432,  6438,
    6444,  6450,  6451,  6464,  6470,  6476,  6482,  6491,  6512,  6518,
    6523,  6524,  6528,  6529,  6533,  6541,  6545,  6546,  6550,  6551,
    6555,  6564,  6568,  6569,  6573,  6581,  6582,  6586,  6587,  6591,
    6592,  6597,  6598,  6602,  6609,  6618,  6623,  6631,  6632,  6633,
    6634,  6635,  6636,  6641,  6649,  6650,  6655,  6654,  6667,  6668,
    6672,  6675,  6676,  6677,  6678,  6682,  6690,  6697,  6698,  6702,
    6712,  6713,  6717,  6718,  6721,  6723,  6727,  6739,  6740,  6744,
    6751,  6764,  6765,  6767,  6769,  6775,  6780,  6786,  6792,  6799,
    6809,  6810,  6811,  6812,  6813,  6817,  6821,  6822,  6826,  6827,
    6831,  6832,  6836,  6837,  6838,  6842,  6843,  6847,  6851,  6864,
    6876,  6877,  6881,  6882,  6886,  6887,  6891,  6892,  6896,  6897,
    6901,  6902,  6906,  6907,  6911,  6912,  6916,  6918,  6919,  6925,
    6931,  6937,  6945,  6946,  6950,  6954,  6955,  6968,  6969,  6970,
    6974,  6975,  6979,  6985,  6999,  7000,  7004,  7016,  7017,  7021,
    7022,  7030,  7047,  7029,  7067,  7066,  7080,  7092,  7091,  7110,
    7109,  7128,  7127,  7146,  7140,  7160,  7159,  7192,  7197,  7202,
    7207,  7212,  7222,  7223,  7224,  7225,  7229,  7230,  7242,  7243,
    7247,  7248,  7251,  7253,  7261,  7269,  7270,  7272,  7274,  7275,
    7283,  7284,  7288,  7297,  7295,  7308,  7321,  7320,  7333,  7331,
    7344,  7351,  7361,  7362,  7389,  7396,  7400,  7405,  7404,  7420,
    7422,  7427,  7435,  7434,  7450,  7454,  7453,  7465,  7466,  7470,
    7484,  7485,  7490,  7497,  7506,  7507,  7511,  7520,  7524,  7529,
    7535,  7534,  7546,  7557,  7545,  7573,  7582,  7591,  7601,  7610,
    7616,  7622,  7631,  7640,  7659,  7679,  7689,  7693,  7698,  7699,
    7702,  7704,  7705,  7706,  7707,  7710,  7715,  7726,  7731,  7742,
    7743,  7747,  7748,  7753,  7757,  7765,  7765,  7768,  7770,  7774,
    7775,  7779,  7780,  7788,  7789,  7790,  7794,  7795,  7800,  7808,
    7809,  7810,  7811,  7816,  7815,  7825,  7824,  7831,  7838,  7848,
    7865,  7868,  7875,  7879,  7886,  7890,  7894,  7901,  7901,  7907,
    7908,  7912,  7913,  7914,  7918,  7919,  7932,  7939,  7940,  7945,
    7944,  7956,  7957,  7958,  7963,  7962,  7983,  7984,  7988,  7989,
    7993,  7994,  7995,  8000,  7999,  8020,  8021,  8025,  8030,  8031,
    8038,  8040,  8044,  8046,  8045,  8057,  8059,  8058,  8071,  8072,
    8077,  8086,  8087,  8088,  8092,  8098,  8107,  8116,  8115,  8141,
    8142,  8146,  8147,  8151,  8152,  8153,  8154,  8155,  8156,  8161,
    8160,  8181,  8182,  8183,  8188,  8187,  8193,  8200,  8205,  8213,
    8214,  8218,  8232,  8231,  8244,  8245,  8249,  8250,  8254,  8264,
    8274,  8275,  8280,  8279,  8290,  8291,  8295,  8296,  8300,  8310,
    8321,  8320,  8328,  8328,  8337,  8338,  8343,  8344,  8353,  8362,
    8363,  8367,  8372,  8377,  8382,  8387,  8386,  8406,  8414,  8406,
    8421,  8422,  8423,  8424,  8425,  8429,  8436,  8443,  8445,  8456,
    8457,  8461,  8462,  8490,  8520,  8522,  8528,  8538,  8539,  8540,
    8554,  8559,  8584,  8590,  8596,  8597,  8598,  8599,  8600,  8604,
    8605,  8606,  8610,  8611,  8612,  8616,  8617,  8622,  8673,  8680,
    8723,  8729,  8735,  8741,  8747,  8753,  8759,  8765,  8769,  8775,
    8781,  8787,  8793,  8799,  8803,  8809,  8818,  8824,  8832,  8838,
    8848,  8854,  8863,  8873,  8879,  8889,  8895,  8904,  8908,  8914,
    8920,  8926,  8932,  8938,  8944,  8950,  8956,  8962,  8968,  8974,
    8980,  8986,  8992,  8996,  8997,  9001,  9002,  9006,  9007,  9011,
    9012,  9016,  9017,  9018,  9019,  9020,  9021,  9025,  9026,  9031,
    9037,  9041,  9048,  9055,  9062,  9069,  9076,  9081,  9087,  9094,
    9101,  9109,  9120,  9142,  9149,  9157,  9158,  9159,  9160,  9161,
    9162,  9173,  9174,  9175,  9176,  9177,  9183,  9187,  9193,  9199,
    9205,  9211,  9213,  9220,  9227,  9233,  9276,  9285,  9292,  9300,
    9306,  9313,  9319,  9333,  9340,  9356,  9362,  9368,  9376,  9384,
    9390,  9396,  9402,  9408,  9422,  9433,  9439,  9445,  9451,  9457,
    9463,  9469,  9475,  9481,  9487,  9493,  9499,  9505,  9511,  9517,
    9523,  9529,  9537,  9558,  9565,  9571,  9578,  9585,  9592,  9599,
    9605,  9611,  9618,  9624,  9631,  9637,  9643,  9649,  9655,  9661,
    9679,  9685,  9691,  9698,  9705,  9713,  9720,  9727,  9734,  9741,
    9758,  9764,  9770,  9776,  9782,  9789,  9795,  9801,  9807,  9813,
    9819,  9830,  9836,  9842,  9848,  9854,  9862,  9868,  9879,  9885,
    9891,  9899,  9909,  9915,  9931,  9937,  9944,  9951,  9958,  9965,
    9972,  9976,  9996,  9995, 10067, 10108, 10110, 10115, 10116, 10120,
   10121, 10125, 10126, 10130, 10137, 10145, 10171, 10177, 10183, 10189,
   10195, 10201, 10210, 10217, 10219, 10216, 10226, 10237, 10243, 10249,
   10255, 10261, 10267, 10273, 10279, 10285, 10292, 10291, 10311, 10310,
   10325, 10335, 10343, 10359, 10360, 10365, 10370, 10373, 10376, 10375,
   10392, 10394, 10400, 10399, 10416, 10418, 10420, 10422, 10424, 10426,
   10428, 10430, 10432, 10434, 10440, 10446, 10449, 10448, 10454, 10455,
   10459, 10466, 10474, 10475, 10479, 10486, 10494, 10495, 10499, 10500,
   10504, 10512, 10523, 10524, 10536, 10547, 10548, 10554, 10555, 10575,
   10579, 10577, 10595, 10593, 10604, 10614, 10612, 10630, 10629, 10639,
   10650, 10648, 10667, 10666, 10677, 10689, 10690, 10691, 10695, 10696,
   10704, 10705, 10709, 10724, 10724, 10739, 10779, 10855, 10866, 10871,
   10863, 10890, 10910, 10918, 10910, 10927, 10926, 10949, 10966, 10949,
   10973, 10977, 11003, 11004, 11009, 11012, 11013, 11014, 11018, 11019,
   11024, 11023, 11029, 11028, 11036, 11037, 11040, 11042, 11042, 11046,
   11046, 11051, 11052, 11056, 11058, 11063, 11064, 11068, 11079, 11092,
   11093, 11094, 11095, 11096, 11097, 11098, 11099, 11100, 11101, 11102,
   11103, 11107, 11108, 11109, 11110, 11111, 11112, 11113, 11114, 11115,
   11119, 11120, 11121, 11122, 11125, 11127, 11128, 11132, 11133, 11141,
   11143, 11147, 11149, 11148, 11162, 11165, 11164, 11179, 11185, 11199,
   11201, 11205, 11207, 11212, 11213, 11233, 11258, 11262, 11263, 11267,
   11279, 11281, 11286, 11285, 11320, 11322, 11327, 11328, 11329, 11334,
   11341, 11345, 11346, 11350, 11357, 11361, 11368, 11375, 11382, 11392,
   11425, 11429, 11435, 11441, 11450, 11458, 11462, 11469, 11470, 11474,
   11475, 11476, 11480, 11481, 11482, 11483, 11484, 11485, 11489, 11490,
   11491, 11492, 11493, 11497, 11498, 11499, 11500, 11501, 11505, 11506,
   11507, 11508, 11509, 11513, 11518, 11519, 11523, 11524, 11527, 11530,
   11529, 11560, 11561, 11565, 11566, 11570, 11580, 11580, 11590, 11591,
   11595, 11614, 11647, 11646, 11659, 11667, 11658, 11669, 11681, 11693,
   11692, 11710, 11709, 11720, 11720, 11736, 11743, 11765, 11785, 11797,
   11801, 11806, 11805, 11815, 11821, 11828, 11833, 11838, 11848, 11849,
   11853, 11864, 11877, 11878, 11882, 11894, 11898, 11906, 11907, 11915,
   11923, 11914, 11933, 11940, 11932, 11950, 11958, 11959, 11967, 11971,
   11972, 11983, 11984, 11988, 11997, 11998, 11999, 12001, 12000, 12011,
   12012, 12016, 12017, 12019, 12018, 12022, 12021, 12027, 12028, 12032,
   12033, 12037, 12047, 12048, 12052, 12053, 12058, 12057, 12071, 12072,
   12076, 12081, 12089, 12090, 12098, 12100, 12100, 12108, 12116, 12107,
   12138, 12139, 12143, 12151, 12152, 12156, 12166, 12167, 12174, 12173,
   12189, 12200, 12188, 12203, 12202, 12214, 12213, 12226, 12228, 12232,
   12233, 12237, 12250, 12266, 12267, 12271, 12272, 12276, 12277, 12278,
   12283, 12282, 12303, 12305, 12308, 12310, 12313, 12314, 12317, 12321,
   12325, 12329, 12333, 12337, 12341, 12345, 12349, 12357, 12360, 12370,
   12369, 12385, 12392, 12400, 12408, 12416, 12424, 12432, 12439, 12446,
   12452, 12454, 12456, 12465, 12469, 12474, 12473, 12479, 12478, 12483,
   12492, 12499, 12504, 12509, 12514, 12516, 12518, 12520, 12522, 12524,
   12531, 12539, 12541, 12549, 12556, 12563, 12570, 12576, 12582, 12591,
   12599, 12603, 12608, 12615, 12620, 12627, 12634, 12641, 12648, 12655,
   12662, 12668, 12675, 12682, 12687, 12692, 12697, 12707, 12709, 12711,
   12716, 12717, 12720, 12722, 12726, 12727, 12731, 12732, 12736, 12737,
   12741, 12742, 12746, 12747, 12750, 12752, 12759, 12770, 12769, 12785,
   12784, 12794, 12795, 12796, 12797, 12798, 12802, 12803, 12807, 12808,
   12809, 12813, 12814, 12815, 12830, 12829, 12842, 12841, 12852, 12856,
   12857, 12870, 12873, 12872, 12884, 12885, 12890, 12892, 12894, 12896,
   12898, 12900, 12911, 12913, 12915, 12917, 12923, 12925, 12936, 12938,
   12940, 12942, 12944, 12946, 12948, 12953, 12954, 12958, 12959, 12963,
   12962, 12972, 12973, 12977, 12977, 12980, 12981, 12985, 12986, 12991,
   12990, 13001, 13005, 13009, 13022, 13021, 13036, 13037, 13038, 13041,
   13042, 13043, 13044, 13052, 13056, 13065, 13071, 13083, 13094, 13104,
   13114, 13082, 13122, 13123, 13127, 13128, 13132, 13133, 13141, 13145,
   13146, 13147, 13150, 13152, 13156, 13157, 13161, 13166, 13173, 13178,
   13185, 13187, 13191, 13192, 13196, 13201, 13209, 13210, 13213, 13215,
   13223, 13225, 13229, 13230, 13231, 13235, 13237, 13242, 13243, 13252,
   13253, 13257, 13258, 13262, 13275, 13298, 13310, 13321, 13340, 13348,
   13360, 13368, 13383, 13403, 13404, 13405, 13413, 13414, 13415, 13416,
   13423, 13429, 13435, 13441, 13447, 13453, 13482, 13513, 13523, 13533,
   13539, 13548, 13560, 13566, 13572, 13588, 13589, 13593, 13602, 13617,
   13621, 13667, 13671, 13688, 13692, 13770, 13794, 13824, 13825, 13841,
   13851, 13855, 13861, 13867, 13877, 13883, 13892, 13902, 13903, 13931,
   13945, 13959, 13974, 13975, 13985, 13986, 13996, 13997, 13998, 14002,
   14017, 14049, 14059, 14059, 14061, 14071, 14072, 14073, 14074, 14075,
   14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085,
   14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095,
   14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105,
   14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115,
   14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125,
   14126, 14127, 14128, 14129, 14130, 14131, 14141, 14142, 14143, 14144,
   14145, 14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154,
   14155, 14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163, 14164,
   14165, 14166, 14167, 14168, 14169, 14170, 14171, 14172, 14173, 14174,
   14175, 14176, 14177, 14178, 14179, 14180, 14181, 14182, 14183, 14184,
   14185, 14186, 14187, 14188, 14189, 14190, 14191, 14196, 14197, 14198,
   14199, 14200, 14201, 14202, 14203, 14204, 14205, 14206, 14207, 14208,
   14209, 14210, 14211, 14212, 14213, 14214, 14215, 14216, 14217, 14218,
   14219, 14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227, 14228,
   14229, 14230, 14231, 14232, 14233, 14234, 14235, 14236, 14237, 14238,
   14239, 14240, 14241, 14242, 14243, 14244, 14245, 14246, 14247, 14248,
   14249, 14250, 14251, 14252, 14253, 14254, 14255, 14256, 14257, 14258,
   14259, 14260, 14261, 14262, 14263, 14264, 14265, 14266, 14267, 14268,
   14269, 14270, 14271, 14272, 14273, 14274, 14275, 14276, 14277, 14278,
   14279, 14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287, 14288,
   14289, 14290, 14291, 14292, 14293, 14294, 14295, 14296, 14297, 14298,
   14299, 14300, 14301, 14302, 14303, 14304, 14305, 14306, 14307, 14308,
   14309, 14310, 14311, 14312, 14313, 14314, 14315, 14316, 14317, 14318,
   14319, 14320, 14321, 14322, 14323, 14324, 14325, 14326, 14327, 14328,
   14329, 14330, 14331, 14332, 14333, 14334, 14335, 14336, 14337, 14338,
   14339, 14340, 14341, 14342, 14343, 14344, 14345, 14346, 14347, 14348,
   14349, 14350, 14351, 14352, 14353, 14354, 14355, 14356, 14357, 14358,
   14359, 14360, 14361, 14362, 14363, 14364, 14365, 14366, 14367, 14368,
   14369, 14370, 14371, 14372, 14373, 14374, 14375, 14376, 14377, 14378,
   14379, 14380, 14381, 14382, 14383, 14384, 14385, 14386, 14387, 14388,
   14389, 14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14398,
   14399, 14400, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408,
   14409, 14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418,
   14419, 14420, 14421, 14422, 14423, 14424, 14425, 14426, 14427, 14428,
   14429, 14430, 14431, 14432, 14433, 14434, 14435, 14436, 14437, 14438,
   14439, 14440, 14441, 14442, 14443, 14444, 14445, 14446, 14447, 14448,
   14449, 14450, 14451, 14452, 14453, 14454, 14455, 14467, 14466, 14484,
   14483, 14490, 14489, 14499, 14498, 14509, 14508, 14514, 14522, 14524,
   14529, 14529, 14538, 14537, 14551, 14550, 14555, 14559, 14560, 14561,
   14565, 14566, 14567, 14568, 14572, 14573, 14574, 14575, 14580, 14604,
   14630, 14641, 14653, 14666, 14681, 14700, 14706, 14731, 14744, 14770,
   14813, 14827, 14828, 14829, 14830, 14834, 14851, 14868, 14869, 14873,
   14874, 14875, 14876, 14880, 14881, 14890, 14901, 14902, 14903, 14909,
   14915, 14927, 14926, 14942, 14943, 14947, 14948, 14952, 14967, 14968,
   14969, 14974, 14975, 14980, 14979, 14999, 15011, 15024, 15023, 15057,
   15058, 15062, 15063, 15067, 15068, 15069, 15070, 15072, 15071, 15084,
   15085, 15086, 15087, 15088, 15094, 15099, 15105, 15116, 15127, 15131,
   15138, 15147, 15149, 15154, 15159, 15166, 15178, 15190, 15197, 15209,
   15210, 15213, 15214, 15217, 15222, 15230, 15241, 15261, 15264, 15266,
   15270, 15271, 15278, 15280, 15284, 15285, 15290, 15289, 15293, 15292,
   15296, 15295, 15299, 15298, 15301, 15302, 15303, 15304, 15305, 15306,
   15307, 15308, 15309, 15310, 15311, 15312, 15313, 15314, 15315, 15316,
   15317, 15318, 15319, 15320, 15321, 15322, 15323, 15324, 15325, 15326,
   15330, 15331, 15335, 15336, 15340, 15350, 15360, 15373, 15388, 15401,
   15414, 15426, 15431, 15439, 15444, 15452, 15457, 15464, 15464, 15465,
   15465, 15468, 15497, 15502, 15508, 15514, 15520, 15524, 15528, 15529,
   15533, 15560, 15562, 15566, 15570, 15574, 15581, 15582, 15586, 15587,
   15591, 15592, 15596, 15597, 15603, 15609, 15615, 15625, 15624, 15634,
   15635, 15640, 15641, 15642, 15647, 15648, 15649, 15653, 15654, 15658,
   15670, 15679, 15689, 15698, 15712, 15713, 15718, 15717, 15733, 15734,
   15735, 15739, 15740, 15744, 15744, 15766, 15767, 15771, 15772, 15773,
   15777, 15781, 15788, 15791, 15789, 15805, 15812, 15833, 15850, 15852,
   15856, 15857, 15861, 15862, 15870, 15871, 15872, 15873, 15879, 15885,
   15895, 15897, 15899, 15904, 15905, 15906, 15907, 15908, 15912, 15913,
   15914, 15915, 15916, 15917, 15927, 15928, 15933, 15946, 15959, 15961,
   15963, 15969, 15970, 15972, 15978, 15977, 15994, 15995, 15999, 16004,
   16012, 16012, 16036, 16037, 16042, 16043, 16045, 16047, 16065, 16071,
   16076, 16058, 16137, 16154, 16178, 16209, 16213, 16222, 16245, 16174,
   16308, 16332, 16341, 16348, 16307, 16368, 16372, 16376, 16380, 16384,
   16388, 16395, 16402, 16409, 16419, 16420, 16424, 16425, 16426, 16430,
   16431, 16436, 16438, 16437, 16443, 16444, 16448, 16455, 16465, 16471,
   16482
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "ASYNC_COMMIT_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM",
  "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM",
  "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND",
  "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM",
  "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM",
  "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DEFRAGMENT_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT",
  "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY",
  "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM",
  "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def",
  "optional_connection_name", "connection_name", "create", "$@5", "$@6",
  "$@7", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "sp_cursor_stmt", "$@20",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "get_diagnostics", "which_area", "diagnostics_information",
  "statement_information", "statement_information_item",
  "simple_target_specification", "statement_information_item_name",
  "condition_number", "condition_information",
  "condition_information_item", "condition_information_item_name",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@21", "sp_proc_stmt_statement", "$@22", "sp_proc_stmt_return", "$@23",
  "sp_proc_stmt_unlabeled", "$@24", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@26", "$@27", "$@28", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@29", "$@30", "searched_case_stmt", "$@31",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@32", "$@33", "searched_when_clause", "$@34",
  "$@35", "else_clause_opt", "sp_labeled_control", "$@36", "sp_opt_label",
  "sp_labeled_block", "$@37", "sp_unlabeled_block", "$@38",
  "sp_block_content", "$@39", "sp_unlabeled_control", "$@40", "$@41",
  "$@42", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@44", "$@45", "create_like", "opt_create_select", "$@46", "$@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@48",
  "have_partitioning", "partition_entry", "$@49", "partition",
  "part_type_def", "$@50", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@51",
  "$@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@53", "part_name", "opt_part_values", "$@54", "$@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@61", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "opt_select_from", "udf_type", "create_field_list",
  "field_list", "field_list_item", "column_def", "key_def", "$@62", "$@63",
  "$@64", "$@65", "opt_check_constraint", "check_constraint",
  "opt_constraint", "constraint", "field_spec", "$@66", "field_def",
  "opt_generated_always", "vcol_opt_specifier", "vcol_opt_attribute",
  "vcol_opt_attribute_list", "vcol_attribute", "parse_vcol_expr",
  "virtual_column_func", "type", "$@67", "$@68", "spatial_type", "char",
  "nchar", "varchar", "nvarchar", "int_type", "real_type", "float_options",
  "precision", "field_options", "field_opt_list", "field_option",
  "field_length", "opt_field_length", "opt_precision", "opt_attribute",
  "opt_attribute_list", "attribute", "type_with_opt_collate",
  "now_or_signed_literal", "hex_num_or_string", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@69", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@70", "$@71", "$@72", "$@73", "$@74", "$@75", "$@76", "$@77",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@78", "$@79", "$@80",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@81", "add_part_extra", "reorg_partition_rule", "$@82",
  "reorg_parts_rule", "$@83", "alt_part_name_list", "alt_part_name_item",
  "index_defragmentation", "defragment", "alter_list", "add_column",
  "alter_list_item", "$@84", "$@85", "$@86", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "opt_async_commit", "alter_options", "$@87",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@88", "$@89", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@90",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@91", "opt_checksum_type", "repair",
  "$@92", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@93", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@94", "persistent_index_stat_spec",
  "$@95", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@96", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@97",
  "opt_no_write_to_binlog", "rename", "$@98", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@99",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@100",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@101", "cache_keys_spec",
  "$@102", "cache_key_list_or_empty", "opt_ignore_leaves", "select",
  "select_init", "select_paren", "select_paren_derived", "select_init2",
  "$@103", "select_part2", "$@104", "$@105", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@106", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@107", "$@108", "$@109",
  "variable", "$@110", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@111", "gorder_list",
  "in_sum_expr", "$@112", "cast_type", "$@113", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@114", "$@115", "$@116", "$@117",
  "$@118", "$@119", "inner_join", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@120", "select_derived_union",
  "$@121", "$@122", "select_init2_derived", "select_part2_derived",
  "$@123", "$@124", "select_derived", "$@125", "select_derived2", "$@126",
  "$@127", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@128",
  "$@129", "index_hints_list", "opt_index_hints_list", "$@130",
  "opt_key_definition", "$@131", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@132", "having_clause", "$@133", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@134", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@135", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@136",
  "select_var_list", "select_var_ident", "into", "$@137",
  "into_destination", "$@138", "$@139", "do", "$@140", "drop", "$@141",
  "$@142", "$@143", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@144",
  "$@145", "replace", "$@146", "$@147", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@148", "fields", "insert_values", "$@149", "$@150", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@151", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@152", "update", "$@153", "$@154", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@155", "single_multi", "$@156", "$@157", "$@158", "$@159",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@160", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@161", "show_param",
  "$@162", "$@163", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@164", "$@165", "explainable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@166", "flush_options", "$@167", "opt_flush_lock",
  "flush_lock", "$@168", "flush_options_list", "flush_option",
  "opt_table_list", "optional_flush_tables_arguments", "reset", "$@169",
  "reset_options", "reset_option", "$@170", "slave_reset_options", "purge",
  "$@171", "purge_options", "purge_option", "kill", "$@172", "kill_type",
  "kill_option", "kill_expr", "shutdown", "use", "load", "$@173", "$@174",
  "$@175", "$@176", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user_maybe_role", "user_or_role", "user", "keyword",
  "keyword_sp", "set", "$@177", "start_option_value_list", "$@178",
  "$@179", "$@180", "start_option_value_list_following_option_type",
  "$@181", "option_value_list_continued", "option_value_list", "$@182",
  "$@183", "option_value", "$@184", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@185",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@186", "handler", "$@187", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@188",
  "handler_rkey_mode", "revoke", "revoke_command", "admin_option_for_role",
  "grant", "grant_command", "opt_with_admin", "opt_with_admin_option",
  "role_list", "current_role", "grant_role", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@189", "$@190", "$@191", "$@192", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "user_and_role_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@193", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@194",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@195",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@196", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@197", "view_list_opt", "view_list", "view_select",
  "$@198", "view_select_aux", "view_check_option", "trigger_tail", "$@199",
  "$@200", "$@201", "udf_tail", "sf_tail", "$@202", "$@203", "$@204",
  "$@205", "$@206", "sp_tail", "$@207", "$@208", "$@209", "$@210", "xa",
  "xid", "begin_or_start", "opt_join_or_resume", "opt_one_phase",
  "opt_suspend", "$@211", "opt_migrate", "install", "uninstall",
  "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   124,    38,    45,    43,
      42,    47,    37,    94,   126,    40,    41,    44,    33,   123,
     125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   665,   666,   667,   666,   666,   668,   668,   669,   669,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   671,   672,   672,   673,   674,
     674,   676,   675,   677,   677,   678,   678,   679,   681,   680,
     683,   682,   684,   684,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   686,   686,   686,   687,   688,   688,   688,   688,   688,
     688,   688,   689,   689,   690,   692,   691,   693,   694,   691,
     695,   696,   691,   697,   698,   691,   699,   691,   700,   691,
     691,   691,   691,   691,   691,   701,   702,   702,   703,   703,
     703,   703,   703,   703,   703,   705,   704,   707,   706,   706,
     708,   708,   708,   708,   709,   709,   710,   710,   711,   711,
     712,   712,   713,   713,   715,   714,   716,   716,   716,   716,
     716,   716,   716,   716,   716,   716,   716,   716,   716,   717,
     718,   718,   719,   719,   720,   720,   721,   721,   721,   721,
     721,   721,   721,   722,   722,   722,   723,   723,   725,   724,
     726,   726,   727,   727,   728,   728,   729,   729,   730,   730,
     731,   732,   733,   733,   734,   734,   735,   736,   736,   736,
     736,   737,   737,   738,   738,   739,   739,   741,   740,   740,
     742,   740,   740,   744,   743,   745,   745,   746,   746,   747,
     748,   748,   749,   750,   750,   751,   751,   751,   751,   751,
     752,   753,   753,   754,   754,   755,   755,   756,   756,   757,
     757,   757,   758,   758,   758,   758,   758,   758,   758,   758,
     758,   758,   758,   758,   759,   760,   761,   761,   762,   762,
     763,   763,   764,   765,   765,   766,   766,   767,   768,   768,
     769,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   771,   771,   772,   772,   773,   773,
     773,   773,   773,   773,   773,   773,   773,   773,   773,   773,
     773,   775,   774,   777,   776,   779,   778,   781,   780,   782,
     783,   784,   786,   785,   787,   788,   788,   788,   789,   789,
     791,   792,   793,   790,   794,   794,   794,   795,   795,   797,
     798,   796,   800,   799,   801,   801,   802,   802,   804,   805,
     803,   807,   808,   806,   809,   809,   811,   810,   812,   812,
     814,   813,   816,   815,   818,   817,   819,   820,   821,   819,
     822,   819,   823,   823,   824,   824,   824,   825,   826,   827,
     828,   828,   829,   829,   830,   831,   832,   832,   834,   833,
     835,   835,   835,   836,   836,   836,   837,   838,   838,   838,
     839,   839,   839,   839,   839,   839,   839,   839,   840,   841,
     841,   841,   842,   842,   842,   842,   842,   843,   844,   844,
     844,   845,   845,   845,   845,   845,   845,   845,   846,   847,
     847,   847,   848,   848,   848,   849,   850,   851,   852,   853,
     854,   854,   854,   855,   856,   857,   858,   859,   860,   861,
     862,   863,   864,   864,   865,   865,   866,   866,   868,   867,
     867,   869,   867,   867,   870,   870,   871,   872,   871,   873,
     871,   874,   875,   875,   877,   876,   878,   880,   879,   881,
     882,   883,   882,   882,   882,   882,   882,   884,   884,   885,
     885,   886,   886,   887,   887,   888,   889,   890,   891,   892,
     892,   893,   894,   893,   895,   893,   896,   896,   897,   898,
     899,   899,   900,   900,   901,   901,   903,   902,   904,   905,
     906,   905,   907,   905,   908,   908,   909,   909,   910,   910,
     912,   913,   911,   914,   914,   915,   915,   916,   916,   917,
     917,   919,   918,   920,   921,   921,   922,   922,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   925,   926,   924,
     927,   927,   928,   928,   929,   929,   930,   930,   931,   931,
     932,   932,   933,   934,   934,   935,   935,   936,   936,   937,
     937,   938,   938,   938,   939,   939,   939,   939,   939,   939,
     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,
     939,   939,   939,   939,   940,   939,   939,   939,   939,   939,
     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,
     939,   941,   942,   943,   944,   945,   945,   945,   945,   945,
     945,   945,   946,   946,   946,   947,   947,   948,   948,   948,
     948,   949,   950,   950,   951,   951,   952,   952,   954,   953,
     955,   953,   956,   953,   957,   953,   953,   953,   958,   958,
     959,   960,   960,   961,   963,   962,   964,   964,   965,   965,
     966,   966,   966,   967,   967,   968,   968,   969,   969,   969,
     970,   971,   972,   972,   972,   972,   972,   972,   972,   972,
     972,   972,   972,   972,   972,   972,   972,   972,   972,   972,
     972,   972,   972,   972,   972,   972,   972,   972,   972,   972,
     972,   972,   972,   972,   972,   972,   972,   973,   972,   974,
     972,   972,   972,   975,   975,   975,   975,   975,   975,   975,
     975,   976,   977,   977,   978,   978,   979,   979,   979,   979,
     979,   980,   980,   980,   980,   980,   981,   981,   981,   982,
     982,   982,   983,   984,   984,   985,   985,   986,   986,   986,
     987,   987,   987,   987,   988,   988,   989,   989,   990,   990,
     991,   991,   992,   992,   992,   992,   992,   992,   992,   992,
     992,   992,   992,   992,   992,   992,   992,   993,   994,   994,
     995,   995,   996,   996,   997,   997,   998,   998,   999,   999,
    1000,  1000,  1001,  1001,  1002,  1003,  1003,  1004,  1004,  1005,
    1005,  1006,  1006,  1006,  1007,  1007,  1007,  1008,  1008,  1008,
    1008,  1008,  1008,  1008,  1009,  1009,  1011,  1010,  1012,  1012,
    1013,  1014,  1014,  1014,  1014,  1015,  1016,  1017,  1017,  1018,
    1019,  1019,  1020,  1020,  1021,  1021,  1022,  1023,  1023,  1024,
    1024,  1025,  1025,  1025,  1025,  1026,  1026,  1026,  1026,  1026,
    1027,  1027,  1027,  1027,  1027,  1028,  1029,  1029,  1030,  1030,
    1031,  1031,  1032,  1032,  1032,  1033,  1033,  1034,  1035,  1036,
    1037,  1037,  1038,  1038,  1039,  1039,  1040,  1040,  1041,  1041,
    1042,  1042,  1043,  1043,  1044,  1044,  1045,  1045,  1045,  1045,
    1045,  1045,  1046,  1046,  1047,  1048,  1048,  1049,  1049,  1049,
    1050,  1050,  1051,  1051,  1052,  1052,  1053,  1054,  1054,  1055,
    1055,  1057,  1058,  1056,  1059,  1056,  1056,  1060,  1056,  1061,
    1056,  1062,  1056,  1063,  1056,  1064,  1056,  1056,  1056,  1056,
    1056,  1056,  1065,  1065,  1065,  1065,  1066,  1066,  1067,  1067,
    1068,  1068,  1069,  1069,  1069,  1069,  1069,  1069,  1069,  1069,
    1069,  1069,  1069,  1070,  1069,  1069,  1071,  1069,  1072,  1069,
    1069,  1069,  1069,  1069,  1073,  1074,  1074,  1076,  1075,  1077,
    1077,  1077,  1079,  1078,  1080,  1081,  1080,  1082,  1082,  1083,
    1084,  1084,  1084,  1085,  1086,  1086,  1087,  1088,  1088,  1088,
    1089,  1088,  1090,  1091,  1088,  1088,  1088,  1088,  1088,  1088,
    1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,
    1092,  1092,  1092,  1092,  1092,  1093,  1093,  1094,  1094,  1095,
    1095,  1096,  1096,  1097,  1097,  1099,  1098,  1100,  1100,  1101,
    1101,  1102,  1102,  1103,  1103,  1103,  1104,  1104,  1104,  1105,
    1105,  1105,  1105,  1107,  1106,  1108,  1106,  1106,  1106,  1109,
    1110,  1110,  1111,  1111,  1112,  1112,  1112,  1114,  1113,  1115,
    1115,  1116,  1116,  1116,  1117,  1117,  1117,  1118,  1118,  1120,
    1119,  1121,  1121,  1121,  1123,  1122,  1124,  1124,  1125,  1125,
    1126,  1126,  1126,  1128,  1127,  1129,  1129,  1130,  1131,  1131,
    1132,  1132,  1133,  1134,  1133,  1135,  1136,  1135,  1137,  1137,
    1137,  1138,  1138,  1138,  1139,  1139,  1140,  1142,  1141,  1143,
    1143,  1144,  1144,  1145,  1145,  1145,  1145,  1145,  1145,  1147,
    1146,  1148,  1148,  1148,  1150,  1149,  1149,  1151,  1151,  1152,
    1152,  1153,  1155,  1154,  1156,  1156,  1157,  1157,  1158,  1159,
    1160,  1160,  1162,  1161,  1163,  1163,  1164,  1164,  1165,  1166,
    1168,  1167,  1170,  1169,  1171,  1171,  1172,  1172,  1173,  1174,
    1174,  1175,  1175,  1176,  1176,  1178,  1177,  1180,  1181,  1179,
    1182,  1182,  1182,  1182,  1182,  1183,  1183,  1184,  1184,  1185,
    1185,  1186,  1186,  1186,  1187,  1187,  1187,  1188,  1188,  1188,
    1189,  1189,  1190,  1191,  1192,  1192,  1192,  1192,  1192,  1193,
    1193,  1193,  1194,  1194,  1194,  1195,  1195,  1196,  1196,  1196,
    1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1197,  1197,
    1197,  1197,  1197,  1197,  1198,  1198,  1198,  1198,  1198,  1198,
    1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1199,  1199,
    1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,
    1199,  1199,  1199,  1200,  1200,  1201,  1201,  1202,  1202,  1203,
    1203,  1204,  1204,  1204,  1204,  1204,  1204,  1205,  1205,  1206,
    1206,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1208,  1209,  1209,  1210,  1210,  1210,  1210,  1210,
    1210,  1210,  1210,  1210,  1210,  1210,  1210,  1210,  1210,  1210,
    1210,  1210,  1210,  1210,  1210,  1210,  1210,  1210,  1210,  1210,
    1210,  1210,  1210,  1210,  1210,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1212,  1212,  1212,  1212,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1214,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1216,  1215,  1215,  1217,  1217,  1218,  1218,  1219,
    1219,  1220,  1220,  1221,  1221,  1222,  1223,  1223,  1223,  1223,
    1223,  1223,  1223,  1224,  1225,  1223,  1223,  1223,  1223,  1223,
    1223,  1223,  1223,  1223,  1223,  1223,  1226,  1223,  1228,  1227,
    1229,  1229,  1229,  1230,  1230,  1231,  1231,  1232,  1233,  1232,
    1234,  1234,  1236,  1235,  1237,  1237,  1237,  1237,  1237,  1237,
    1237,  1237,  1237,  1237,  1237,  1237,  1238,  1237,  1239,  1239,
    1240,  1240,  1241,  1241,  1242,  1242,  1243,  1243,  1244,  1244,
    1245,  1245,  1246,  1246,  1247,  1248,  1248,  1249,  1249,  1250,
    1251,  1250,  1252,  1250,  1250,  1253,  1250,  1254,  1250,  1250,
    1255,  1250,  1256,  1250,  1250,  1257,  1257,  1257,  1258,  1258,
    1259,  1259,  1260,  1262,  1261,  1261,  1261,  1263,  1264,  1265,
    1263,  1266,  1268,  1269,  1267,  1271,  1270,  1273,  1274,  1272,
    1275,  1276,  1277,  1277,  1278,  1278,  1278,  1278,  1279,  1279,
    1281,  1280,  1282,  1280,  1283,  1283,  1284,  1285,  1284,  1287,
    1286,  1288,  1288,  1289,  1289,  1290,  1290,  1291,  1291,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,  1293,
    1294,  1294,  1294,  1294,  1295,  1295,  1295,  1296,  1296,  1297,
    1297,  1298,  1299,  1298,  1300,  1301,  1300,  1302,  1302,  1303,
    1303,  1304,  1304,  1305,  1305,  1305,  1306,  1307,  1307,  1308,
    1309,  1309,  1311,  1310,  1312,  1312,  1313,  1313,  1313,  1314,
    1314,  1315,  1315,  1316,  1316,  1316,  1317,  1317,  1317,  1318,
    1318,  1318,  1318,  1318,  1319,  1320,  1320,  1320,  1320,  1321,
    1321,  1321,  1322,  1322,  1322,  1322,  1322,  1322,  1323,  1323,
    1323,  1323,  1323,  1324,  1324,  1324,  1324,  1324,  1325,  1325,
    1325,  1325,  1325,  1326,  1327,  1327,  1328,  1328,  1329,  1330,
    1329,  1331,  1331,  1332,  1332,  1333,  1335,  1334,  1336,  1336,
    1337,  1337,  1339,  1338,  1341,  1342,  1340,  1340,  1340,  1344,
    1343,  1346,  1345,  1347,  1345,  1345,  1345,  1345,  1345,  1345,
    1345,  1348,  1345,  1345,  1345,  1345,  1345,  1345,  1349,  1349,
    1350,  1351,  1352,  1352,  1353,  1354,  1354,  1355,  1355,  1357,
    1358,  1356,  1360,  1361,  1359,  1362,  1362,  1362,  1362,  1363,
    1363,  1364,  1364,  1365,  1366,  1366,  1366,  1367,  1366,  1368,
    1368,  1369,  1369,  1370,  1369,  1371,  1369,  1372,  1372,  1373,
    1373,  1374,  1375,  1375,  1376,  1376,  1378,  1377,  1379,  1379,
    1380,  1380,  1381,  1381,  1382,  1383,  1382,  1385,  1386,  1384,
    1387,  1387,  1388,  1389,  1389,  1390,  1391,  1391,  1393,  1392,
    1395,  1396,  1394,  1397,  1394,  1398,  1394,  1399,  1399,  1400,
    1400,  1401,  1401,  1402,  1402,  1403,  1403,  1404,  1404,  1404,
    1406,  1405,  1407,  1407,  1408,  1408,  1409,  1409,  1410,  1410,
    1410,  1410,  1410,  1410,  1410,  1410,  1410,  1411,  1411,  1413,
    1412,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,
    1414,  1414,  1414,  1414,  1414,  1415,  1414,  1416,  1414,  1414,
    1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,
    1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,
    1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,  1414,
    1414,  1414,  1414,  1414,  1414,  1414,  1414,  1417,  1417,  1417,
    1418,  1418,  1419,  1419,  1420,  1420,  1421,  1421,  1422,  1422,
    1423,  1423,  1424,  1424,  1425,  1425,  1425,  1427,  1426,  1428,
    1426,  1429,  1429,  1429,  1429,  1429,  1430,  1430,  1431,  1431,
    1431,  1432,  1432,  1432,  1434,  1433,  1436,  1435,  1435,  1437,
    1437,  1438,  1439,  1438,  1440,  1440,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1442,  1442,  1443,  1443,  1445,
    1444,  1446,  1446,  1448,  1447,  1447,  1447,  1449,  1449,  1451,
    1450,  1452,  1453,  1453,  1455,  1454,  1456,  1456,  1456,  1457,
    1457,  1457,  1457,  1458,  1458,  1459,  1460,  1462,  1463,  1464,
    1465,  1461,  1466,  1466,  1467,  1467,  1468,  1468,  1468,  1469,
    1469,  1469,  1470,  1470,  1471,  1471,  1472,  1472,  1472,  1472,
    1473,  1473,  1474,  1474,  1475,  1475,  1476,  1476,  1477,  1477,
    1478,  1478,  1479,  1479,  1479,  1480,  1480,  1481,  1481,  1482,
    1482,  1483,  1483,  1484,  1485,  1485,  1485,  1485,  1486,  1486,
    1486,  1486,  1487,  1488,  1488,  1488,  1489,  1489,  1489,  1489,
    1489,  1489,  1489,  1489,  1489,  1489,  1489,  1490,  1490,  1490,
    1490,  1490,  1491,  1491,  1491,  1492,  1492,  1493,  1493,  1494,
    1495,  1495,  1496,  1496,  1497,  1497,  1497,  1498,  1498,  1498,
    1498,  1499,  1499,  1499,  1500,  1500,  1501,  1502,  1502,  1503,
    1504,  1505,  1506,  1506,  1507,  1507,  1508,  1508,  1508,  1509,
    1509,  1509,  1510,  1510,  1511,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,  1512,
    1512,  1512,  1512,  1512,  1512,  1512,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,  1513,
    1513,  1513,  1513,  1513,  1513,  1513,  1513,  1515,  1514,  1517,
    1516,  1518,  1516,  1519,  1516,  1521,  1520,  1520,  1522,  1522,
    1524,  1523,  1525,  1523,  1527,  1526,  1526,  1528,  1528,  1528,
    1529,  1529,  1529,  1529,  1530,  1530,  1530,  1530,  1531,  1532,
    1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1533,  1533,
    1533,  1534,  1534,  1534,  1534,  1535,  1536,  1537,  1537,  1538,
    1538,  1538,  1538,  1539,  1539,  1539,  1540,  1540,  1540,  1540,
    1540,  1542,  1541,  1543,  1543,  1544,  1544,  1545,  1546,  1546,
    1546,  1546,  1546,  1548,  1547,  1549,  1549,  1550,  1549,  1551,
    1551,  1552,  1552,  1553,  1553,  1553,  1553,  1554,  1553,  1555,
    1555,  1555,  1555,  1555,  1556,  1557,  1557,  1557,  1557,  1557,
    1557,  1558,  1558,  1559,  1560,  1560,  1560,  1560,  1560,  1561,
    1561,  1562,  1562,  1563,  1563,  1564,  1565,  1565,  1566,  1566,
    1567,  1567,  1568,  1568,  1569,  1569,  1571,  1570,  1572,  1570,
    1573,  1570,  1574,  1570,  1570,  1570,  1570,  1570,  1570,  1570,
    1570,  1570,  1570,  1570,  1570,  1570,  1570,  1570,  1570,  1570,
    1570,  1570,  1570,  1570,  1570,  1570,  1570,  1570,  1570,  1570,
    1575,  1575,  1576,  1576,  1577,  1577,  1577,  1578,  1578,  1578,
    1578,  1579,  1579,  1580,  1580,  1581,  1581,  1582,  1582,  1583,
    1583,  1584,  1584,  1584,  1584,  1584,  1585,  1585,  1586,  1586,
    1587,  1588,  1588,  1588,  1588,  1588,  1589,  1589,  1590,  1590,
    1591,  1591,  1592,  1592,  1592,  1592,  1592,  1594,  1593,  1595,
    1595,  1596,  1596,  1596,  1597,  1597,  1597,  1598,  1598,  1599,
    1600,  1600,  1601,  1602,  1603,  1603,  1605,  1604,  1606,  1606,
    1606,  1607,  1607,  1609,  1608,  1610,  1610,  1611,  1611,  1611,
    1612,  1612,  1613,  1614,  1613,  1615,  1616,  1617,  1618,  1618,
    1619,  1619,  1620,  1620,  1620,  1620,  1620,  1620,  1620,  1620,
    1621,  1621,  1621,  1622,  1622,  1622,  1622,  1622,  1623,  1623,
    1623,  1623,  1623,  1623,  1624,  1624,  1625,  1626,  1627,  1627,
    1627,  1628,  1628,  1628,  1630,  1629,  1631,  1631,  1632,  1632,
    1634,  1633,  1635,  1635,  1636,  1636,  1636,  1636,  1638,  1639,
    1640,  1637,  1641,  1641,  1643,  1644,  1645,  1646,  1647,  1642,
    1649,  1650,  1651,  1652,  1648,  1653,  1653,  1653,  1653,  1653,
    1653,  1654,  1654,  1654,  1655,  1655,  1656,  1656,  1656,  1657,
    1657,  1658,  1659,  1658,  1660,  1660,  1661,  1661,  1662,  1662,
    1663
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     4,     1,
       2,     0,     4,     0,     2,     3,     1,     2,     0,     3,
       0,     6,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     0,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     1,     0,     7,     0,     0,    15,
       0,     0,    15,     0,     0,    15,     0,     6,     0,     3,
       4,     5,     4,     3,     2,    10,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     0,    13,     0,     6,     2,
       0,     1,     3,     1,     0,     2,     0,     2,     0,     1,
       3,     4,     0,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     0,     2,     0,     2,     2,     2,     2,     2,
       3,     3,     1,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     4,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     5,     0,     2,     0,     3,     0,     2,     2,
       2,     2,     0,     6,     2,     0,     2,     1,     1,     3,
       0,     0,     0,     7,     0,     2,     2,     1,     1,     0,
       0,     8,     0,     6,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     5,     0,     1,
       0,     5,     0,     2,     0,     5,     4,     0,     0,     8,
       0,     7,     1,     1,     1,     1,     1,     2,     4,     5,
       0,     4,     4,     4,     3,     3,     2,     2,     0,     2,
       1,     2,     3,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     0,     1,     1,     1,     1,     1,     0,     7,
       3,     0,     5,     1,     2,     4,     0,     0,     5,     0,
       7,     1,     0,     1,     0,     4,     0,     0,     3,     5,
       6,     0,     4,     2,     2,     2,     2,     0,     1,     0,
       3,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,    10,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     3,     1,     3,
       0,     0,     5,     1,     3,     1,     1,     0,     3,     1,
       3,     0,     4,     1,     0,     1,     2,     1,     3,     4,
       3,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     1,     3,     0,     1,     1,
       2,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     0,     6,     1,     1,     3,     4,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     0,     8,
       0,     9,     0,     9,     0,     9,     8,     2,     0,     1,
       4,     0,     1,     2,     0,     3,     2,     8,     0,     2,
       0,     1,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     3,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     3,     3,     3,     0,     6,     0,
       6,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       1,     1,     5,     0,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       2,     1,     1,     2,     2,     4,     1,     3,     2,     1,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     4,     1,     1,
       1,     0,     1,     2,     1,     1,     2,     1,     3,     3,
       1,     1,     0,     2,     0,     1,     5,     0,     3,     3,
       1,     0,     2,     2,     2,     0,     3,     3,     6,     6,
       1,     1,     2,     2,     2,     1,     2,     2,     1,     1,
       0,     1,     1,     1,     1,     0,     1,     1,     1,     0,
       1,     2,     0,     1,     0,     1,     0,     1,     1,     2,
       1,     2,     1,     2,     2,     2,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     1,     1,     1,
       4,     2,     1,     4,     0,     1,     2,     0,     2,     1,
       3,     0,     0,     7,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     1,     2,     2,     1,     1,
       1,     4,     4,     0,     6,     4,     0,     5,     0,     6,
       4,     3,     1,     7,     2,     1,     1,     0,     6,     0,
       3,     2,     0,     5,     0,     0,     6,     1,     3,     1,
       0,     2,     2,     3,     1,     3,     3,     3,     2,     4,
       0,     7,     0,     0,     8,     5,     5,     3,     4,     2,
       2,     6,     5,     3,     5,     1,     1,     1,     1,     1,
       0,     1,     1,     2,     2,     3,     3,     3,     3,     0,
       1,     0,     1,     0,     1,     0,     2,     0,     1,     2,
       1,     1,     1,     0,     1,     1,     0,     2,     1,     0,
       1,     1,     1,     0,     6,     0,     5,     4,     4,     3,
       0,     1,     1,     3,     3,     2,     2,     0,     2,     1,
       3,     0,     1,     1,     0,     2,     4,     1,     3,     0,
       5,     0,     1,     1,     0,     6,     0,     1,     1,     2,
       1,     1,     1,     0,     5,     1,     3,     2,     0,     3,
       1,     4,     1,     0,     4,     1,     0,     4,     0,     1,
       3,     0,     1,     3,     1,     1,     2,     0,     5,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       5,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     3,     0,     6,     1,     1,     1,     3,     2,     3,
       1,     1,     0,     6,     1,     1,     1,     3,     3,     4,
       0,     6,     0,     2,     0,     4,     0,     2,     1,     2,
       4,     2,     3,     2,     3,     0,     3,     0,     0,     6,
       2,     1,     1,     2,     2,     8,     4,     0,     1,     2,
       1,     1,     1,     1,     0,     2,     4,     3,     1,     1,
       3,     4,     0,     0,     0,     2,     2,     1,     1,     0,
       2,     3,     0,     2,     3,     0,     2,     3,     3,     3,
       2,     3,     4,     3,     4,     3,     4,     1,     3,     4,
       3,     3,     6,     1,     5,     6,     5,     7,     6,     8,
       5,     6,     4,     4,     5,     3,     4,     1,     3,     3,
       3,     3,     3,     3,     5,     5,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       2,     1,     2,     1,     1,     1,     2,     2,     1,     1,
       2,     2,     4,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     2,     4,
       4,     4,    10,     6,     8,     6,     4,     4,     6,     4,
       4,     4,     6,     4,     7,     7,     7,     6,     6,     6,
       6,     3,     4,     6,     8,     2,     2,     8,     8,     6,
       6,     2,     6,     6,     8,     8,     6,     8,     6,     2,
       8,     8,     2,     2,     2,     6,     6,     4,     4,     8,
       4,     4,     4,     4,     3,     8,     4,     4,     6,     4,
       4,     4,     6,     8,     4,     3,     6,     4,     6,     5,
       8,     7,    10,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     0,     4,
       4,     2,     0,     3,     2,     3,     2,     1,     1,     2,
       1,     2,     1,     2,     2,     2,     0,     3,     0,     1,
       1,     3,     1,     3,     1,     3,     0,     1,     0,     2,
       4,     5,     1,     1,     1,     1,     4,     1,     3,     3,
       0,     6,     0,     8,     4,     0,     8,     0,    10,     6,
       0,     8,     0,    10,     6,     1,     2,     1,     1,     2,
       0,     1,     5,     0,     5,     3,     5,     2,     0,     0,
       7,     1,     0,     0,     6,     0,     3,     0,     0,     5,
       0,     1,     0,     1,     0,     2,     3,     3,     1,     1,
       0,     7,     0,     7,     1,     2,     0,     0,     2,     0,
       2,     0,     1,     1,     1,     1,     3,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     0,     2,     0,
       1,     0,     0,     3,     0,     0,     3,     2,     0,     0,
       4,     4,     2,     0,     1,     1,     3,     3,     1,     2,
       0,     1,     0,     4,     4,     2,     0,     1,     1,     0,
       1,     0,     1,     2,     5,     4,     1,     3,     3,     1,
       1,     1,     1,     1,     1,     0,     2,     3,     4,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       6,     0,     1,     3,     1,     3,     0,     2,     3,     1,
       2,     1,     0,     3,     0,     0,     7,     2,     1,     0,
       3,     0,     7,     0,     7,     4,     6,     4,     4,     4,
       4,     0,     6,     4,     4,     5,     6,     4,     1,     3,
       1,     2,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     0,     9,     0,     5,     0,     6,     0,     2,     1,
       3,     2,     4,     0,     2,     0,     2,     1,     1,     1,
       0,     4,     0,     1,     0,     1,     1,     3,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     0,     3,     0,
       3,     2,     4,     4,     3,     4,     4,     1,     3,     3,
       3,     3,     6,     2,     2,     0,     6,     0,     7,     5,
       2,     1,     1,     1,     5,     5,     2,     2,     1,     4,
       3,     2,     3,     2,     2,     1,     3,     4,     3,     3,
       2,     3,     2,     3,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     0,     1,     0,     2,     0,     1,     1,     1,
       0,     2,     0,     2,     0,     2,     2,     0,     4,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       1,     0,     1,     1,     0,     4,     0,     4,     1,     0,
       1,     4,     0,     3,     3,     1,     2,     2,     2,     2,
       2,     3,     2,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     0,     3,     0,
       3,     3,     1,     0,     4,     1,     2,     0,     1,     0,
       3,     3,     2,     2,     0,     5,     0,     1,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     0,     0,     0,
       0,    22,     1,     1,     0,     1,     0,     1,     1,     0,
       1,     1,     0,     2,     2,     1,     3,     4,     3,     3,
       0,     2,     2,     1,     3,     3,     0,     4,     0,     3,
       1,     1,     0,     3,     2,     3,     1,     1,     2,     0,
       2,     3,     1,     5,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     2,     1,     1,     3,     5,     1,
       1,     1,     1,     1,     3,     4,     5,     1,     5,     3,
       2,     1,     3,     2,     2,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     2,     0,     2,
       0,     2,     0,     4,     0,     3,     1,     1,     1,     1,
       0,     1,     1,     1,     0,     2,     2,     2,     3,     3,
       4,     6,     2,     3,     3,     2,     3,     5,     1,     3,
       3,     1,     1,     3,     3,     1,     3,     2,     2,     2,
       2,     2,     1,     1,     4,     4,     1,     1,     1,     1,
       1,     0,     4,     1,     1,     1,     3,     3,     1,     1,
       2,     2,     2,     0,     3,     4,     3,     0,     7,     1,
       2,     1,     1,     1,     1,     1,     1,     0,     5,     1,
       1,     1,     1,     1,     3,     6,     6,     6,     7,     5,
       3,     4,     1,     3,     8,     8,     8,     6,     4,     0,
       3,     0,     3,     1,     3,     2,     1,     1,     0,     1,
       1,     2,     0,     1,     1,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     2,
       0,     1,     3,     1,     2,     2,     2,     1,     3,     3,
       1,     1,     3,     1,     3,     1,     3,     1,     1,     1,
       1,     4,     5,     4,     6,     1,     0,     3,     3,     1,
       1,     0,     2,     2,     2,     2,     0,     2,     0,     3,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     1,     0,     2,     2,     1,     0,     1,     1,
       2,     3,     2,     0,     6,     3,     0,     0,     0,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     3,     3,
       3,     0,     3,     3,     0,     7,     0,     3,     1,     3,
       0,     3,     2,     4,     0,     3,     4,     4,     0,     0,
       0,    16,     8,     7,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     0,    12,     4,     4,     3,     4,     3,
       2,     1,     3,     5,     1,     1,     0,     1,     1,     0,
       2,     0,     0,     3,     0,     2,     5,     3,     3,     3,
       1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   931,  1141,  2697,     0,     0,     0,     0,     0,     0,
    2699,   585,    66,  1798,  1926,  1927,  1709,  1737,     2,     0,
    1141,   276,   179,     0,    78,  1739,     0,  1984,     0,     0,
    1141,     0,   487,     0,  1979,     0,     0,  1141,  1742,  1969,
     253,   179,  2699,     0,  1187,  2487,  1839,  1995,     0,     0,
       0,  1822,     0,  2563,  1787,     0,     0,  2830,     0,     0,
       3,     8,    19,     0,    41,    24,    29,    14,    18,    13,
      54,    48,    26,    39,   128,    38,    10,    57,    58,    16,
      45,    11,    12,    15,    37,    44,    33,    40,    52,  1178,
      22,    23,    30,    46,    62,    20,    59,    55,    21,  1928,
      25,    47,    42,    34,    56,    63,    35,    53,    36,    61,
      28,    49,    27,     9,    17,    50,    51,    43,    64,    31,
      60,    32,     0,   960,     0,     0,     0,     0,     0,     0,
    1045,   943,  2764,  2765,  2766,  1143,  1142,     0,  2699,  2099,
    1126,  1152,  2176,  2178,  2177,  2179,  2180,  2181,  2182,  2183,
    2184,  2116,  2185,  2186,  2187,  2189,  2188,  2190,  2191,  2192,
    2117,  2118,  2193,  2194,  2195,  2197,  2196,  2198,  2119,  2120,
    2199,  2200,  2201,  2202,  2121,  2123,  2122,  2203,  2206,  2205,
    2204,  2124,  2207,  2208,  2209,  2211,  2125,  2126,  2127,  2128,
    2129,  2210,  2130,  2212,  2131,  2213,  2214,  2215,  2216,  2217,
    2218,  2219,  2221,  2220,  2132,  2222,  2223,  2225,  2226,  2227,
    2224,  2228,  2230,  2229,  2231,  2232,  2233,  2133,  2234,  2134,
    2235,  2236,  2237,  2238,  2239,  2240,  2241,  2135,  2242,  2243,
    2244,  2263,  2136,  2245,  2248,  2247,  2246,  2249,  2250,  2251,
    2253,  2252,  2254,  2255,  2137,  2138,  2256,  2257,  2258,  2259,
    2261,  2260,  2265,  2266,  2267,  2139,  2262,  2264,  2464,  2268,
    2269,  2271,  2270,  2272,  2140,  2274,  2273,  2141,  2276,  2275,
    2142,  2143,  2277,  2278,  2279,  2097,  2280,  2098,  2281,  2284,
    2285,  2282,  2286,  2291,  2144,  2283,  2287,  2288,  2289,  2290,
    2292,  2145,  2294,  2293,  2295,  2296,  2297,  2298,  2299,  2300,
    2301,  2302,  2303,  2316,  2307,  2308,  2310,  2311,  2314,  2309,
    2315,  2319,  2318,  2320,  2321,  2322,  2323,  2324,  2317,  2305,
    2312,  2313,  2306,  2325,  2326,  2304,  2327,  2328,  2329,  2330,
    2331,  2332,  2333,  2334,  2335,  2336,  2337,  2339,  2338,  2340,
    2341,  2342,  2343,  2344,  2345,  2347,  2346,  2348,  2349,  2350,
    2352,  2351,  2354,  2355,  2146,  2353,  2356,  2357,  2358,  2359,
    2360,  2362,  2361,  2147,  2149,  2148,  2150,  2363,  2364,  2151,
    2365,  2367,  2366,  2368,  2369,  2370,  2372,  2371,  2373,  2374,
    2152,  2153,  2375,  2376,  2377,  2378,  2379,  2380,  2381,  2382,
    2383,  2384,  2385,  2386,  2387,  2388,  2390,  2389,  2391,  2392,
    2393,  2394,  2395,  2396,  2397,  2154,  2398,  2155,  2399,  2400,
    2156,  2401,  2157,  2402,  2403,  2404,  2405,  2406,  2158,  2407,
    2408,  2409,  2411,  2412,  2410,  2413,  2159,  2414,  2415,  2416,
    2160,  2418,  2417,  2419,  2161,  2421,  2162,  2163,  2420,  2165,
    2166,  2422,  2423,  2424,  2164,  2425,  2167,  2426,  2427,  2429,
    2428,  2430,  2431,  2432,  2168,  2433,  2169,  2434,  2435,  2436,
    2437,  2438,  2440,  2439,  2441,  2442,  2443,  2444,  2447,  2449,
    2446,  2448,  2445,  2450,  2451,  2452,  2453,  2457,  2458,  2459,
    2460,  2454,  2455,  2456,  2170,  2461,  2462,  2463,  2465,  2466,
    2468,  2467,  2171,  2172,  2469,  2470,  2175,  2471,  2472,  2473,
    2477,  2474,  2486,  2475,  2476,  2479,  2478,  2480,  2481,  2482,
    2173,  2483,  2174,  2484,  2485,   198,  2102,   181,  2103,  2115,
     112,  2554,  2553,  1089,  1127,  2700,  2701,   583,   887,     0,
       0,   179,     0,   888,     0,   886,   179,   134,     0,     0,
       0,  1815,     0,  1735,  1735,  1735,  1735,     0,  1735,   179,
    1735,     0,  1738,  1735,   179,  1735,     0,    71,  1934,   277,
       0,     0,     0,     0,     0,  2096,     0,  1745,     0,     0,
    1986,  2002,     0,  2003,  1997,  2551,     0,  1212,     0,     0,
       0,     0,   179,  1144,     0,  1796,     0,   243,   252,   254,
     255,   251,     0,  2701,  2712,  1179,  1185,  1197,     0,  1906,
     255,     0,   112,  1070,     0,   112,  1823,  1820,     0,     0,
       0,  1796,  1996,  2814,     0,     0,     0,  2810,     0,  2815,
       0,  1187,     0,     0,     1,     5,     0,     0,   582,  2766,
       0,   579,   580,  2258,  2367,  1919,  1917,  2091,     0,   934,
     961,     0,   939,     0,   937,  2108,  2107,  2106,     0,   950,
     949,   947,     0,   448,     0,  1047,     0,  2771,   941,  1103,
    2698,     0,   200,     0,     0,   113,   114,     0,     0,     0,
    2704,     0,     0,     0,   586,     0,     0,   133,     0,     0,
     583,   583,   583,  1819,  1818,  1817,     0,  1815,  2177,  2116,
    2192,     0,  2064,     0,     0,     0,  1496,     0,  2121,     0,
    2207,  2209,  2125,  2126,  2127,  2128,  2129,  2132,     0,     0,
    1225,  1225,  1225,  1222,     0,     0,     0,  2232,  2233,  2070,
       0,     0,     0,  2060,  2071,  2271,  2272,     0,  2062,  2063,
    2278,     0,     0,     0,  2293,     0,  2298,  2068,     0,     0,
    2334,  2336,     0,     0,  2340,  2341,  2342,  2343,  2045,  1280,
       0,  1222,  2059,  2067,  2359,  2052,  2368,  2373,  2374,     0,
    2383,     0,     0,  2405,     0,  2412,  2410,  2416,     0,     0,
    2437,     0,     0,  1222,  2044,  2457,  2458,  2459,  2460,     0,
    2061,  2170,  2069,     0,  2471,  1225,  1222,  1222,     0,     0,
       0,  2480,  2481,  2485,     0,     0,     0,  2736,  1279,     0,
    1458,     0,  1490,  1237,  1243,  1257,     0,  1272,  1306,  1307,
    1309,  1413,  1308,  1314,  1313,  1710,  2056,  1312,  1311,  2057,
    2058,  1305,  2081,  2102,  2080,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1902,     0,     0,  1721,  1735,    73,
       0,     0,  2612,  2627,  2628,  1225,  2624,  2629,  2252,  2138,
    2265,     0,  2626,  2618,     0,  2378,  2382,  2622,  2397,  2400,
    2616,     0,  2162,  2441,  2648,  2620,  2625,  2606,  2593,  2607,
       0,     0,  2610,  2614,  2093,  1604,  2566,  2567,     0,    79,
    1747,  1748,  1746,  1041,     0,  2827,  1987,  1988,  1989,     0,
    2006,     0,  1139,     0,     0,   497,   488,     0,  1901,  1900,
       0,  1980,  2713,     0,     0,  1094,  1750,  1797,     0,  1749,
    1975,     0,  1973,  1970,  1972,   244,     0,     0,   274,  2178,
    2612,  2382,  2584,     0,  2592,     0,  2707,  2704,  2714,  2749,
    2744,  2743,  2746,  2747,  1203,  2748,  1202,  2745,  2742,  1212,
    1198,  1200,  1201,   803,     0,     0,  2507,  2508,  2347,  2368,
    2406,  2509,  2454,     0,     0,  2528,  2488,  2493,  2489,     0,
       0,  1861,     0,   803,  1884,  1914,  1862,     0,     0,  1914,
       0,  1639,  1904,  1907,     0,  2511,  1875,   884,   883,  1887,
     882,  2512,  1900,     0,  1847,  1863,     0,  1824,  1868,   112,
    2513,     0,  1903,  1886,     0,  1885,  1639,  1914,     0,  1840,
       0,     0,     0,     0,     0,   250,  1077,  1077,     0,     0,
    1069,  1071,  1072,  1077,  1077,     0,  2828,  2829,  2564,  1041,
    2051,  2049,  2050,  2100,  2811,  2048,  2819,  2821,  2807,  2809,
    2816,  1181,     0,  2718,     6,    65,   129,  1212,  1212,  2766,
     583,   581,     0,  1931,  2769,  2770,  2768,   819,     0,  1225,
    2109,  2112,  2767,  2113,   182,   948,     0,   449,   182,     0,
       0,     0,     0,     0,   450,   451,   387,     0,  1051,  1052,
    1046,  1048,  1050,   945,     0,     0,   944,  2771,     0,     0,
    1154,  1156,  1155,  1172,   202,   199,   180,    80,  1091,  1728,
    1730,  1129,  2703,     0,     0,  2705,  2709,  1278,  1277,     0,
     126,   132,     0,  2599,  2603,     0,     0,  2112,  2675,     0,
     130,  2663,     0,     0,     0,     0,  1799,  1803,  1809,  1813,
    1816,     0,     0,  1609,  1327,  1609,  1609,  1609,  1497,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,     0,  1365,  1337,  1338,     0,  1366,     0,
       0,     0,  2072,     0,     0,     0,  2736,     0,     0,     0,
    1463,     0,     0,     0,  2736,     0,     0,     0,     0,     0,
       0,  1492,  1494,  2080,  1609,     0,     0,  1609,     0,     0,
       0,     0,     0,  1230,  1371,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1609,  1609,
       0,     0,  1609,  1379,  2074,     0,     0,     0,  2073,     0,
       0,     0,  2066,   800,   801,  2046,  2065,     0,  1382,  1384,
    1383,     0,  1609,  1609,     0,     0,     0,  1317,  1316,  1318,
       0,     0,     0,     0,     0,     0,  1276,  1275,  1274,  1273,
       0,     0,     0,  1281,     0,  1282,  1283,     0,  1284,  1285,
    1286,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1319,     0,     0,     0,  2047,  1422,     0,  1736,  1715,  1723,
    1717,     0,  1902,  1718,  1720,  1727,   462,     0,  1724,  2114,
    2661,  1719,     0,  1711,     0,    72,     0,  1958,  1963,     0,
       0,     0,  1953,  1961,  1955,  1962,  1954,     0,     0,  1964,
     112,     0,  1956,  1960,  1959,  1935,  1938,  1945,  1936,     0,
       0,   275,   278,   280,     0,   283,  2613,  2611,  2645,  2644,
    2649,     0,  2646,  2642,  2605,  2635,  2676,  2639,     0,  2676,
    2641,  2640,  2676,  2636,  2643,  2676,     0,  2608,     0,  1605,
    1606,     0,  2565,     0,  2092,  1042,     0,     0,  1990,  1991,
       0,  1162,  2007,  2008,  2004,  1604,  2552,  2555,     0,   690,
    1213,   498,     0,     0,   509,     0,     0,    68,    69,     0,
    1146,     0,  1145,  1149,     0,     0,     0,  1753,  1743,  1752,
    1530,  1976,   112,     0,   242,   267,   262,   270,   264,   266,
     265,   271,   272,   273,   268,   263,   269,   256,     0,     0,
    2611,     0,     0,  2608,  2708,     0,  2710,  2727,  1186,  2715,
    1209,  1188,  1208,     0,  1199,   802,     0,   805,   807,  1772,
    1773,   806,   815,     0,   804,     0,     0,  2525,     0,  2514,
       0,   811,   813,   812,  2522,   810,     0,     0,  2498,     0,
       0,  1910,     0,     0,  1874,     0,   583,     0,     0,     0,
       0,     0,     0,  1841,     0,     0,   634,     0,  1867,  1640,
    1908,  1909,  1914,     0,     0,  1914,     0,  1880,  1904,  1914,
       0,  1914,  1836,     0,     0,  1828,  1833,  1829,     0,  1835,
    1834,  1837,  1825,  1826,     0,  1854,  1882,     0,  1904,  1866,
    1873,     0,  1853,  1860,     0,  1871,  1904,  1904,     0,  1914,
    1914,  1065,  1081,  1063,  1075,  1076,     0,     0,  1068,  1067,
    1821,  1533,     0,     0,  2808,  2822,  2806,  2817,  2818,  2805,
    1182,  2719,  1180,  2720,     0,     7,     4,  1212,  1212,  1212,
    2763,     0,  2751,  2758,  2759,  2762,  2761,  2760,  2757,     0,
    2750,  2753,  2754,  2756,  2755,  2771,     0,  1921,  1922,  1923,
    1924,  1925,  1920,  1918,  1932,  1933,   820,   819,   574,   577,
     576,     0,     0,  2111,     0,   940,     0,  1902,   938,     0,
       0,  1902,   398,  1902,   452,   932,  1049,   952,     0,     0,
     942,  1104,  1105,  1108,     0,     0,   486,  1172,  1158,  1174,
       0,   203,   205,     0,  1093,  1092,     0,  1090,  1137,  1136,
    1134,     0,  1135,  1133,  1128,  1130,  1131,  2702,  2706,   584,
     819,  1902,     0,     0,   131,     0,   390,     0,     0,   889,
     889,   889,  1805,  1732,  1530,  1734,  2091,     0,     0,     0,
    1811,     0,     0,  1610,  1609,     0,  1472,     0,     0,     0,
       0,  1498,     0,     0,     0,     0,     0,     0,     0,     0,
    1303,     0,     0,     0,     0,     0,  1443,     0,  1472,  1226,
    1684,  1685,  1669,  1670,  1668,  1671,  1223,     0,  1672,  1683,
    1394,     0,     0,     0,     0,     0,     0,  1580,  1581,  1582,
    1583,  1591,  1584,  1585,  1586,  1593,  1598,  1587,  1588,  1594,
    1595,  1596,  1589,  1597,  1592,  1590,  1599,     0,  1579,     0,
    1602,  1600,  1603,  1601,     0,  1464,  1456,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,     0,     0,  1609,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1405,     0,     0,     0,     0,     0,  1609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1361,     0,
    2083,  2082,     0,     0,     0,   852,     0,  1321,     0,  1320,
    1542,     0,  2721,  2737,     0,  2514,  1459,  1461,     0,  1228,
    1227,  1229,  1240,  1233,  1238,  1231,  1235,     0,  1287,  2184,
    1241,     0,     0,  1269,  2736,  1618,  1270,  1255,  1260,  1261,
       0,  1258,  1259,     0,  1263,     0,  1262,  1266,  1267,  1268,
    1271,     0,     0,     0,     0,  1310,  1315,  1491,  1212,  2084,
       0,     0,   462,   465,   464,  1725,   463,  1774,     0,  1053,
       0,     0,    74,    76,  1950,  1947,  1946,  1948,  1952,   112,
    1957,  1949,     0,  1965,  2232,  2457,  2460,   287,     0,   260,
     259,   261,   284,     0,     0,  2638,     0,  2619,     0,  2623,
    2617,  2621,  2601,     0,     0,  2609,     0,  2647,  2630,  2634,
    2633,  2631,     0,  2632,  2637,  2615,  1608,  2266,  2351,     0,
    1611,  2569,  1740,  2826,  1992,  2471,  1993,  1985,     0,  2005,
       0,     0,     0,  1140,   691,     0,  1212,   496,   495,   494,
     493,     0,   511,   491,   499,    70,     0,     0,  1981,     0,
       0,     0,     0,  1096,  1751,     0,     0,  1731,  1531,  1977,
    1971,     0,     0,     0,     0,     0,  2665,  2590,     0,     0,
       0,  2711,  2729,  2728,  2716,  1212,  1630,  1213,  1213,  2080,
    2530,     0,  2524,  2523,     0,     0,     0,  2543,  2526,     0,
       0,  2492,  2531,  2532,  2535,     0,     0,     0,     0,     0,
    2529,  2454,  2494,  2495,     0,  2500,  2490,  2549,  2550,  2547,
    2548,  2546,  2519,  1881,     0,  1912,  1915,  1916,     0,     0,
    1895,  1889,  1888,  1878,  1890,  1879,  1899,  1898,  1897,  1851,
    1850,  1652,  1653,  2409,  1651,  1643,  1646,  1650,  1649,  1844,
    1905,  1894,  1892,  1876,  1914,  1849,  1848,  1893,  1891,  1830,
    1831,  1832,     0,  1639,     0,  1910,  1883,  1914,  1904,     0,
    1914,  1914,  1896,  1870,  1872,  1066,  1083,  1082,  1078,  1079,
    1084,  1074,  1073,  1551,  1550,     0,  1505,     0,  1507,  1504,
    1503,  1502,     0,  1550,  2812,  2820,  2824,     0,  1639,  2726,
    2724,     0,     0,     0,   583,     0,     0,  2752,   115,   575,
    1774,  1774,     0,  2110,     0,     0,     0,     0,     0,     0,
       0,   183,   192,     0,     0,   396,   397,  1774,   395,   438,
     439,   442,   443,   444,     0,     0,     0,     0,     0,     0,
       0,     0,   136,   445,  1774,  1774,   392,   418,   419,   422,
     423,   424,   425,   426,   388,     0,   393,   819,     0,   954,
     956,  2772,  2773,  2774,     0,     0,  1107,  1161,  1153,  1160,
    1157,  1172,  1170,  1159,   879,   878,     0,  1173,   201,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,    82,   100,  1729,  1138,  1132,   127,   819,  1774,
    1774,  1774,  1774,   394,   427,   428,   431,   432,   433,   434,
     437,   435,   436,     0,  2604,     0,     0,  1902,     0,  2667,
    2668,     0,  2664,   890,     0,     0,     0,     0,     0,  1800,
       0,  2094,  1810,  1533,  1814,  1813,     0,  1390,     0,  1436,
       0,  1438,  1439,  1440,     0,     0,     0,     0,     0,  1391,
       0,  1335,  1392,  1393,     0,  1387,     0,  1388,     0,     0,
       0,     0,     0,     0,     0,  1442,     0,  1224,     0,     0,
    1339,  1340,  1332,  1324,     0,  1415,     0,     0,  1341,     0,
       0,     0,     0,  1396,     0,  1416,  1493,     0,  1495,  2084,
       0,  1448,  1397,  1346,     0,  1446,     0,  1347,  1417,  1418,
    1419,  1399,  1400,     0,  1421,     0,  1401,     0,     0,  1404,
       0,     0,  1349,  1452,  1450,     0,     0,     0,     0,  1454,
    1351,     0,     0,     0,  1350,     0,     0,     0,     0,     0,
       0,     0,  1353,     0,  1333,  1451,  1453,  1407,     0,     0,
       0,     0,     0,  1362,     0,  2730,  1541,  2738,  1542,     0,
       0,  2732,  2722,  2727,  2735,  1325,     0,     0,  2085,  1234,
    1239,  1232,  1236,  2736,     0,     0,     0,     0,  1253,  1252,
       0,     0,     0,  2736,  1618,  1256,     0,     0,  1432,  1433,
    1488,     0,  1716,  1713,  1726,  1775,     0,  2662,  1055,  1054,
    1722,  1053,    77,     0,  1951,  1944,  1966,  1939,     0,   279,
     288,   281,   285,   286,   282,  2680,     0,  2679,     0,     0,
    2598,  2657,  2660,  2091,     0,     0,     0,  2579,  2573,  2580,
    2582,  2576,  2581,  2583,  2574,  2575,  2570,  2577,  1612,  1641,
       0,  1994,  1163,  1165,  1166,  1164,  1172,     0,     0,  2558,
    2559,  2557,  2556,   501,     0,   510,     0,   522,     0,     0,
       0,  1983,  1982,     0,  1147,  1150,  1151,  1101,  1100,  1102,
    1095,  1097,  1098,   567,  1757,     0,     0,     0,  1763,  1744,
    1754,     0,  1978,  1974,     0,   257,  2591,     0,     0,     0,
       0,     0,     0,     0,  1207,  1533,  1702,  1204,  1192,  1641,
    1631,  1191,  1214,  1210,     0,   818,   817,   816,   814,     0,
       0,     0,     0,  2537,  2538,     0,     0,  2515,  2516,  2517,
       0,  2520,  2497,  2498,     0,  2499,     0,  1911,     0,  1855,
       0,  1877,     0,     0,     0,     0,  1846,     0,  1869,  1827,
    1912,  1845,  1611,  1904,  1842,  1843,  1081,     0,  1064,  1550,
    1533,     0,     0,  1525,  1552,     0,  1552,  1527,  1528,  1533,
       0,  1533,  1530,  1547,     0,     0,  2823,  1632,  2725,     0,
    2800,     0,     0,     0,   181,   587,     0,     0,   936,   186,
     189,   187,     0,   188,     0,     0,   447,   446,     0,  1902,
     440,   140,   139,   141,   142,  1666,  1667,  1663,  1664,  1662,
    1665,   144,   143,   138,   951,     0,     0,     0,  1902,   420,
     399,   400,   403,   404,   405,  1039,  1774,  1039,     0,  1774,
    1774,  1039,  1774,     0,     0,  1774,  1774,     0,     0,  1000,
    1774,     0,     0,  1039,     0,  1774,     0,  1026,     0,     0,
    1774,  1774,  1774,  1774,  1774,  1039,     0,     0,  1774,  1774,
     486,  1774,     0,     0,  1059,     0,     0,  1774,  1774,  1774,
    1774,     0,     0,  1774,  1774,     0,  1774,   969,  1025,   589,
     616,   617,   933,   968,   970,   982,   965,   482,     0,  1004,
    1028,  1029,  1027,     0,     0,     0,     0,   150,  2776,  1106,
       0,     0,  1571,   204,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1902,   429,  2600,     0,     0,  1774,   389,   406,   407,   410,
     411,   412,   413,   414,   417,   415,   416,     0,  2671,  2673,
       0,     0,   891,     0,     0,     0,  1733,  1813,  1533,  1611,
    2092,  1611,     0,  1812,     0,     0,  1437,  1473,     0,  1499,
       0,  1329,   774,   774,   774,  1482,   759,  1486,  1477,   774,
    1478,   774,  1480,     0,     0,     0,  1289,  1304,     0,     0,
       0,     0,     0,  1444,  1441,     0,     0,     0,     0,  1467,
       0,     0,     0,  1334,     0,  1427,  1449,  1447,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1455,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   841,   847,   850,   851,   853,   845,
       0,  1409,  1322,  1212,  2739,  2741,  1183,     0,  2731,  2733,
     927,  1460,     0,  1250,  1246,     0,  1244,  1617,  1265,  1264,
       0,     0,     0,  1254,  1213,  1423,  1212,     0,  1489,  2086,
    1714,   461,   633,  1712,    75,  1942,     0,  1937,  1940,     0,
       0,  2677,     0,  2688,     0,     0,     0,     0,     0,     0,
       0,     0,  2568,  1642,  1784,     0,  1172,  1176,  2101,  1998,
    2561,  2562,  2560,     0,   502,   503,   505,  1213,   519,   497,
       0,   489,   492,     0,   501,     0,  1099,  1197,     0,  1776,
    1761,  1768,  1762,     0,     0,     0,  1760,  2076,  2075,  2082,
    2714,     0,  1577,     0,     0,  2589,  2666,     0,     0,     0,
    2717,  1611,  1611,  1696,     0,     0,  1189,  1194,  1190,  1193,
       0,  1211,  1218,  1217,  2077,  2084,  2527,     0,     0,     0,
       0,  2542,  2536,  2533,  2534,     0,  2496,  2518,  2502,  2501,
    2504,  2506,  1676,  1677,  1675,  1673,  1674,  1913,  1639,  1865,
    1864,  1654,  1645,     0,  1648,  1647,  1838,  1857,  1859,  1914,
    1080,     0,  1087,  1085,     0,  2721,  1545,     0,  1529,  1526,
    1553,     0,  1552,  1552,  1533,     0,  1509,  1788,  1791,     0,
    1508,  1604,  1535,  1197,  2813,  2825,     0,     0,     0,   383,
     382,     0,   145,  2794,     0,     0,   671,   116,   473,   482,
     588,   591,   632,   631,   191,   190,   196,   197,  1680,  1681,
    1678,  1679,   453,   466,  1682,   467,   441,   137,   454,   455,
     421,     0,   401,  1040,   924,   583,  1008,     0,   672,   583,
     875,   880,   880,   583,     0,     0,  1141,     0,     0,  1735,
       0,     0,  1141,     0,     0,     0,  1774,     0,  1043,     0,
    1019,   963,     0,  1735,     0,  1735,  1735,  1020,     0,     0,
     964,  1774,     0,     0,     0,     0,     0,  1735,  1141,     0,
       0,     0,   484,     0,  1141,   984,  1062,  1061,  1060,     0,
    1141,  1141,     0,     0,     0,     0,   622,   623,   621,     0,
       0,     0,   614,   590,   819,   966,   483,   967,   671,     0,
    1056,   668,   674,  2087,     0,     0,   160,     0,     0,   953,
       0,   153,   151,   162,     0,     0,  1110,     0,  1109,     0,
    1574,     0,  1575,  1572,  1573,   101,    88,    84,   105,   106,
      86,    87,    91,    90,    92,    93,    96,    97,    94,    89,
      95,    85,   109,   111,   110,    98,   107,   108,    83,   460,
     459,   458,   457,   430,     0,     0,     0,  1902,   408,  2672,
    2670,  2669,     0,   917,   919,   918,   905,   904,   117,   120,
     123,     0,  1611,  1630,  2095,  1804,     0,  1363,  1500,     0,
       0,   775,  1474,   827,  1484,     0,  1485,   761,   760,   776,
    1476,  1479,  1483,  1481,  1328,  1336,  1385,     0,  1302,  1386,
       0,  1414,  1331,  1330,     0,     0,     0,  1369,  1370,     0,
    1465,     0,     0,  1343,     0,  1345,     0,     0,  1429,  1398,
    1420,  1372,  1402,     0,  1348,  1323,     0,  1373,     0,  1378,
    1376,     0,  1352,     0,     0,  1359,     0,  1357,     0,  1358,
       0,  1360,  1406,  1408,     0,     0,   852,   838,   839,   840,
       0,   842,   844,   846,     0,     0,  1543,  2740,  1184,     0,
       0,  1462,  1242,     0,  1251,  1248,     0,  1245,  1214,  1434,
    1424,     0,     0,   296,   291,   299,   293,   295,   294,   300,
     301,   302,   303,   297,   292,   298,   290,   289,  2678,     0,
    2597,  2602,  2659,  2658,  2681,  2681,  2681,     0,  1613,     0,
    1741,  1167,  1172,  1176,     0,  1168,  2009,   506,     0,     0,
       0,   526,     0,   524,   500,     0,  1148,  1212,  1758,  1770,
       0,  1778,     0,     0,  1755,  1765,     0,     0,     0,  1764,
     486,     0,   258,     0,  2586,  2587,  2585,  1641,  1619,     0,
       0,  1708,     0,  1703,  1205,     0,  1216,  1215,     0,  2545,
    2544,  2540,  2539,  2541,  2521,     0,     0,  1856,  1644,  1639,
    1852,     0,     0,  2727,  1604,  1537,  1533,  1506,  1533,     0,
       0,  1514,  1533,  1510,  1512,     0,  1611,     0,  1569,  1212,
    2079,  1633,  1636,     0,  2801,   386,   384,   385,     0,     0,
     206,   649,   650,   648,   647,     0,   474,     0,     0,     0,
     651,   652,   654,   655,  2009,   481,   819,   592,   402,   673,
     925,  1141,     0,     0,     0,   880,   667,   583,   924,   889,
     881,   583,   583,  1006,  1035,  1036,     0,     0,   600,   597,
       0,   609,   985,   976,   986,   997,   999,     0,   599,   624,
       0,     0,  1001,  1002,  1044,  1003,   612,  1735,     0,  1017,
       0,     0,   594,     0,     0,   643,   644,   642,   618,   625,
    1037,  1038,   595,   596,     0,     0,  1626,  1628,  1636,   602,
     601,  1687,  1686,   611,     0,   598,     0,  1023,   992,     0,
     640,   638,   635,   637,   636,   641,   639,   613,   604,   603,
     606,   605,   608,   607,   610,   626,   981,     0,  1039,  1039,
    1005,     0,  2090,     0,  1058,  1007,     0,   656,   669,   657,
       0,     0,   630,   629,   627,   628,   161,   149,     0,     0,
     955,   957,     0,     0,   958,  2778,     0,  2780,  1112,  1113,
       0,     0,  1175,     0,     0,   102,   104,     0,   391,   456,
     409,  2674,     0,     0,     0,  1813,  1806,  1655,     0,  1501,
       0,     0,     0,     0,   821,   832,   830,   824,     0,   828,
     829,  1475,     0,     0,   777,  1487,   741,   774,  1299,   759,
    1293,  1295,  1291,     0,   742,  1294,   774,     0,   827,  1298,
    1290,     0,  1445,     0,     0,  1468,     0,     0,     0,     0,
       0,     0,     0,  1326,     0,  1425,     0,     0,     0,     0,
       0,     0,  1356,  1354,  1355,   836,  1411,     0,   849,   843,
     841,   848,     0,  1641,  2721,   928,  1247,     0,  1435,  1943,
    1967,     0,     0,  2686,  2686,  2686,  1783,  1782,     0,  1781,
    1785,  1169,  1177,  2011,  2010,     0,   504,   507,     0,   499,
       0,   523,     0,   490,   568,     0,     0,     0,  1779,  1767,
    2718,  1756,  1759,  2084,  1532,  1578,  2588,  1196,     0,  1614,
    1707,  1704,     0,  1697,  1699,  1701,     0,  2078,  2503,  2505,
    1858,  1086,  1088,  1538,  1536,  1546,     0,  1502,  1533,  1533,
       0,  1502,     0,     0,  1790,  1630,  1792,  1534,  1566,  1548,
       0,  1637,  1638,  1635,     0,   217,  1212,     0,     0,   207,
     209,   210,     0,     0,   471,   468,   671,   470,   570,   593,
     987,     0,   583,   876,   877,   889,   926,     0,   889,   889,
       0,     0,   975,  1010,  1129,     0,   980,   815,   619,     0,
     971,  1018,  1053,     0,   620,  1012,   973,     0,  1629,   485,
     972,   994,   978,  1965,  1009,  1057,   857,   755,   704,   695,
     774,   698,   697,   774,   709,   759,   757,   727,   759,   759,
     734,   733,   751,   737,   717,   827,   827,   716,   754,   827,
     738,   736,   740,     0,   742,   759,   747,   735,   739,   756,
     732,   729,   753,   774,   774,   774,   713,   752,   827,     0,
     745,   774,   675,   778,   715,   827,   834,     0,     0,   774,
     776,  2089,   147,   152,   163,   164,   946,  2777,     0,  2775,
       0,  1118,     0,  1171,  1576,    99,     0,     0,     0,     0,
       0,     0,  1801,  1364,   772,   770,   773,   771,   823,   822,
     826,     0,   825,   834,     0,     0,  1301,  1296,   743,  1300,
    1292,  1297,  1389,  1367,  1368,     0,  1466,  1457,  1395,     0,
    1344,  1426,     0,     0,  1403,  1374,  1377,  1375,  1380,  1381,
       0,  1410,     0,  1204,  1204,   645,  2734,  1249,     0,  1941,
    2689,     0,     0,  2685,  2683,     0,  2684,  2682,  2650,     0,
    2595,  2596,  2594,  2578,     0,     0,     0,  1212,   512,     0,
     529,   528,   525,  1641,  1769,  1771,  1777,  1766,     0,  1615,
    1630,   808,  1700,     0,  1206,     0,  1515,     0,  1519,  1524,
    1520,     0,  1511,     0,  1655,  1570,     0,  1641,  1636,     0,
     220,   218,   219,     0,   213,   215,   210,  2788,     0,  2795,
       0,     0,  2793,   475,  2718,   587,   653,   571,     0,   989,
       0,     0,     0,     0,     0,     0,  1022,     0,     0,   977,
     998,  1024,  1016,  1015,     0,     0,  1141,  1627,   993,   995,
    1096,     0,     0,   861,   703,   696,   714,   712,   763,   758,
       0,   763,   763,   723,   741,   718,     0,   827,   731,   722,
     743,   746,   748,   750,   763,     0,   827,   711,   710,   720,
     707,   763,   786,     0,     0,     0,     0,   782,     0,   855,
       0,   789,     0,   676,   779,   781,     0,     0,     0,   744,
     827,   700,   835,   834,   702,   827,   834,   763,   763,     0,
     154,   959,   323,  2779,  1187,     0,  2784,     0,  1119,  1115,
    1116,  1111,   103,   135,     0,  1636,   922,     0,     0,  2409,
    1656,  1807,   833,   831,     0,  1469,  1636,     0,  1428,  1430,
     837,     0,  1544,   646,     0,  2656,  2655,  2654,  2651,     0,
       0,     0,     0,     0,     0,  2687,  2691,  1780,     0,     0,
       0,   520,     0,     0,   554,   569,  1623,  1636,     0,  1641,
       0,  1705,  1698,  1539,     0,     0,     0,     0,     0,  1789,
    1558,  1559,     0,     0,  1564,  1568,  1549,  1634,  2792,  2802,
     217,     0,     0,   158,     0,   208,   815,   211,   472,   482,
       0,   477,     0,     0,   988,   670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1021,  2053,  1056,   486,
    1013,   974,     0,   979,   615,     0,   860,     0,   865,   767,
     768,   769,   724,   764,   766,     0,   726,   694,   719,   749,
     725,     0,   721,   708,   792,   791,  1219,   784,   799,   679,
       0,     0,   790,     0,   780,   788,   783,     0,   699,   701,
     705,   706,   692,   693,  2088,     0,   156,   349,     0,   335,
     321,     0,     0,     0,   325,   165,   168,   166,     0,   167,
     173,     0,   174,   175,   176,   177,   178,   169,   347,   348,
     172,   170,   171,     0,  2104,     0,  2105,  2782,     0,     0,
    2781,  1114,     0,  1121,   892,     0,   921,     0,   894,   896,
    1657,     0,  1212,  1802,   762,     0,  1471,  1342,  1412,  1968,
    2652,  2692,  2695,  2693,  2694,  1659,     0,  2696,  2690,     0,
    1530,  1213,     0,   513,     0,   516,   518,   532,     0,  1774,
    1774,     0,     0,  1774,  1774,  1774,  1774,   547,   555,   557,
       0,  1624,  1625,     0,  1620,  1622,  1616,  1688,   809,  2012,
    2721,  1516,     0,  1521,     0,  1513,  1554,  1554,  1565,   184,
     214,     0,     0,   150,   159,  2796,   797,  2009,     0,  2714,
     991,     0,     0,     0,   658,     0,     0,  2055,  2054,  1011,
     983,  1056,     0,   858,     0,   862,   863,   864,     0,   856,
     765,     0,   929,     0,     0,   798,  1219,   787,  1212,   796,
     795,   793,   794,   155,     0,   148,     0,     0,   334,   337,
       0,     0,   340,   330,   329,   331,     0,   324,   323,   323,
     377,   328,   374,   373,   366,  2718,     0,     0,     0,  1120,
    1125,     0,  1122,  1124,     0,  1774,   118,   893,   913,   912,
     898,     0,  1636,     0,     0,   121,   895,   915,   902,   124,
     897,   914,   900,  1658,  1808,  1636,  1661,  1660,  1786,  1794,
       0,  1999,     0,   521,   514,     0,     0,   530,     0,     0,
    1774,  1774,     0,     0,     0,     0,     0,   527,   556,  1774,
    1636,     0,  1195,     0,  2020,  1540,     0,     0,     0,  1562,
    1560,  2803,   216,  1212,   162,     0,   469,   479,   478,   990,
       0,   664,   892,   660,   662,  1014,     0,   859,     0,     0,
     827,     0,   827,  1220,     0,   785,     0,   157,   350,   361,
     364,   356,   336,     0,     0,     0,   326,   323,     0,   310,
     308,   309,   315,   316,   317,   318,   319,   320,   311,   314,
     312,   313,   323,     0,   225,     0,     0,  2783,     0,  2785,
       0,  1117,     0,   907,     0,  1030,   899,     0,   920,   923,
       0,  1030,   903,  1030,   901,  1470,     0,     0,   808,   508,
     520,   517,   540,   533,   536,     0,   566,   560,     0,     0,
     562,   563,   561,   558,   551,     0,   549,     0,  1621,  1689,
       0,     0,     0,     0,  2013,  2015,     0,  1706,  1518,  1523,
       0,  1555,     0,     0,     0,   194,   193,   185,     0,   323,
    2789,     0,  2797,  2718,   666,   892,   659,   894,   896,     0,
     871,     0,   870,     0,   867,   866,   728,   930,   730,  1221,
     680,     0,     0,   323,   357,     0,   332,     0,     0,     0,
       0,   223,   380,     0,   221,   368,   368,  2786,  2787,  1123,
     906,   119,  1032,  1031,   911,   910,   908,   909,   916,   122,
     125,  1793,  1795,  2000,   515,   540,     0,   538,     0,   534,
     531,   535,   564,   565,     0,   548,     0,   559,     0,     0,
       0,     0,     0,  2014,     0,     0,  2021,  2023,  1557,  1556,
    1571,     0,   195,  2804,     0,   164,   184,   480,   665,   661,
     663,   996,   873,   874,   872,     0,     0,   682,   681,   683,
     358,   364,   354,   362,   323,     0,     0,   322,   341,   376,
     224,     0,   378,     0,   323,     0,   367,   369,   371,  1034,
    1033,  2026,   537,     0,   545,   541,   543,   546,   554,   553,
     550,  1212,  2018,  2019,     0,  2016,     0,     0,  2022,     0,
       0,     0,   146,  2798,     0,     0,     0,   687,   677,   684,
     686,     0,   355,     0,     0,   353,   333,   338,   323,     0,
     323,   236,   235,     0,   227,   304,   375,     0,   226,     0,
    2012,   539,     0,     0,   552,     0,     0,  1692,  1694,  2017,
    2025,  2024,  1563,  1561,  2790,   323,   869,   868,   689,   688,
     685,   359,     0,   323,     0,   323,     0,   323,     0,     0,
       0,     0,     0,   222,     0,  2020,   544,   542,  1213,  1690,
    1212,   323,  2799,     0,   351,   323,   339,   344,   381,     0,
     230,   305,   306,     0,   233,     0,  2028,  1695,  1693,  2791,
     323,   323,   340,   343,   379,     0,     0,   228,   229,   241,
     240,   232,     0,  2027,     0,  2032,   323,   323,   345,   249,
     247,   323,   237,   245,   239,     0,   246,   307,   234,     0,
       0,  2039,     0,   231,   248,  2030,  2031,  2029,  2034,     0,
       0,  2036,  2037,     0,  2001,   238,  2038,  2033,     0,  2040,
    2042,     0,  2035,     0,  1212,  2041,     0,  1213,  2043
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    59,   626,  1536,    60,    61,    62,    63,    64,  1377,
      65,   839,  1295,  1842,  1843,    66,   566,    67,  1603,  2161,
    2162,  3514,  3515,  2163,   664,   665,    68,  2535,  3522,  4455,
    3523,  4461,  3524,  4463,  1620,   629,   537,  2101,  2102,  1540,
    3369,  3089,  4000,  3093,  4156,  4305,  4263,  2119,  3504,  4001,
    4002,  4165,   561,  2533,  1575,  4391,  2081,  4507,  2082,    69,
     662,  1085,  1600,  1601,  3678,  3679,  3911,  3680,  3903,  3904,
    3905,  3906,  4624,  4427,  4544,  4625,  4710,  4745,  4751,  4752,
    4673,  4761,  4762,  4763,  4749,   916,  4764,    70,   589,   590,
     918,  1407,  1857,  1408,    71,    72,   560,  1321,  1322,  1323,
    1324,  2374,  1858,  2369,  2370,  3266,  4674,  4747,  4428,  4429,
    4312,  4430,  4168,  4431,  4316,  4432,  4171,  4433,  4434,  4435,
    4436,  4616,  4437,  4311,  4666,  4424,  4425,  4668,  4727,  4743,
    4438,  4178,  4306,  4531,  4179,  4307,  4611,  4420,  4612,  4661,
    4723,  4421,  4532,  4664,  4535,  4439,  4445,  4626,  4440,  4446,
    4441,  4183,  4323,  4444,  4321,  4443,  4670,  4621,  2971,  3368,
     649,   650,   677,  2187,   651,  1101,  1055,  1577,  2114,  2115,
    2570,  2571,  2686,  2687,  2688,  2106,  2107,  2108,  2173,  2174,
    2175,  2088,  2089,  2090,  1581,  2085,  2086,   652,  1056,  1066,
    2109,  2110,  2111,  2692,  2177,  2178,  2179,  2180,  2112,  1835,
    2113,  2992,  2977,  3915,  3914,  2978,  3687,  4269,  4513,  3384,
    3385,  3076,  3454,  2132,    73,   578,   896,  1374,  2418,  1375,
    2420,  2853,  2854,  2855,  1907,  1908,  3868,  1912,  2417,  4051,
    4470,  4224,  4225,  2857,  4223,  2861,  3292,  3293,  3620,  3870,
    4054,  4475,  4366,  4570,  4473,  4566,  4474,  4568,  4683,  4635,
    4636,  4377,  4485,  4486,  4574,  4638,  4237,  4238,  4239,  2438,
    2867,  3873,  3918,  2167,  1567,  1568,   630,   631,   632,  3398,
      74,  2979,  2628,  2980,  2981,  3477,  2630,  2631,  2821,  1465,
    3467,  3438,  3843,  3375,  3379,  3380,  3381,  3382,  3383,  4402,
    4517,  4518,  4515,  3487,  3396,  3007,  3008,  3081,  3490,  3772,
    3982,  4609,  4658,  4659,  4660,    75,   893,  4086,  3950,  3965,
    3774,  3775,  3776,  3777,  3778,  3779,  3780,  3166,  3167,  4122,
    4123,  4124,  3161,  3162,  3545,  3983,  3984,  3985,  4087,  4137,
    1216,  3538,  1431,  1432,  4061,  1443,  1444,  2466,  1952,  2467,
    1571,  3539,  3540,  3541,  3994,  3225,  3840,  3231,  3232,  3233,
    2784,  2785,  2786,  2787,  2788,  2312,  3986,  3489,  3943,  4115,
    4118,  4289,  4524,  3009,  3397,  3010,  3401,   998,   538,  3011,
    3012,  2193,  2194,  4336,  4345,  4349,  4337,  4350,  4346,  4338,
    4339,  4340,  4352,  4348,  3146,  4014,  4015,  3389,  3399,  3241,
    4291,    76,   130,  2117,  1047,  1058,  1054,  1077,   657,  1587,
    2120,  2647,  3786,   639,  2632,  3936,  3704,  3940,  2633,  3413,
    2634,  3919,  4094,  2635,  3721,  3938,  4112,  3414,  3415,  3028,
    2636,  2637,  2638,  2639,  3928,  3935,  4281,  4551,  4552,  4553,
    3013,  1356,  3425,   654,   655,  1070,  1071,  1072,  2360,  3485,
    3059,    77,  2040,  2035,    78,  1010,  1011,  1012,  1511,  1512,
    2038,  2039,  2508,  2943,    79,   667,  1607,    80,  1385,  2430,
    2431,  2432,    81,  1078,  1591,  1592,  2126,  3098,  3510,  3791,
    4011,  4193,  4007,  4331,  4332,    82,    83,   668,  1614,  1615,
    1616,    84,  1368,   137,    85,   904,  1380,  1382,  1383,    86,
     661,  1079,  1080,  1081,  1082,  2128,    87,  1898,  2402,  2403,
    2404,  2405,  1597,  2651,  1598,  1599,  2137,  3285,    88,    89,
     623,  2320,   595,   928,   596,   597,  1946,  2457,  3844,   939,
     940,   941,  2896,  1421,  1422,  1423,  1904,  2901,  4295,  1148,
    1144,   802,   803,   804,   805,  1241,  1242,  3987,   806,  1251,
    1801,  3178,  3560,  1660,  1661,   807,   808,   809,   810,   811,
     812,  1828,  3197,  3198,  3575,  2347,  2348,  2349,   813,  2234,
    3184,  2247,   814,  1234,  1786,  1716,  3567,  3190,  3825,  4025,
    1645,  2210,  2733,  3169,  2817,  2314,  1170,  1171,  1129,  2217,
    1651,  2046,  2047,  2048,  2049,  2050,  3662,  3663,  4064,  3887,
    4066,  3891,  2518,  2519,  1927,  1928,  2051,  2052,  2944,  3885,
    4250,  2315,  2316,  2317,  3593,  2945,  3346,  2962,  2963,  3897,
    2509,  2053,  2951,  4389,  4073,  4074,  4504,  4503,  4075,  3895,
    3896,  3667,  3668,  3101,  3102,  3103,  2881,  1707,  1708,  1714,
    1351,  1352,  1646,  2399,  2841,  3880,  4058,  2338,  3639,  4056,
    4244,  2642,  3446,  3447,  2459,  2460,  2966,  3361,  3673,  1468,
    3845,  2843,  2005,  2931,  2932,  3802,  4217,  4750,  2789,  2927,
    2993,  1678,  1679,  3453,  4382,  4578,  4686,  4687,  4688,  3321,
    3322,  3643,  3644,  2461,  2893,  3323,  3881,  4249,    90,   542,
      91,  1840,  2820,  1292,  2366,  1089,  1387,  1632,  1633,   826,
     556,    92,   567,  2400,    93,   585,  1925,   883,   908,  1388,
    1389,  2439,  2868,  2875,  2440,  2880,  3630,  2870,  3298,  3299,
    2355,  2356,  2871,  3301,  3627,  3608,  3609,  3280,  3865,    94,
     611,  3356,  2957,  2958,  4358,  4359,   909,    95,   541,  1116,
    2709,  4021,  1638,  2198,  4203,  1117,  1118,  2201,   686,   687,
      96,  1015,   607,  1491,  1492,  1493,  2023,    97,   599,   999,
    2928,  3339,  1999,   900,  1287,  1472,  1002,  1473,  1985,  2489,
    1454,    98,  1043,  1042,  1562,    99,   635,  1563,   100,   840,
    1315,  1853,  2827,  2828,  3251,  1316,  1317,  2367,  3849,   101,
     586,   913,   914,  1392,  2443,   102,   580,   901,  1918,   103,
     570,   888,  1360,  1897,   104,   105,   106,   890,  3286,  4468,
    4631,   574,  1900,  1364,  3688,  4384,  4494,  4495,  4497,  4586,
    4587,  4680,  4755,  4777,  4771,  4780,  4781,  4784,  4789,  4790,
     816,  1024,   817,  4106,   818,   819,   820,  2876,  2877,  3362,
     821,  2878,   822,  3082,  1090,  1635,   564,   516,   646,  1025,
    2849,   824,  4185,  1050,  1289,  1108,  1109,   518,   519,   107,
     598,   956,  1448,  1438,  1447,  1972,  2483,  1976,  2485,  2486,
    3335,  2919,  3336,  2920,  1004,  1968,  1973,  2921,   959,  1961,
    1962,  1963,  1964,  2912,  1958,  1982,   108,   891,   523,  1366,
    1367,  2411,   109,   610,   110,  1353,  1890,  1891,  2396,  2840,
    2397,   111,   922,   923,   112,   868,  1624,  2380,  1103,  1053,
    1104,  1876,   871,  1327,   872,   873,  1342,  1336,  1345,  1339,
    4039,  3857,  3858,  2384,  1291,  1110,  1937,  2191,  3142,  1111,
    1867,  2376,  2377,  3603,  3860,  3270,  4045,  4046,   113,   138,
     526,   670,  1096,  1415,   114,   115,   116,   117,  1418,  1531,
    2453,  1532,  2321,  1533,  1534,  2060,  1944,  1782,  1783,  3239,
    1231,  1232,  2324,  2793,  2794,   942,  1036,  1550,  1542,   131,
     132,   133,   134,  1075,  1076,  2648,  3095,  3506,  3789,  3790,
    4006,  4190,  1544,  4082,  4594,  4721,  1545,  1546,  3370,  4084,
    4395,  4596,  4695,  1547,  2968,  3675,  4259,  4509,   118,  1026,
     620,  1529,  1524,  1526,  2056,  2526,   119,   120,   121
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4152
static const int yypact[] =
{
    5048,  2403,    79, -4152,  -122,   885, 58360,   896,  1459,  1459,
     587,  3257, -4152, -4152, -4152, -4152, -4152,  3442, -4152, 58360,
      79,  1183, -4152, 25840, -4152, -4152,  1214, -4152,    86,  1459,
      79,   766, -4152, 58360, -4152,  1013,  -165,    79, -4152, -4152,
   50716, -4152,   587, 58360, -4152, -4152, -4152, -4152, 50716,   169,
     231,   985,  1254, -4152, -4152, 58360,  2354, -4152,  -104,  1606,
    1485, -4152, -4152,  1203, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,  1508, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, 26480,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152,  1504, 58360,  1535, 58360,  1494, 58360, 48805, 58360,
   -4152,  1612, -4152, -4152,  1687, -4152, -4152,  1459,   587, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  1174, -4152, -4152,
    -122, -4152, -4152, -4152, -4152, -4152,  1835,  1663, -4152,  1696,
    1449, -4152, 48805, -4152, 58360, -4152, -4152, -4152,  1679,  1697,
    1737,    93, 12175,  1751,  1751,  1751,  1751,  1794,  1751, -4152,
    1751, 58360, -4152,  1751, -4152,  1751,  1459, -4152, -4152, -4152,
    1873, 36702, 58360,  1645,   186,  -113, 48805,  1492, 58360,  -122,
      65, -4152,  1799, -4152, -4152, -4152,  1459, -4152,  2003,  1854,
     239, 58360, -4152, -4152,  1459,   871,    -3,  1463, -4152, -4152,
    1611, -4152, 37339,   218, -4152, -4152, -4152,  1880, 28400,  6509,
    1611,  1602,  -122,  -123,  1610,  -122, -4152, -4152, 58360,  -122,
    1459,  1823, -4152, -4152,   267,   267,   267, -4152,   267, -4152,
     267, -4152,  -104,  1465, -4152, -4152,  1467, 58360, -4152,   346,
    1567, -4152,  1575,   842,  1178, -4152, -4152,  1482,   -50, -4152,
    1571, 41161, -4152, 58360, -4152, -4152, -4152, -4152,  1780, -4152,
   -4152, -4152,  1167, -4152,  1609,  1161, 58360,  1653, -4152, -4152,
   -4152, 25840,  1533, 58360,  1596, -4152, -4152, 25840, 25840,   205,
       0,    34, 58360, 58360, -4152, 45620,  1992, -4152,  2212, 41161,
    1663,  1663,  1663, -4152, -4152, -4152, 51353,    93,  1566,  1574,
    1579, 17447, -4152,  1584,  1588,  1597, 12175,  1622,  1627,  1635,
    1637,  1642,  1647,  1652,  1672,  1689,  1693,  1699,  1704,  1710,
    1715,  1715,  1715,  1721,  1726,  1729,  1731,   808,  1735, -4152,
    1755,  1762,  1770, -4152, -4152,  1775,  1781,  1783, -4152, -4152,
    1790,  1792,  1797, 12834,  1800,  1804,  1806, -4152, 22628,  1820,
    1826,  1830,  1843,  1851,  1857,  1860,  1867,  1883, -4152, -4152,
   12175,  1721, -4152, -4152,  1893, -4152,  1895,  1900,  1903,  1919,
    1924,  1928,  1941,  1943,  1945,  1957,  1971,  1976,  1981,  1989,
    2001,  2007,  2013,  1721, -4152,  1117,  2015,  2029,  1125,  2046,
   -4152,  2064, -4152,   287,  2071,  1715,  1721,  1721,  2075,  2101,
    2103,  2106,  2111,  2113, 17447, 17447, 17447, 12175, -4152, 58360,
   -4152, 58360,   541,  2747, -4152,  3089, 17447,   220, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152,  1695,  1676, -4152, -4152, -4152,
   -4152, -4152, -4152,  2134,  1604,  2307, 58360, 58360, 58360, 58360,
   58360, 58360, 45620, 48805,  1852, 58360, 46257, -4152,  1751,  1925,
    3875, 31595,  2127,  2322,  1831,  1715, -4152, -4152,   -91,   638,
     676,  2105, -4152, -4152,  2132,   697,  2428, -4152,   738,   119,
   -4152,   111,   802,   821, -4152, -4152, -4152, -4152, -4152, -4152,
    2241,  2443,  2168, -4152, -4152,   145, -4152, -4152, 58360, -4152,
   -4152, -4152, -4152,  2591,  2329, -4152, -4152, -4152,   180,  2798,
     212, 25840, -4152,  2196, 12175,  1371, -4152,  -210, -4152, -4152,
    2571, -4152, -4152, 46257, 25840, -4152, -4152, -4152, 23270, -4152,
   -4152,  2811, -4152,  2211, -4152, -4152,  1676,  3922, -4152,  2489,
    2127,  2501, -4152,  2686, -4152,  2513,  2418,     0,  2303, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2251,
    1880, -4152, -4152,   337,  2408,  2243,   359,   431, 40524,   991,
   48805,   474,   703, 29039, 41798,  2245, -4152, -4152, -4152,   117,
    2404, -4152,  2739, -4152, -4152,   695, -4152,  2262,  1615,   695,
   46894,  2639,   171, -4152,   313, -4152,  2724, -4152, -4152, -4152,
   -4152, -4152,  2389,  2374,  2419, -4152,   348,  2488, -4152,  -122,
   -4152,   835, -4152, -4152,  2405, -4152,  2639,   695,   171, -4152,
    2650,  2777,   306,  2744,  -174, -4152, -4152, -4152,   524,  2851,
   -4152,  2288, -4152, -4152, -4152, 25840, -4152, -4152, -4152,  2591,
   -4152, -4152, -4152, -4152,  2289, -4152,  2572,  2397, -4152, -4152,
      35, -4152,  2297,   -32,  2790, -4152, -4152,   196,   685,  1687,
    1663, -4152,  1322, 42435, -4152, -4152, -4152,  2823,  2838,  1715,
    2304, -4152, -4152, -4152, -4152, -4152,  2959, -4152, -4152,  2317,
    2855,  2855,  2855,  2970, -4152, -4152, -4152, 25840, -4152, -4152,
   -4152,  1161, -4152, -4152,  2490,  2356, -4152,  1653, 25840,  2730,
    2331, -4152, -4152,  2588, 12175, -4152, -4152, -4152,   230, -4152,
   -4152,  1899, -4152,  2932,  2544, -4152, -4152, -4152, -4152,  2814,
   -4152, -4152,  2959,   959, -4152,  2878,  2855,  2767, -4152,  2768,
    2361, -4152, 58360, 58360, 58360, 25840, -4152,  2367, -4152,  2348,
   -4152, 12175, 12175,   309,  2945,  3014,  3014,  3014,   541,  2400,
   12175, 12175, 12175, 12175, 12175, 12175, 12175, 12175, 12175, 12175,
   12175, 12175,   329,  2375, -4152, -4152, -4152,  2662, -4152,  2380,
   12175, 12175, -4152, 12175, 12175, 27120, -4152,  3536, 12175,   339,
    2882, 12175, 12175, 12175, 12175,  3319, 12175, 12175, 12175, 27120,
    3027,  2384, -4152,  2385,   330, 12175, 12175,   340, 12175, 12175,
   12175, 12175, 12175, -4152, -4152, 12175, 12175, 12175, 12175, 17447,
   12175, 12175, 12175, 12175, 12175, 12175,  2390, 12175,  3014,  3014,
   12175, 12175,  1102, -4152, -4152, 12175,  2320,  2320, -4152, 12175,
    8880, 12175, -4152, -4152, -4152, -4152, -4152,  2391, -4152, -4152,
   -4152, 27120,  3014,  3014, 12175, 12175, 12175,  2945,  2945,  2945,
     225,  2394,   612, 12175, 29678,  2392, -4152, -4152, -4152, -4152,
   12175, 12175, 12175, -4152, 17447, -4152, -4152,  1908, -4152, -4152,
   -4152, 13493, 17447, 17447,  2407, 17447, 17447, 17447, 17447, 17447,
    2780, 17447, 17447, 18106, 18765, 17447, 17447, 17447, 17447,   970,
    2945, 48805, 17447, 12175, -4152, -4152, 58360, -4152, -4152, -4152,
    2401,  2682,  1852, -4152,  2410, -4152,   -76,  2897, -4152, -4152,
   -4152,  2411, 25840, -4152,  2414, -4152,  2779, -4152, -4152,  2789,
    2792,  2793, -4152, -4152, -4152, -4152, -4152,  3018,  2795, -4152,
    -122,  2797, -4152, -4152, -4152, -4152,  2423, -4152, -4152, 19424,
   48805, -4152,  2432, -4152,  2922, -4152, -4152, -4152, -4152, -4152,
   -4152,  2539, -4152, -4152, -4152, -4152,  2446, -4152, 46257,  2446,
   -4152, -4152,  2446, -4152, -4152,  2446, 41161,    52,  4714, -4152,
   -4152, 58360, -4152, 58997, -4152, -4152, 23270,  -122, -4152,  2866,
   14152, -4152, -4152, -4152,  2817,   219,  2450, -4152, 25840, -4152,
     541, -4152,   105,   105,  2700,   944, 48805, -4152, -4152,   179,
    2451,  2533,  2455, -4152,  2545, 25840, 25840, -4152, -4152, -4152,
    2713, -4152,  -122,    -3, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2463,  2954,  2929,
    2487, 46257, 41161,   864, -4152, 58360, -4152,  1335, -4152, -4152,
   -4152,  2492, -4152, 12175, -4152, -4152, 58360, -4152, -4152, -4152,
   -4152, -4152,  3077, 12175, -4152, 46257,  1142, -4152,   897,   911,
     117, -4152, -4152, -4152, -4152, -4152, 58360, 51990,  2495,  9539,
    2618,  2900,  -122, 12175, -4152,  2514,  1663, 58360, 58360, 58360,
   25840, 58360, 25840, -4152,   -16,   -16, -4152, 43072, -4152, -4152,
   -4152, -4152,   695, 58360, 58360,   695, 41161, -4152,   171,    30,
   58360,   695, -4152,  2910,  2616, -4152, -4152, -4152,  2979, -4152,
   -4152,  2971,  2517, -4152,  3003, -4152, -4152,  2645,   171, -4152,
   -4152, 25840, -4152, -4152,   171, -4152,   171,   171, 12175,   695,
     695, -4152,   -82, -4152, -4152, -4152,  2677,  -123, -4152, -4152,
   -4152,  1134,   267,  2785, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,   997, -4152, -4152, -4152, -4152, -4152,
   -4152,   206, -4152, -4152, -4152, -4152, -4152, -4152, -4152,   764,
   -4152, -4152, -4152, -4152, -4152,  1653, 25840, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,    77, -4152, -4152,
   -4152,  1736,  3044, -4152, 48805,  2569,  1092,  1095,  2569,  2192,
    -122,  1068, -4152,  1068, -4152, -4152, -4152,  2818,  1420, 25840,
   -4152,  2538, -4152,  2791, 52627, 25840, -4152, -4152, -4152,   175,
    2546,  2543,   541,  4193, -4152, -4152, 25840, -4152, -4152, -4152,
   -4152,  2597, -4152, -4152, -4152, -4152,  2750, -4152, -4152, -4152,
     140,  1728,  3196, 45620, -4152,  2573,  2601,   137, 41161, -4152,
   -4152, -4152,  2554, -4152,  2713, -4152,  1475, 58360,  3013, 34147,
   -4152,   300,   530, -4152,  3014,  2575, -4152,  2576,  2579,  2583,
   12175,   188,   410,  1103,  1198,  1031,  1112,   320,  1123,   553,
   -4152,  1483,   614,   631,   702,   203, -4152,  2590,  2594, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2592, -4152, -4152,
   -4152,   727,   791,  1190,  1215,  2596,  2598, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  3024, -4152,  1545,
   -4152, -4152, -4152, -4152,  2599, -4152, -4152,  1223,   857,   859,
     253,  2609,  1547,   874,  1560,  1568,  2604, 27120, 58360,  3014,
    2614,  1318,  1339,  3014,  2617,   888,  1343,  1589,  1591,  1593,
    1347,  1349,   895,  1600,  2615,  1359,   916,   928,  1376,   933,
     937, -4152,  1396,  2619,  2620,   954,   278,  3014,  2621,   322,
    2622,  2624,  1417, 10198, 10857, 11516,   996,   968, -4152,  2627,
   -4152,  2385,  2630,  2632,   334,   174,  1500, -4152, 12175, -4152,
   -4152,  1002,  1308,  2674,   144,   911, -4152,  2751, 58360,  2242,
     157, -4152, -4152, -4152, -4152, -4152, -4152,   957, -4152,  2623,
   -4152,  2636,   993,  2640, 12175,  1069,  2640,  3179,  2509,  2509,
   17447,  3473,  2484, 12834,  1105, 12834,  1105,  2640,  2640,  2640,
   -4152, 17447,  2637, 17447, 17447, -4152,  2945,   541,  2638,  1151,
   58360, 25840,   -76, -4152, -4152, -4152, -4152,   117, 46257,   115,
   25840, 48805,  2641, -4152, -4152, -4152, -4152, -4152, -4152,  -122,
   -4152, -4152,  3912, 25840,  2709,  2734,  2735, -4152, 32234, -4152,
   -4152, -4152, -4152, 32234,   -25, -4152, 58360, -4152,  2732, -4152,
   -4152, -4152,  1091, 23910, 23910, -4152, 23910, -4152, -4152, -4152,
   -4152, -4152,   119, -4152, -4152, -4152, -4152,   227,   240,  3879,
    2673, -4152, -4152, -4152, -4152, 33510,   541, -4152, 25840, -4152,
    3067,   -14, 25840,  2655, -4152,  2666, -4152, -4152, -4152, -4152,
   -4152,  2542,  2776, -4152,  3312, -4152, 12175,  -122, -4152, 46257,
   46257, 25840, 25840,    83, -4152,  1448,  2670, -4152, -4152,  3321,
   -4152,  3922, 19424, 45620,  3119,  3142, -4152,  2688, 23910, 23910,
   23910, -4152, -4152, -4152, -4152, -4152,   917,   541, -4152,  2685,
   -4152, 47531, -4152,   541,   117,  2692,  2696, -4152, -4152,  3076,
     705, -4152,  2699,  2702, -4152,  2697,  2698,  2703, 53264, 12175,
   -4152,   897, -4152, -4152,   117, -4152, -4152, -4152, 17447,  1755,
   -4152,   541, -4152, -4152,  -122,  3161, -4152,   541,  2707, 58360,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152,  3187, -4152,  2892,   800, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,   695, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152,  2942,  2639,  2488,  2900, -4152,   695,   171, 25840,
     695,   695,   541, -4152, -4152, -4152, -4152, -4152,  2719, -4152,
    2782, -4152, -4152, -4152, -4152, 58360,  3112,  2883, -4152,  2726,
   -4152, -4152, 25840, -4152,  2737, -4152,  3182,  3337,  2639, -4152,
   -4152,  3185, 58360, 58360,  1663, 58360, 58360, -4152, -4152, -4152,
     117,   117,  3042, -4152,  -122,  2871,  2873,  2879,  2880,  2885,
    2919, -4152, -4152,  -122,  -122, -4152, -4152,   117, -4152,  1454,
   -4152, -4152, -4152, -4152,  -122,  -122,  -122,  -122,  3086,  -122,
    -122,  1619, -4152, -4152,   117,   117, -4152,  1383, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152,   259, -4152,  3831,   152, -4152,
    2965, -4152, -4152, -4152, 25840,  3211, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,  2762, -4152, -4152, 12175,
    3251,  3252,  3258,  3259,  3261,  3264,  3265,  3269,  3273,  3274,
    3280,  3281,  3283,  3293,  3294,  3296,  3297,  3301,  3303,  3305,
    3310,  2822, -4152, -4152, -4152, -4152, -4152, -4152,   155,   117,
     117,   117,   117, -4152,  2026, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, 41161, -4152, 48805,  3192,  2557,   745, -4152,
   -4152, 48805, -4152,   569,  3105,  3106,  3116, 58360,  2886, -4152,
   34147, -4152, -4152,  1134, -4152,  2832, 14811, -4152,  2841, -4152,
   12175, -4152, -4152, -4152,   907, 12175, 12175,  3340,  2808, -4152,
   48168, -4152, -4152, -4152, 12175, -4152, 12175, -4152, 12175, 12175,
   12175, 12175, 48168,  2808, 12175, -4152,  2847, -4152,  3253,  3254,
   -4152, -4152, -4152, -4152, 12175, -4152, 12175, 12175, -4152, 12175,
   12175, 12175, 12175, -4152, 12175, -4152, -4152, 17447, -4152,  2843,
    2853, -4152, -4152, -4152,  2854, -4152, 12175, -4152, -4152, -4152,
   -4152, -4152, -4152, 12175, -4152, 12175, -4152, 12175, 12175, -4152,
   12175, 12175, -4152, -4152, -4152, 15470, 12175, 12175,  2857, -4152,
   -4152, 12175, 12175, 12175, -4152, 12175,  1694, 12175,  1832, 12175,
    1911, 12175, -4152, 12175, -4152, -4152, -4152, -4152, 12175,  1814,
    2542,  3086,  2858, -4152,  1638, -4152, -4152,  2278, -4152,  1002,
    2859, -4152, -4152,  1335, -4152, -4152, 48805, 12175, -4152, -4152,
   -4152, -4152, -4152, -4152, 17447,   367,  2860, 17447, -4152,  3179,
    3319,  3319,  2131, 12175,  1069,  3179, 12175,  2861,  2862, -4152,
   12175, 58360, -4152, -4152, -4152, -4152, 48805, -4152, -4152, -4152,
   -4152,   115, -4152,  2414, -4152, -4152,  2655,   282,  3343,  2863,
   -4152, -4152, -4152, -4152, -4152, -4152,  1648, -4152, 41161,  3511,
   -4152,  2864, -4152,  2865,  2946,  2947,  2949, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2639,
    1448, -4152, -4152,  2869, -4152, -4152,  2588,  2964,  2893,  3249,
    3445, -4152, -4152, 58360, 17447, -4152,  3486,  2887,  2890,  3369,
    2896,   541, -4152,  2977, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152,   774, -4152, -4152,  2899,  2899, 21346, -4152, -4152,
   -4152, 58360, -4152, -4152,  3387, -4152, -4152,  3174, 46257, 41161,
    3359,  3362,  3363,  1080, -4152,   347, -4152,  1338,  3313,  2639,
   -4152,  3366, 49442, -4152, 34784, -4152, -4152, -4152, -4152,  1142,
    3004,  3007,  1412, -4152, -4152,  3314,  3143, -4152, -4152, -4152,
     117,   541, -4152,  2495,  9539,  2921, 30317, -4152,  1761, -4152,
      80, -4152, 43709,  3403, 43709, 43709, -4152,  3210, -4152, -4152,
    3161, -4152,  2673,   171, -4152, -4152,   -82,  2362, -4152, -4152,
    1099,  3324,  3327, -4152,  3200,  1127,  3200, -4152, -4152,  1099,
   27120,  1134,  2713, -4152,  3086,  3256, -4152, -4152, -4152, 58360,
   -4152,  1809, 58360,  2938,  -169,  5877, 47531, 44346, -4152, -4152,
   -4152, -4152,  3476, -4152,  3480,  1462, -4152, -4152,  2781,  1095,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152,  2192,  2781,  2781,  1068, -4152,
     122, -4152, -4152, -4152, -4152,  2721,   117,  3518,  3199,   117,
     117,  3518,   117,  3202,  3204,   117,   117,  3026,  3465,  3371,
     117,  3347,  3055,  2995,  3350,   117,  3214, -4152,  3062,  3477,
     117,   117,   117,   117,   117,  3518,  3218,  3573,   117,   117,
   -4152,   117,  3223,  3220,   173,  3224,  3225,   117,   117,   117,
     117,  1133, 58360,   117,   117,  3226,   117, -4152, -4152,  6678,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,   902, 24556, -4152,
   -4152, -4152, -4152,   117,   823,   308,  3053,   252,  2976, -4152,
     361,  2978, 53901,   541,  2980,  3086,  -122,  -122,  1761,  -122,
    3086,  -122,  -122,  -122,  -122,  -122,  -122,  -122,  3086,  3086,
    -122,   862,  1787,  -122,  3086,  4193,  -122,  2542,  2781,  2781,
    1728, -4152, -4152,  3250,  3422,   117, -4152,  2355, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  3074, -4152,   156,
     963,   963, -4152, 25840, 25840, 25840, -4152,  2985,  1134,  2673,
    1550,  2673,  2991, -4152, 12834,  1507, -4152,   541, 12175,   541,
    1779, -4152,  2987,  2987,  2987, -4152,  2988, -4152, -4152,  2987,
    3398,  2987,  3399,  2999,  3010,  1675,   450, -4152,  1680,  1841,
    1517,  3011,  3015,  1695, -4152, 12175, 12175,  1554,  1564,  -111,
    1009,  1021,   384, -4152,  1586,  2840, -4152, -4152,  1658,  1674,
    1682,  1744,  1028,  1757,  1684, 12834,  1767,   478,   391, -4152,
    1821,  1032,  1038,  1864, 12175,  1868, 12175,  1891, 12175,  1913,
    1929,  1935,  3021,  3021,   151, -4152,  3002, -4152, -4152, -4152,
    3012, -4152, -4152,  2251,  2278, -4152, -4152,  3023, -4152, -4152,
    3019,   541,  3025, -4152, -4152, 12175, -4152,   220, -4152, -4152,
   17447,   456,  3028, -4152,   541, -4152, -4152,  3029,  1695, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,  3237, -4152, -4152,  3662,
   32234, -4152, 58360,  1159,  3302,  3038, 35421, 41161, 41161, 41161,
    3034, 12175, -4152, -4152,  3315, 25840, -4152,  3453, -4152, -4152,
   -4152, -4152, -4152,  3036,  3040, -4152, -4152, -4152,  3179,  3415,
    3298, -4152, -4152,  2542, 58360, 46257, -4152,  1880, 27120, -4152,
    3045, -4152,  3045,  1538,  3048,  1700, -4152, -4152, -4152,  3047,
    2303,  1707, -4152, 19424,  3500,  2411, -4152, 41161, 41161, 41161,
   -4152,  2673,  2673,   146,  3104,  3458, -4152, -4152, -4152, -4152,
   54538, -4152, -4152, -4152, -4152,  1295, -4152,  3058,  3060,   176,
    3285, -4152, -4152, -4152, -4152,  9539, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2639, -4152,
   -4152, -4152, -4152, 43709, -4152, -4152, -4152, -4152, -4152,   695,
   -4152,  3554, -4152,  3070,  -220,  1308, -4152,  1555, -4152, -4152,
   -4152,  3462,  3200,  3200,  1099,  3466,   -75,  3075, -4152,   117,
   -4152,  3178, -4152,  1880, -4152, -4152, 12175,  3266,  3079, -4152,
   -4152,   207, -4152, -4152,  1073, 25840, 20066, -4152, -4152,  3341,
   -4152,  4683, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152,   259, -4152, -4152, 27760,  1663, -4152,   118, -4152,  1663,
   -4152,   175,   175,  1663, 55175, 27760,    79,  1761,  3086,  1751,
    3086, 55812,    79,  -122,  -122,  2305,   117, 56449,  3720,  3086,
   -4152, -4152,  3482,  1751,  3484,  1751,  1751, -4152, 48805, 58360,
   -4152,   117,  1351,  3086, 57086,  1761,  1761,  1751,    79, 27120,
    2139,  2727, -4152,  -122,    79, -4152, -4152, -4152, -4152, 25840,
      79,    79,  3198,  2848,  2924,  3278, -4152, -4152, -4152,  3086,
    2727, 55812, -4152, -4152,  7236, -4152, -4152, -4152, 20706, 58360,
    1464,   518, -4152,  3090, 38613,  3338, -4152, 12175, 12175,  3377,
   58360,  3378, -4152,  3676, 58360,  3741, -4152,   147, -4152, 55812,
   -4152,  3107, -4152,  3111, -4152,  3086, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,  3115, 58360,  2781,  2557, -4152, -4152,
   -4152, -4152,  -122, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, 34147,  2673,  3383, -4152, -4152,  3319, -4152,   541, 12175,
    1044, -4152, -4152,   197, -4152,  1070, -4152, -4152, -4152,  3117,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2996, -4152, -4152,
    2808, -4152, -4152, -4152,  3118,  3319,  3319, -4152, -4152,  3727,
    3290, 12175, 12175, -4152, 12175, -4152,  1023,  3125,  3151, -4152,
   -4152, -4152, -4152, 12175, -4152, -4152,  3319, -4152, 12175, -4152,
   -4152, 12175, -4152, 12175, 12175, -4152,  1939, -4152,  1952, -4152,
    1968, -4152, -4152, -4152,  2542,  3128,  3510, -4152, -4152, -4152,
    2542,  3322, -4152, -4152,  2542,  3086,  2492, -4152, -4152,   612,
   58360, -4152, -4152,  1740, -4152, -4152, 12175, -4152, 49442, -4152,
   -4152,  3607,  3512, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  3585,
   -4152, -4152, -4152, -4152,  -143,  -143,  -143, 16129,   541,  3644,
   -4152, -4152, -4152,  3453,  3529, -4152,    68, -4152, 58360,  3146,
    1418, -4152,  1772, -4152, -4152,  3150, -4152,  2251,  3152, -4152,
     117, 16129,  2899,  3320, -4152, -4152,  1538, 27120, 34784, -4152,
   -4152, 58360, -4152, 41161,  2688,  2688,  2688,  2639,  3596,  2964,
    2964, -4152, 30956, -4152, -4152,  3317, -4152, -4152, 36058, -4152,
   -4152, -4152, -4152, -4152, -4152, 30317, 53264, -4152, -4152,  2639,
   -4152,  -122,  1690,  1335,  2072, -4152,  1134, -4152,  1099,  3550,
    3553, -4152,  1099, -4152, -4152, 27120,  2673, 16129, -4152,  2251,
     541,  3159,  1563,  1073, -4152, -4152, -4152, -4152,  3439,  3446,
   58360, -4152, -4152, -4152, -4152,  3323, -4152, 25840,  3167,  3177,
    3183, -4152, -4152, -4152,   232, -4152,  5472, -4152, -4152, -4152,
   -4152,    79,  3189,  3577,  3581,   175, -4152,  1663, 27760, -4152,
   -4152,  1663,  1663, -4152, -4152, -4152,   102, 55812, -4152, -4152,
   27760, -4152, -4152, -4152,  3191, -4152, -4152,  2542, -4152, -4152,
   44346,  -122, -4152, -4152, -4152, -4152, -4152,  1751, 58360, -4152,
   27760, 27760, -4152,  3217,  -122, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, 27760, 55812,  3193, -4152,  1563, -4152,
   -4152, -4152, -4152, -4152,  2003, -4152, 55812, -4152, -4152, 55812,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  3201,  2902,  1530,
   -4152,  3195, -4152, 58360, -4152, -4152, 25840, -4152, -4152, -4152,
    6655, 58360, -4152, -4152, -4152, -4152, -4152,   541,  3319,  3766,
   -4152, -4152,  3353,  -122,  3713, -4152,  1807, -4152, -4152, -4152,
    3625,  3212, -4152, 53901,  1822, -4152, -4152,  2192, -4152, -4152,
   -4152, -4152,  3221,  3228,  3229,  2832, -4152,  3588,  1213,   541,
    3213,  3216,  3230,  3232,  3841,   167, -4152,  3842, 48168, -4152,
   -4152, -4152,  1827,  3508, -4152, -4152, -4152,  2987, -4152,  2988,
   -4152, -4152, -4152,  3818, -4152, -4152,  2987,  3639,   197, -4152,
   -4152,  3238, -4152,  3239,  3242, -4152,   267,  3243,  1979,  1040,
    1837,  3551,  3634, -4152,  3474, -4152,  1984,  1326,  1993,  2004,
    2024,  2032, -4152, -4152, -4152, -4152, -4152,  3260, -4152, -4152,
     483, -4152,  3248,   172,  1308, -4152, -4152,  1839, -4152, -4152,
    3888,  3522,   350,  3276,  3276,  3276,  1755,   541,  1861, -4152,
   -4152, -4152, -4152, -4152, -4152,  3657, -4152, -4152,  3255,  3312,
   58360, -4152,  3298, -4152,  2492, 27120, 16129,  3262,  3263, -4152,
     -32, -4152, -4152,  3267, -4152, -4152,  2688, -4152,  3863,  3698,
   -4152, -4152, 48805,  3268, -4152, -4152,  3579, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152,  2726,  2179,  3316,  1099,  1099,
    3370,  3328, 12175,  3277, -4152,  3383, -4152, -4152,    38,  2492,
   12175, -4152, -4152, -4152,  3411,  1014, -4152,  3447,  3275,  3282,
   -4152, -4152,  -122,  3284, -4152, -4152, 20706, -4152,  3914, -4152,
   -4152, 12175,  1663, -4152, -4152, -4152, -4152,  3286, -4152, -4152,
    3804,  3809, -4152, -4152,  2750, 58360, -4152,  3077, -4152, 27760,
    3191, -4152,   463,  3384, -4152, -4152, -4152, 27120, -4152, -4152,
   -4152, 58360, -4152, 25840, -4152, -4152,  3289, -4152,  2987,  2987,
    2987, -4152, -4152,  2987, -4152,  2988,  3533, -4152,  2988,  2988,
   -4152, -4152, -4152, -4152, -4152,   197,   470, -4152, -4152,   197,
   -4152, -4152, -4152,   110,   938,  2988, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152,  2987,  2987,  2987, -4152, -4152,   197,  2987,
   -4152,  2987, -4152,  2657, -4152,   163,   129,  2987,  2987,  2987,
    3117,  3288, -4152, -4152, -4152, -4152, -4152, -4152, 58360, -4152,
    1110, 58360,   150, -4152, -4152, -4152,  3086,  1872, 58360, 58360,
   58360, 44983, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, 48168, -4152,  3911,  3580,  3299, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, 12175, -4152, -4152, -4152, 12175,
   -4152, -4152,  3611,  3772, -4152, -4152, -4152, -4152, -4152, -4152,
    3309, -4152,  3086,  1338,  1338, -4152, -4152, -4152,  3810, -4152,
   -4152,  3393,  3404, -4152, -4152,  3405, -4152, -4152,   135,  1963,
   -4152, -4152, -4152, -4152, 16129,  3708,  3416, -4152, -4152,  3329,
    3360, -4152, -4152,   172, -4152, -4152, -4152, -4152, 12175, -4152,
    3383,  2305, -4152, 30956, -4152,   612, -4152,  3368, -4152, -4152,
   -4152,  3379,   541, 58360,  3588, -4152,    55,   172,  1563,  -122,
   -4152, -4152, -4152,  3331,  3335, -4152, -4152, -4152,   308, -4152,
   58360,  6655, -4152, -4152,   -32,  6678, -4152, -4152,  1137,   -92,
    2059,  3333,  3339, 58360,  3344,  3345, -4152,  3666, 27760, -4152,
   -4152, -4152, -4152, -4152, 25840,  6655,    79, -4152, -4152,  3191,
     774,  3346, 58360,  3660, -4152, -4152, -4152, -4152,  1362, -4152,
    3348,  1362,  1362, -4152,  2408, -4152,  3381,   197, -4152, -4152,
    3386, -4152, -4152, -4152,  1362,  3352,   197, -4152, -4152, -4152,
   -4152,  1362, -4152, 48805,  -122,  3103,  3994, -4152,  3408, -4152,
    3881,  3747,  3995, -4152,  2760, -4152,  3759,  3655,   117, -4152,
     197, -4152, -4152,  3911, -4152,   197,  3911,  1362,  1362, 58360,
    3496, -4152, 64730, -4152, -4152,  -104,  3397,  1888, -4152, -4152,
   -4152, -4152, -4152, -4152,  1904,  1563,  3375,  1906,  1916,  3853,
    3556,  3567, -4152, -4152,  3388,  3382,  1563,  2082, -4152, -4152,
   -4152,  3394, -4152, -4152,  3970, -4152, -4152, -4152, -4152,   328,
    3650,  3086,  3086,  3086,  -106,  1963, -4152, -4152,  3448, 25840,
   17447,  3503, 58360,  1646,  3222, -4152,  1241,  1563, 12175,  2639,
   44346, -4152, -4152, -4152, 12175,  3400, 12175,  3401,  1932, -4152,
   -4152, -4152,   175,   175, -4152,    55, -4152, -4152, -4152, -4152,
     192, 58360, 25840,  3377,  3575, -4152,  3077, -4152, -4152,  3341,
    3320, -4152,  2542,  3298, -4152, -4152, 58360, 58360,  1946, 58360,
   58360,  2709,  2734,  2735,  1787,  1787, -4152, -4152,  1464, -4152,
   -4152, -4152,  3800, -4152, -4152,  1954, -4152,    63,  3679, -4152,
   -4152, -4152, -4152,  1362, -4152,   267, -4152, -4152, -4152, -4152,
   -4152,   267, -4152, -4152, -4152, -4152,  3407, -4152, -4152, -4152,
    3691,  3444, -4152,  3412, -4152, -4152, -4152, 39250, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, 12175,  3897,  3434, 58360,   124,
   -4152, 66004, 66004, 58360, -4152, -4152, -4152, -4152,  5775, -4152,
   -4152,   -37, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152,  4034, -4152,  3409, -4152, -4152,  3423,  1466,
   -4152, -4152, 58360, 57723,   178, 58360, -4152,  3711,   143,  1580,
   -4152,  3907,  2251, -4152, -4152, 12175, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,  1378, -4152, -4152, 27120,
    2713, -4152,  2542, -4152,  1958, -4152, -4152, -4152,  3519,   117,
     117,  3943,  3944,   117,   117,   117,   117,  3437,  3222, -4152,
    3931, -4152, -4152, 12175, -4152, -4152,   541,  3678, -4152,  4023,
    1308,   541, 58360,   541, 58360, -4152,  3901,  3901, -4152, -4152,
   -4152,  6655,  3902,   252, -4152, -4152, -4152,   232,  3449,  2303,
   -4152,  1961,  1965,  1986, -4152,  1991,  2039, -4152, -4152, -4152,
   -4152,  1464,  3451, -4152, 58360, -4152, -4152, -4152,   277, -4152,
   -4152,  2049, -4152,  2056,  2684, -4152,  3407, -4152, -4152, -4152,
   -4152, -4152, -4152,   541, 12175, -4152, 12175,  3478, -4152, -4152,
    3908, 58360, -4152, -4152, -4152, -4152, 12175, -4152, 64730, 64730,
   -4152, -4152, -4152, -4152,  4069,   -32,  4042,  3725,  4045, -4152,
   -4152,  2060, -4152, -4152,  -122,   117, -4152,   178, -4152, -4152,
   -4152,   117,  1563,  3456,  3714, -4152,   143, -4152, -4152, -4152,
    1580, -4152, -4152, -4152,  2492,  1563, -4152, -4152,  3457, -4152,
     117, -4152,  3459, -4152, -4152, 58360,  3461, -4152,  -122,  -122,
     117,   117,  3110,  3110,  2542, 48805,  3582, -4152, -4152,   117,
    1563, 58360, -4152,  1096,  3847, -4152,  2065,  2083,  1313, -4152,
   -4152,  3454, -4152, -4152,  3676,  6655, -4152, -4152, -4152, -4152,
    3689, -4152,   178, -4152, -4152, -4152,  3298, -4152,   547,   547,
     197,   267,   197, -4152,  3475, -4152,  3479,   541,   541, -4152,
     209, -4152, -4152,  3880,  3971, 12175,   541, 61545,  3481, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, 65367, 12175, -4152,   -37,  4034, -4152,  3749, -4152,
    3751, -4152, 57723, -4152,  3086,  1136, -4152, 39887, -4152, -4152,
     960,  1136, -4152,  1136, -4152, -4152, 27120, 16129,  2305, -4152,
    3503, -4152,  3483, -4152, -4152,   603, -4152, -4152,  -122,  -122,
   -4152, -4152, -4152, -4152, -4152,  2114, -4152, 48805, -4152, -4152,
    4087,  4093,  3983,  4096,  1096, -4152,  -142, -4152, -4152, -4152,
    4100, -4152,  4101,  3505,  3506, -4152, -4152, -4152,  4013, 64730,
   -4152,  4007, -4152,   -32, -4152,   178, -4152,   143,  1580,  2129,
   -4152,  4157, -4152,   168,  3788,  3789, -4152, -4152, -4152, -4152,
     -99,  3539, 12175, 64730, -4152,  4008, -4152,  3933,  2084,  3877,
    3513, -4152,  3516,  1810,  4049, 66004, 66004, -4152, -4152, -4152,
   -4152, -4152,  3889,  4170, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,  2153, -4152, 16788, -4152,
   -4152, -4152, -4152, -4152, 48805, -4152,  3582, -4152,  3528,   267,
     267,  4134,   267, -4152,  4135,  4138,  -142, -4152, -4152, -4152,
   53901, 53901, -4152, -4152,  4035, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152,  3590,  4053, -4152, -4152,   127,
   -4152,   274, -4152,   541, 62182,  4139, 58360, -4152, -4152, -4152,
   -4152, 12175, -4152, 50079, 62819,  3535, -4152, -4152, -4152, -4152,
   -4152,  3718, -4152,  3483, -4152,  3540, -4152,  3179,  3222, -4152,
   -4152,  3542, -4152, -4152,   267, -4152,   267,   267, -4152,  3543,
    2156,  3722, -4152,  3454,   547,   547,  -122,  3938, -4152,   127,
   -4152, 12175, -4152,  4044,  3636, -4152,  3552, -4152, 64730,  2181,
   64730, -4152, -4152,  3989,  3555,   307, -4152,  3547, -4152,  3976,
    4023, -4152, 16788,  3559, -4152, 12175,  3560,  3563, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, 64730, -4152, -4152, -4152, -4152,
   -4152,   541,  4155, 64730, 58360, 59634,  3762, 63456,  4022, 58360,
    6655,  4025,  4026, -4152,  4179,  3847, -4152, -4152,   541, -4152,
   -4152, 64730, -4152,  3664, -4152, 60271, -4152,  2406, -4152,  3599,
   -4152, -4152,  4104,  2383, -4152,   267,  4002, -4152, -4152, -4152,
   64730, 64730, -4152, -4152, -4152, 37976, 12175, -4152, -4152, -4152,
   -4152, -4152,  1080, -4152,  3868,  3587, 60908, 64093, -4152, -4152,
   -4152, 32873, -4152, -4152, -4152,  4043, -4152,   541, -4152,    42,
   21986,  3750, 37976, -4152, -4152, -4152, -4152, -4152, -4152, 48805,
    2184, -4152, -4152, 27120, -4152, -4152, -4152, -4152, 25198,  3593,
   -4152,   117, -4152, 27120, -4152, -4152, 16129, -4152, -4152
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4152, -4152, -4152, -4152, -4152,    76, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,  1884, -4152, -4152, -4152, -4152, -4152,
    1576, -4152,   457, -2382,  -496,  3279, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,   735,  1701,  3231,
   -4152,   351, -4152,    -8, -4152, -4152, -4152, -2987,  -136,  -335,
   -4152, -4152,  1573,    27,  3219,  -328, -4112, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,   369,   366, -4152, -4152,
     199, -4152, -4152, -3237, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152,  -492,  -448,  1931, -4152, -4152, -4152,  4238, -4152,
    3687, -4152, -1806,  2357, -4152, -4152, -4152, -4152, -4152,  2426,
   -1742, -4152, -4152, -4152,  1460, -4152, -4152, -4152,  -353,   289,
   -4152,   290, -4152,   291, -4152,   293, -4152,   295,   296,   297,
     298, -4152,   299, -4152, -4152,  -440, -4152, -4152, -4152, -4152,
     302, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  -305, -4152,
   -4152,  -110, -4152, -4152,  -304,   310, -4152,  -237,   311, -4152,
     314, -4152,  -135, -4152,  -128, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  3227, -4152, -4152,
   -4152, -2083, -4152, -4152, -2455,  2736, -4152, -1869, -4152, -4152,
   -1941, -4152, -4152, -1650,  -682, -4152, -4152,  1269,   386, -4152,
   -1489, -1972, -1965, -4152, -4152, -4152, -2058, -2057,  -738,  2491,
   -1218, -2350, -4152, -4152, -4152, -4152,    53, -4152, -4152,   233,
    1688,  2204, -4152, -2547, -4152, -4152,   870, -4152, -4152,  1468,
     707,  1469, -4152,  1042,  2955, -1261, -4152, -4152, -4152, -4152,
   -4152, -4152,   -33,   284,  -133, -4152, -3838,   713, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4151, -4152, -4152, -4152,
    -344, -4152, -4152,  -235, -4152, -4152,  -299, -4152,   106, -2380,
   -4152, -4152, -4152, -4152,  2723, -1400, -4152,  3715, -4152,  -503,
   -4152,   430,  1717, -2732, -1990, -4152,  -934,  -923, -2976, -4152,
   -4152, -4152, -1985,   986,  1270, -4152,   664,  1713, -2444, -4152,
   -4152, -4152, -4152, -4152,  1272, -4152, -4152,   428, -4152,   422,
   -4152, -4152, -4152, -4152,  -301, -4152,    62, -3019, -4152, -4152,
   -4152, -2973,  1184,   617, -4152, -4152, -4152, -1855, -2998, -1370,
   -4152,   244, -2476, -2528,   590, -4152, -4152,   390, -3898, -4152,
   -4152,  -568, -2134, -2484,   -90, -4152, -4152,   403, -3416,  1845,
   -4152, -4152, -4152, -3414, -2220,  1594, -4152, -4152,  1148, -4152,
   -1196,  1152, -4152, -4152, -4152,  1156, -4152,   -15, -4152, -4152,
   -4152, -4152, -3128, -4152, -4152, -1573, -2759, -4152, -4152,  4377,
    4378, -1584, -2346, -3292,  -127,  -126, -4152, -4152, -4152,  2200,
   -2474,    57,    45,    50,  1698,  -924,   202,  1000, -2183, -4152,
     269, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  1764, -1294,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -2447, -2898, -4152,
   -4152, -4152, -4152,  1328, -4152, -4152, -4152, -2720, -2085, -2082,
   -2435,  3390, -4152, -4152, -4152, -4152, -4152,  3336, -2266, -3758,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2889,  1061, -4152,
   -4152,  1907, -4152, -4152, -4152, -4152, -4152, -4152, -4152,   472,
    1982, -4152, -4152, -4152, -4152,  2292, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,   -34, -4152, -4152, -4152,   715,  2806,
   -4152, -4152, -4152,    -9, -4152, -4152, -4152, -4152,  2502, -4152,
   -4152, -4152, -4152,  2829, -4152, -4152, -4152, -4152, -4152, -4152,
    1581, -4152,  2019, -4152, -1537, -4152, -4152,  1144, -1040,  1983,
    -615,  2110,   433, -4152,  3811, -4152, -4152, -4152, -1744, -2510,
   -4152,  3495, -1006, -2706,  2493,  -572, -1925,  1191,   148,  -381,
    1058,  4216, -4152, -1180, -1183, -4152, -4152,  -668, -4152, -4152,
   -4152, -4152, -4152,  2213,  2216,  -597, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  1626, -4152, -4152,
   -4152, -4152, -1230, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
    1512, -4152, -2097, -4152, -4152,  -487, -4152,  3292, -4152, -4152,
   -4152, -2355, -1995,  1922,  1101, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152,  1930, -4152, -1615, -4152, -2795, -4152, -4152, -4152,
   -4152, -4152,  2135, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -1733, -4152, -2031,   193, -4152,   374, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152,  -138,   941,  -134, -2862, -1120,  1640, -4152,
   -4152, -1325,  3325, -2362, -4152, -4152, -4152,  2115, -4152, -4152,
   -4152, -4152, -4152,   741, -3002,  2928, -4152, -4152, -3167,  -960,
   -2341,  -930, -4152, -1424,  1531,   572, -4152, -1918, -1131, -1671,
   -2985, -2433, -4152,  1393, -4152, -4152, -4152, -4152,  -252, -4152,
   -4152, -4152,   586,  2014, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,  -557,  -895, -4152, -4152,  2276,  -494,
   -4152,  3432, -4152, -4152,  3433, -4152, -4152, -4152, -4152,  3120,
    3091,  2078, -4152, -4152, -2357, -4152, -4152,  2043, -4152,   855,
    -939,   604,  1182, -4152, -4152,  1185, -3290, -4152, -4152,  3443,
   -4152, -4152, -4152,  1132, -4152,    22,  3878,  3470, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,  2876, -1081,  3803, -4152,
   -4152, -4152, -4152, -4152, -4152,  2474, -4152, -4152, -4152, -4152,
   -4152, -4152,  3043,  3915,  -598, -1350, -4152,  -761,  2496,  2016,
    -892, -4152, -4152, -4152, -4152,  3916, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152,  2665,   795, -4152, -4152,
   -4152, -4152,  3127, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152,  1236,  -157, -4152,    31,  -191, -4152,
     -60, -4152, -4152, -4152, -4152, -4152,  -261, -4152, -4152,  -265,
   -4152, -1039, -1428,   554, -1304, -2582, -4152,  1224,  3109, -3402,
    -694, -1209, -1213, -2726,    91, -4152, -4152,  3468,    87,   285,
    -471,    -6, -3224,  -103,  -576,  -623,  -735, -4152, -1852, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152,  2047, -4152, -4152,
   -4152,  1199, -4152,  3935, -4152,  2752,  1200,  3937, -1399,  2567,
    2063,  2066, -4152, -4152,  2073, -1986, -4152, -4152,   177, -4152,
    2643, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152,  3716,  -457,
    -453,  3130,  3948,  3626, -4152,  3203, -4152, -4152, -4152, -4152,
   -4152,   508, -4152, -1505,  2102, -1274, -1598, -4152, -4152,  2925,
     867, -4152,  1722,  -410,  -707, -4152, -4152,   504, -4152, -4152,
     318,  3962,  3629, -4152, -4152, -4152, -4152, -4152, -2788,  -914,
   -4152, -3483, -2848, -1753, -4152, -4152, -2216, -3094, -4152, -4152,
   -1056, -4152, -4152, -4152, -4152, -2086, -4152, -4152, -4152,     4,
    3928,  3929,  3930, -4152,  -814, -4152, -4152, -4152, -4152, -4152,
   -4152, -4152,  3523, -4152, -4152, -4152, -4152,  3524, -4152, -4152,
   -4152, -4152, -4152,  3525, -4152, -4152, -4152, -4152, -4152,  1617,
   -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152, -4152
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2772
static const yytype_int16 yytable[] =
{
     517,  1001,  1557,  1099,  1564,   894,  1744,  1032,  1770,  1433,
    1436,   558,  1769,   557,  1419,  1860,  1677,   565,  1052,  2199,
    1449,   576,  2462,  2463,   672,   648,  2136,   579,   584,  2322,
     954,   997,  2640,   515,   591,  2641,  1499,   594,  1640,  2007,
    1901,  1469,   591,  2006,  1172,  1721,  2195,  2196,  1974,   612,
     827,   828,   829,  2983,   831,   815,   833,  2874,  2842,   835,
    2133,   837,  3432,  3052,  1792,  1051,  1469,  3666,  1836,  1802,
    1803,  1800,  1872,  1806,  1807,  1808,  1809,  1463,  1811,  1812,
    1814,  1816,  1817,  1818,  1819,  1820,  2734,  3236,  2091,  1859,
    3125,   140,  3309,   637,  1124,  2823,  1286,  3345,  2741,  3493,
    1686,  1290,  3500,  1107,   869,  1500,  1007,  2799,   870,  1014,
    1088,  1091,  1910,  1569,   563,  2994,  2368,   640,  2898,   517,
    1520,   517,   647,   653,  1570,  2942,  2445,  2629,  2014,  2693,
    2694,  3006,  2176,  2994,  2994,   869,  2742,  1269,   658,   924,
    2938,  3433,  3015,  2573,  3821,  3594,  3019,  3877,  2027,  2104,
    2574,  3527,   642,  4038,   644,  2947,  2030,  2031,  3036,  3351,
    3508,  1236,  1237,  4009,  2956,  1349,  3992,  2069,  1381,  2358,
    3047,  3544,  3227,  3960,  1236,  1237,  3140,  1112,  1113,  1114,
    2561,  1905,   601,  1593,  3392,  3534,   524,  2188,  1340,  3809,
     636,  1236,  1237,  3056,  2309,  3163,  3164,  1227,  1228,  1229,
    3535,  3170,  2458,  3172,  3558,   571,   575,  1537,  2711,  1270,
    1566,  4656,  1916,   583,  3536,  2690,  2998,  2999,   869,  3534,
    1236,  1237,  2691,  1543,  1551,   963,   944,  4334,  1343,   963,
     944,  2795,  3138,  2681,  3535, -1567,   669,  1501,  2569,  1349,
    2644,  -935,  1236,  1237,   604,  2994,  2994, -2723,  3536,  3387,
    3168,  2929,  4070,  3402,  3700,  4271,  1873,   876,  4318,   963,
     944,  3331,  4334,  1590,  1092,  4285,  4215,  2427,  3898, -2091,
    1236,  1237,  1358,  1566,  1996, -1567,   898,  3189,  3390,  4506,
    2515,  3718,  2408,  1044,   886,  1429,  2104, -2647,  1566,  3406,
    3228,  3931,  4071,  1833,  1271,  1236,  1237,  1527,  2974, -2653,
    3319,  4603,  1362,  3353,  -572,  3613,  1020,  4607,  1452, -1607,
    1008,  4092,   910,  1350,   659,  3602,  3393,  1236,  1237,  -573,
    2523,  4567,  1643,  4775,  4571,  4309,  1212,   572,  3131,  3132,
     683,  3953,  3958,  3087,  1997,  3959,  3875,  1236,  1237,  1236,
    1237,  3057,  1643,  1643,  1293,  3365,  2215,  3153,  2372,  3155,
    4279,  1236,  1237,  1643,  3969,   139, -2723,  3297,   122,  2093,
     593,  3991,  1509,  4392,   135,  2036,  2087,  4533,  1094,  2385,
    1184,  2386,  1470,  2455,  3096,   869,   275,  3343,   277,  1582,
    1583,  2064,  1504,   621,  1236,  1237,  1474,  1350,  4584,   684,
     521, -2571,  1203,  2790,   522,  3851,  -476,  3091,  4711,  1097,
    1098,  1236,  1237,  2182, -2572,  1219,  1220,  4335,  1236,  1237,
    2065,   275,  3092,   277,  1604,  4408,  2134,  3851,  4319,  2409,
    4712,  1480,  4585,  4026,  1626,   911,  1471,  1236,  1237,   676,
    2218,  4088,  4533,  2450,  2451,  2452,  3344,  3097,  3900,  2550,
    2135,   582,  4335,   139,  1510,  2105,  2037,  3901,  1095,   136,
    2310,  1467,  1376,  3359,  2373,  3366,   660,  1644,   867,  1710,
    2892,  1685,  1711,   879,  4286,  1541,  1549,  1236,  1237,  3613,
    3177,  3773,  1874,  1236,  1237,  1172,  4057,  1666,  1729,  2286,
     124,  2825,  4681,  2054,  3088,  2955,  4310,  3002,  1733,   867,
    1021,  1022,  3534,  1494,   663,  1236,  1237,  4512,  2917,  1528,
    2891,  1969,   912,  2087,  3227, -2121, -2571,  3535,  1363,  1009,
    1213,  1214,  2428,  1045,  1628, -1607,  3304,  2358,  4776, -2572,
    1998,  3536,   685,  4405,  3614,  4608,   647, -2274,   653,  3317,
    3318,  1238,   963,  3954,  1239,  3354,  3394,  1556,  3320,  4604,
    1046,  4506,  4216,  4128,  1832,   653,  1273,  1236,  1237,  1834,
     878,   622,  4132,  3657,   899,   647,   874,  3661,  1236,  1237,
     647,  1238,   884,  4093,  1239,  1417, -2647,  4287,  4519,  2480,
    1236,  1237,   867,  1093,  4047,   902,  4148,   887,  2359,  1797,
    2009,  4150,  2105,  2012,  3392,  3902,   647,  2015,  3852,  2018,
    1238,  3624,   955,  1239,  4320,   139,  3378,  3701,  2573, -2300,
    2091,  4520,  1016,  1868,  2059,  2574,  2964,   666,  1359,  1272,
    3852,  1875,  1238,  1430,  1836,  1239,  1538,  2033,  2034,   877,
    3229,  1035,  3228,  2410,  1341,  1861,  2572,  2339,  1860,  2693,
    2694,  1236,  1237,  1569,  2645,   647,  3694,  1057,  2342,  2629,
    1238,  2345, -2419,  1239,  1570,  1654,  1655, -1567,  1236,  1237,
     517,  2994, -1607,  3669,  3689,   637,   885,  1086,  1805,  1605,
    1453,   637,   637,  3894,  4072,  1238,  1100,  1057,  1239,   647,
    4266,  1709,  3390,   647,   602,  1826,  1935,  3208,  2502,  1722,
    1119,  1724,  3520,  1073,  3703,  2176,  1569,  1238,  3614,   666,
    1239,  2429,   666,  1737,  1738,  1739,  1017,  1570,  2689,  3000,
    1954,  1743,  1859,  2994,  3711,  3712,  2930,  1238,  3237,  1238,
    1239,  2164,  1239,  3152,  3853,  2690,  3395,  2899,  3715,  1236,
    1237,  1238,  2691,  1074,  1239,  4657,   573,  3961,  1505,   867,
    1285,  4077,  1173,   838,  1344,  1839,   605,  3106,  -935,  3133,
    1606,  2067,  3111,  2029,  1236,  1237,  3846,   603,  2336,  3058,
    3119,  3120,  1083,   892,  1238,  1917,  3127,  1239,  3537,  2189,
    1906,   905,  3810,  3634,  2700,  3332,  3141, -2653,  2069,  2190,
    1107,  1238,  1606,  3956,  1239,  4344,  2946,  1539,  1238,  3001,
    2415,  1239,  3544,  3989,  3160,  1240,  3519,  1018,  2701,  1936,
    3526,  4063,  3537,  1233,   926,  1235, -2653,  1238,  1240,  3230,
    1239,  -572,  3509,  4355,  2325,  4010, -1607,  3930,  1236,  1237,
    3367,  1903,  4732,  2232,  1850,  1240,  -573,  2216,  3160, -2771,
    1278,   517,  1280,  1281,  1057,   517,   647,   647,  1923,   517,
     647,  2311,  1023, -2121,  2043,  1325,  1051,  1238,  4419,  2092,
    1239,  4380,  4447,  1238,  1240,  1434,  1239,  1437,  4196,  1475,
    1440,  1445,  1215,  2013,  1279, -2274, -1607, -2571,  1283,  4206,
    2233,  1506,  1288,  3888,  3889,  1238,  1240,  1466,  1239,  2847,
   -2572,  2093,  1354,  3855,  1236,  1237,  1236,  1237,  4059,  3854,
    4409,  1777,  1778,  2181,  1481,   637,  1507,  1606, -2571,  3248,
    4245,  1236,  1237,  -476,  1240,  3855,  1929,   647,   637,  2996,
    1051, -2572,   637,  4610,  1514,  1236,  1237,  2961,  1712,  1777,
    2251,  1713,  1236,  1237,  2826,  4521,  3773,  1238,  3388,  1240,
    1239,  3349,  3350,  2874,  1236,  1237,  2359, -2300,  1238,  3334,
    4569,  1239,  3289,  1236,  1237,  2287,  3707,  4313,  4314,  2064,
    1238,  1240,   647,  1239,   647,  1236,  1237,   647,   647,  3631,
    1236,  1237,  3229,  1989,  1236,  1237,  2182,  2206,  2427,  3486,
    3652,  1240, -2491,  1240,   647,  2061,  2062,  2063,  2066,  2696,
   -2419,  1236,  1237,  1452,  3122,  1240,  3637,  2224,  2290,  2291,
   -1929,  3710,  1365,  3932,  1378,  1236,  1237,  3109,  3856,  2640,
    2307,  2308,  2641,  3656,  3665,  1384,  4526,  3660,  4528,  1390,
   -2121,  1238,  2044,  2071,  1239,  1821,  2045,   906,  1240,   637,
    4522,  2334,  3143,  1236,  1237,  2469, -2630,  1318,  1238,  3816,
    3035,  1239, -2274,  2804,  2805,  1240,  1236,  1237,  3819,  2573,
    4597,  4068,  1240,  2258,  3006,  2484,  2574,  1565,  1236,  1237,
    3193,  3194,  4523,  1555,  3036,  1236,  1237,  3210,  3211,  1236,
    1237,  1240,  1107,  3697, -2634,  1236,  1237,  1236,  1237,  1102,
    2091,   637,  1495,  2498,  2007,  3537,  2007,  2007,  1938,  3571,
    2934,  2935,   637,  3168,  2755, -2633,   666,  3312,   666,  2693,
    2694,  2572,  4442,  3561,  2629,  2473,  3955,  3770,  2368,  1238,
   -1929,  1240,  1239,  1469, -2300,  2104,  4264,  1240,  2528,  1780,
    3409,  1274,  3411,  2357,  2833,  1538,  1629,  1630,  1631,  1636,
    4516,  3426,  3245,  3246,  1238,  1643, -2631,  1239,  2455,  1240,
    1236,  1237,  2496,  1965,  2713,  3439,   141,  3653,  1469,  1236,
    1237,  1787,  3450,  3452,  3209,  2501, -2491, -2419,  2504,  2505,
    1236,  1237,  1253,  1271,  2329,  3469,  3471,  3473,  2576,  1173,
    2697,  3474,  3452,  2939,  2803,  2700,  1959,  2862,  1585,  1429,
    2401,  1515,  4300,  1173,  1913,  2690,   869,   907,  1825,  2456,
    2184,  1240,  2691,  1060,  3530,  4458,  2494,  4562,  1238,  2701,
   -2632,  1239,  1240,  3144,  2423,  2424,  2207,  3516,  4465,  3085,
    1435,  2176,  2322,   275,  1240,   277,  1966,  2301,  2689, -2637,
    3530,  1394,  3946,  2428,  3371,  3947,  1634,  1236,  1237,  1914,
    2226,   520,  1074,  4488,  3695,  1771,  1282,  1862,  3698,  3699,
    2808,  2809,   525,  4598,  1770,  1822,  2344,  1061,   647,  1593,
    3123,  2858,  1236,  1237,  1569,  3966,  3967,  3968,  1861,  3086,
    1236,  1237,  2337,  3971,  1238,  1570,  1238,  1239,  1823,  1239,
    1757,  3997,  3944,  3945,  1253,  1240,  2346,  4490,  4565,  3168,
    3900,  1238,  3168,  3168,  1239,   647,  1539,  1781,  4491,  3901,
    1829,  2229,  1240,  1915,  3939,  1238,  1467,  2802,  1239,  3168,
    3066,  4525,  1238,  2361,  1939,  1239,   637,  2812,  2230,  3314,
    3315,  3316,   559,  3970,  1238, -2630,  4614,  1239, -1929,  3990,
    3993,  3995,  3996,  1238,  2610,  2057,  1239,  1770, -2771,  3283,
    2698,  2959,  2087,  1173,   647,  1238, -1930,  3592,  1239,  1062,
    1238,  4627,  4627,  1239,  1238,  1453,  3372,  1239,  2330, -1929,
    1960,  2093,   647, -2634,  2414,  1236,  1237,  3531,  1256,  2087,
     647,  1238,  2474,  1240,  1239,  1886,  3408,  1889,  1942,  3922,
     637,  2092,  2613,  2364, -2633,  1238,  1236,  1237,  1239,  2231,
    1236,  1237,   637,  3531,  1236,  1237,  1236,  1237,  1240,  3124,
     647,  1496,  2512,  1152,  3442,  3443,  1236,  1237,  3572,   637,
     637,  1124,  2429,  1238,  2238,  2057,  1239,  4480,  4481,  2513,
    4386,  2105,  4387,  1236,  1237, -2631,  1238,   666,  1068,  1239,
     139,  2952,  4385,  1967,  3813,   647,   647,  3902,  1238,  1941,
    2104,  1239,  1824,  1236,  1237,  1238,  3532,  1949,  1239,  1238,
    1950,   577,  1239,  1875,  2602,  1238, -1930,  1238,  1239,   647,
    1239,  4705,  1240,  4707,  1236,  1237,  2181,  1833,  3400,  3400,
    1970,   955,  3542,  3145,  1893, -1929,  3933,  1390,  2239,  2695,
    1256,   517,   517,   517,   637,   517,   637,  2495,  1272, -2632,
      13,  2008,  2182,  1153,  1833,  3067,  4725,  2010,   517,  2696,
     647,  2073,  4555,  3483,   517,  2718,   869,  1390, -2637,   666,
    2446,  4398,  4492,  1943,  1990,  1991,  1992,  1430,  1994,  2318,
    1238,  1258,  1259,  1239,   581,   637,  4354, -1929,  1240,  1238,
    1240,  2011,  1239,  4756,  4757,  2007,  4797,  2017,  3373,  3921,
    1238,  4577,  2572,  1239,  2249,  1240,  2250,  1236,  1237,  1955,
     867,  4326,  4277,  4278,  1236,  1237,  4696,  4697,  4500,  1240,
    2083,  2254,  4327,  1063,  1236,  1237,  1240,  2894,  4091,  1986,
    2331,  2915,  1069,  3435,   606,  2266,  3130,  1956,  1240, -1902,
     637,  1993,  2273,  1995,  2121,  3962,  2332,  1240,  3963,  3074,
    2682,  2532,  4280,  3274,  3275,  3276,  2016,    44,   647,  1240,
      25,  1236,  1237,  2277,  1240,  4501,  4248,  1238,  1240,  1860,
    1239,  1236,  1237,   637,  3671,  2278,  2043, -2723,  2129,   637,
    2280,  1622,  2028,  4023,  2281,  1240,  2986,  4004,  2953,  1064,
     637,  1065,  1238,  1236,  1237,  1239,   624,  1051,   992,  1240,
    1238,  2285,  3003,  1239,   592,  3374,  1623,   647,   627,  3436,
   -1902,  2043,   647,   568,  2433,  2303,  2895,  2087,   880,  3154,
    3244,  1119,  3533,  2205, -1930,   992,  3358,  1240,  3618,  1261,
    1262,  1263,  1264,  1265,  1266,  1267,  1268,  2068,  2689,   625,
    1240,  1371,  2302,  1859,  1372,  1770,  3484,  2319,  3533,  3300,
    4493,  2511,  1240,   608,  4334, -1930,  3191,  2103,  2517,  1240,
    -212,  4356,   638,  1240,  2122,  1236,  1237,  4022,  3192,  1240,
    2123,  1240,  1204,  3619,  2084,  3203,  2131,  2222,  1273,  3213,
    1208,  1236,  1237,  1834,  3817,  3214, -2723,  3829,  2087,  1236,
    1237,  4502,  3672,   641,  3084,  1238,  2105,  1957,  1239,   643,
    4268,  1236,  1237,  1290,  2994,  3636,  2987,   881,  4247,  3437,
    1834,  1173,  2259,  2379,  4347,  4351,  1238,   569,  3032,  1239,
    1238,  1456,  3294,  1239,  1238,    58,  1238,  1239,  2362,  1239,
    2807,  4559,  2738,  4560,  1240,  2847,  1238,  2743,  1628,  1239,
    4357,  4328,  1833,  1240,  2044,  1265,  1266,  1267,  1268,  2219,
    2749,  1236,  1237,  1238,  1240,  4005,  1239,   609,  2223,  1145,
    1146,  2134,  1205,  4149,  1236,  1237,  4151,  3476,    38,  2225,
    1209, -1930,  2328,  1238,  1236,  1237,  1239,   656,   882,  2044,
    1457,  3269,  4090,  2045,  2764,  2135,  1236,  1237,   963,   944,
    2512,  1373,  1107,   678,  1238,  3511,  2350,  1239,  2220,    44,
    2070,  2092,  2169,   275,  2351,   277,  1628,  2513,  2969,  1458,
     834,   124,  3400,  1833,  2352,   637,  2886,  1236,  1237,  2514,
     867,  1240,   647, -1930,   637,   647,  1770,   663,  1236,  1237,
    3448,  2322,  2970,  1218,  4335,  2909,  2240,   637,  2468,  1236,
    1237,  2782,  1325,   669,  2221,  1273,  1240,  1325,  1236,  1237,
    2375,  3180,  2252,  2818,  1240,  4119,  2910,  2383,  2383,  3803,
    2383,  2241,  4347,  1051,  4241,  4242,  4351,  2783,  3516,  2248,
    3948,  1236,  1237,  3951,  3952,  1236,  1237,  1238,  4055,   647,
    1239,  2922,   637,   929,  1238,  2774,   637,  1239,  4243,   671,
    3964,  4227,  2911,  1334,  1238,   674,  3035,  1239,  1236,  1237,
    2515,   673,  4076,   647,   647,   637,   637,   719,   954,  2696,
     680,  4228,  2353,   992,  4031,    54,  1173,   647,  1236,  1237,
    1236,  1237,  2383,  2383,  2383,  2433,   666,  1974,   681,  2994,
    2994,  1238,  2181,  2434,  1239,   647,  1236,  1237,  3034,  2695,
    2350,  1238,  1236,  1237,  1239,  2923,  1236,  1237,  3328,  1240,
    1608,  4622,   955,  4120,  2382,  2382,  1419,  2382,  3337,  1236,
    1237,   588,  2087,  1238,  2262,  2252,  1239,    58,   682,   588,
    1240,   724,  3835,  2491,  1240,  1236,  1237,   825,  1240,  2406,
    1240,  2143,  2144,  1365,   992,  2263,  1236,  1237,  1469,  2267,
    1240,  1236,  1237,  2271,  2422,  2272,  4121,  2157,  1834,   830,
    1236,  1237,  1384,  2426,   521,  2276,   841,  1240,   522,  3654,
    3357,  1236,  1237,   637,  2994,  2433,  2516,   875,   930,  2382,
    2382,  2382,  2279,  2776,  3588,  1459,  3528,  1240,  3590,  2510,
    2568,  1236,  1237,  4347,  4351,  1238,   637,  3340,  1239,  1236,
    1237,   889,  2282,   895,  2924,   897,   517,   517,  1240,  2534,
     517,  1238,  2435,  2436,  1239,  3563,  3564,  -578,  1513,  1238,
     628,  2487,  1239,  2294,  1518,  1519,  1236,  1237,   915,  1834,
     737,  1238,  2683,  1609,  1239, -1813,  3577,  1610,  2699,  2530,
    2531,  2170,  1349,  3585,  1770,  1793,  2517,  1833,  1611,  1236,
    1237,  1236,  1237,  2437,   675,   931,   917,  1573,  1006,   679,
    2169,  2549,  2778,  3702,  3924,  3925,  1013,  1434,   637,   907,
    2503,  1033,   832,  4212,  4213,  4214,  1040,   836,  1034,  1434,
    3296,  1238, -1813,  2925,  1239,  2159,  2160,   628,  2200,  2227,
    2228,  1240,  1770,  2522,  1238,   878,  2959,  1239,  1240,  2810,
    4186,  3716,  2435,  2436,  1238,   903,  2313,  1239,  1240,   753,
   -1813,  2539,  3720,  3157,  1059,  3722,  1238,  2171,  1067,  1239,
    2546,  2547,  1087,  3181,  1460,  1048,  4040,   647, -1607,   647,
    1074,  2551,  2552,  2553,  2554,   647,  2562,  2563,  1084,  1861,
    1105,  2707, -1902,  3303,  2710,  1240,  1461,  1238,  1236,  1237,
    1239,  2245,  1273,  2253,  1273,  1240,  1869, -1813,  1238,  1870,
    3187,  1239,  1871,  2712,   647,  3347,  2255,  1273,  1106,  1238,
    3188,  1121,  1239,  2800,  2256,  1727,   647,  1240,  1238,  1122,
    1612,  1239,  1027,  1028,  1123,  1029, -1607,  1030,  1462,  1125,
    1350,  1023,  3195,  1126,  2346,  2268,  1273,  2269,  1273,  2270,
    1273,  1238,  1127,  2822,  1239,  1238,  2274,  1273,  1239,  1236,
    1237,  1107,  1107,  1107,  1936,  1936,  1936,  1276,   992,  2555,
    2087, -1607,  3449,  1097,  1098,  2564,  2565,  1130,  1238,  1794,
    1253,  1239,  1131,  4041,  4042,  2511,  3706, -1607,  4043,  4044,
    1132,   929,  1133, -1607,  2792,  1273,  4362,  1134,  1238,  1240,
    1238,  1239,  1135,  1239,  2831,  2832,  1329,  1136,  2094,  4186,
    4186,  1051,  1051,  1051,  3199,  1240,  1238, -1607,  3243,  1239,
     647,  2172,  1238,  1240, -1607,  1239,  1238,  1137,  1613,  1239,
    3200,  3176,  2228,  2556, -1607,  1240,  3179,  1273,  3201,  1238,
    3205,  1273,  1239,  4706,  1138,  2819, -1607,  3159,  1139,  2926,
     647, -1607,  1273,  1834,  1140,  1238,  3306,  3307,  1239,  1141,
   -1607,  3626,  2557,  3310,  3311,  1142,  1238,   963,   944,  1239,
    1143,  1238,   647,  2007,  1239,   782,  1147,  4020,  3782,  3650,
    1238,  1149,  2104,  1239,  1150,  1240,  1151,  1330,   613,  2170,
    1154,  1238,   992,  1331,  1239,  1833,  3596,  1273,  1240,  2695,
    3202,   932,   933,   934,   935,   936,   937,  2856,  1240,  1469,
    1155,  1238,  1770,  3204,  1239,   122,  3300,  1156,  2095,  1238,
    1240,   938,  1239,  3207,  2512,  1157,   930, -1607,  3621,  3622,
    1158,  2879,  2558,  2468,  1434,  2882,  1159,  1332,  1160,  2169,
     614,  2513,   647,   647,  3154,  1161,  1238,  1162,  1691,  1239,
   -1607,  1240,  1163,  2514,  1333,  1166,  2903,  3420,  2905,  1167,
   -1607,  1168,  1240,  3787,  3788,  2171,  4186,  4186,  4630,  1238,
    4629,  1238,  1239,  1240,  1239,  1174,  1256,  3212,  3795,  3796,
     955,  1175,  1240,  3806,  3814,  1176,  2008,  1277,  2008,  2008,
    1335,  1795, -1607,  3830,  1273,  3847,  1273,  2322,  1177,  4256,
    4257,  1482,  3391,   931,  1770,  1240,  1178,  1796,  3448,  1240,
    3403,  2559,  1179,  2555,  1771,  1180,   615,  3863,  3864,   123,
    3215, -1902,  1181,  2967,  3217,  3410,   517,  3826,  4013,  2565,
     647,   647,  1240,  1483,  2515,  1294,  4550,   124,  1182,  3428,
    2685,  3430,  3431, -1607,  4191,  4192,  1326,  3219,  1185,  2902,
    1186,  1695,  1240,  3444,  1240,  1187,  1606,  3886,  1188,  2972,
    4194,  4195,  4198,  4195,  4741,  4742,   992, -1607,  1238,  3221,
    1240,  1239,  4199,  4195,  1189,  4186,  1240,  2556, -2766,  1190,
    1240,  4126,  4127,  1191,  2104,  3222,  2096,  1484,  4255,  3311,
    4186,  3223,  1485,  1240,  4130,  3582,  1192,  2097,  1193,  2087,
    1194,  4133,  4274,  4195,  2098,  4361,  2557,   125,  3583,  1240,
    4283,  4284,  1195, -1607,  4364,  4365,  3068,  4399,  3622,  2172,
    1240,  4400,  4195,  4107,  3584,  1240,  1196,  4152,  4153,  1258,
    1259,  1197,  3083,  1253,  1240,  3828,  1198,  1647,  1648,  1649,
    3834,  2169,  4401,  4195,  1199,  1240,  3104,  4403,  4195,  3836,
    2516,  1834,  4618,  2074,  1667,  1696,  1200,  4186,  1253,  1699,
    3837,  2941,  1201,  2143,  2144,  1240,  1700,  2075,  1202, -1607,
    1206,  4107,  1670,  1240,  2536,  2537,  2558,  -678,  2105,  2157,
    3838,  4186, -1607,  2680,  1207,  3972,  1730,  1337,  3839,  1734,
    1936,  2548,   126,  4186,  4186,  4404,  4195,   637,   637,   637,
    1240,  1210, -1607,  2099, -1607,  4410,  4411,  3570,  2566,  2567,
    1753,  1754,  4412,  4411,  1758,  4095,  4451,  4452,  2170,  1211,
    2517,  4498,  3311,  1240,  1833,  1240,  1217,  2560, -1607, -1607,
    1221,  3973, -1607, -1607,  1772,  1773,  1671,  1051,  4207,  4499,
    3311,  3974,  2685,  3107,  3108,  1486,  3110,  1701,  3112,  3113,
    3114,  3115,  3116,  3117,  3118,  2559,  1222,  3121,  1223,  3597,
    3126,  1224,  4186,  3129,  1253,  1672,  1225,   954,  1226,   616,
    4575,  4576,  4186,  2676,  2677,  2678,  2679,  1261,  1262,  1263,
    1264,  1265,  1266,  1267,  1268,  4601,  3622,  -671,  3972,  1275,
    3975,   617,  1670,  4737,  3148,  3149,  3150,  1328,  2100,   932,
     933,  2087,   935,  3003,   937,  1703,  1338,  2159,  2160,  4632,
    4633,  1608,  4693,  3513,  1670,  3004,  4186,  1346,  4186,   938,
    1487,  1347,  1240,   127,  1325,  1348,  2375,   618,  1355,  1256,
    1354,   647,   647,   647,  3973,  1673,  2076,  4032,  4033,   637,
    4787,  4788,  1357,  4186,  3974,  2722,  1760,  1761,  3640,  3641,
    1361,  4186,  1369,  4186,  1256,  4186,  1671,  2555,  2856,   647,
    3451,  1379,  1771,  1391,  3976,  3604,  3605,  2858,  1393,  4186,
    2275,  2723,  4798,  4186,  1409,  4017,  4018,  1173,  1671,  1411,
    2105,   647,   647,   647,  1488,  1672,   619,  1412,  4186,  4186,
     275,  1413,   277,  3975,  3327,   992,   128,  3861,  3862,  1414,
    1417,  1420,   587,  1425,  4186,  4186,  1426,  1672,  1446,  4186,
    1450,  1670,  2077,  1451,  1674,  1243,  1244,  1455,  1467,  -671,
    2170,  2556,  -854,  1476,   528,  1477,  1833,  2008,  2724,  1478,
   -2766,  2725,  1479,  3709,  1609,  2822,  3282,  2078,  1610,  2726,
    1502,  1498,  1503,  1508,  1516,  1517,  1522,  1704,  1525,  1611,
    2557,  1523,  1245,  1530,  1535,  1673,  1566,  1572,  2727,   129,
    1256,  4270,  2134,  1706,  1246,  1576,  1574,  3811,  -671,   637,
    3083,  2560,  1579,  1580,  1584,  1671,  1588,  1673,  2555,  1589,
    1834,  3468,  1258,  1259,  3003,  1594,  2135,  3326,  1595,  1253,
    1596,  1617,  1618,   275,  1619,   277,  3004,  1625,  3083,  4098,
    2079, -2114,  1627,  1489,  2988,  1247,  1770,  3407,  3405,  3083,
    4360,  1639,  3137,  3417,   275,  3416,   277,  1248,  1628,  1271,
    2558,  3423,  1097,  1098,  1637,  -854, -2766,  1643,  3977,  1650,
    1715,  1669,   647,  3416,  1674,  3978,  1680,  1726,  3441,  3445,
    1490,  1727,  2556,  1771,  1249,  3456,  1751,  1768,  1728,  4147,
    1779,  3458,  3459,   637,  2555,  1788,  1674,  3470,  1810,  3546,
    1831,  2728,  1804,  1837,  1830,  3416,  3376,  1623,  1838,  1844,
    1848,  2557,  3083,  3482,  2989,  3979,  1841,  3003,  3495,  1845,
    1852,  1612,  1846,  1847,   517,  1849,  4292,  1851,  3505,  1863,
    1864,  4363,  4292,  3416,  1865,  3196,  2080,   992,  1894,  2559,
    -671,  1866,  1899,  1911,  3907,   528,  1250,  1902,  1919,  1920,
    3418,  3419,  1921,  1258,  1259,  1926,  3547,  3501,  2556,  3548,
    1931,  1922,  1932,  3005,  1252,  1097,  1098,  3549,  1933,  3518,
    1675,  3977,  1263,  1264,  1265,  1266,  1267,  1268,  3978,  -671,
    3455,  2558,   692,  2134,  1934,  3525,  3550,  2557,  3980,  1945,
    3457,  1951,  1975,  2990,  1983,  1984,  2208,  1263,  1264,  1265,
    1266,  1267,  1268,  4414,  1988,  2729,  2019,  2135,  2021,  2020,
    2022,  3494,  4272,  4273,  2024,  4275,  4276,  2025,  3979,  1613,
    3014,  2026,  1834,  3017,  3018,  1256,  3020,  2041,  2072,  3023,
    3024,  3551,  2055,  3032,  3029,  2124,  2118,  2125,  1349,  3038,
    2139,  2165,  2138,  2183,  3042,  3043,  3044,  3045,  3046,  2185,
    2186,  2197,  3050,  3051,  2203,  3053,  2555,  2558,  2511,  3645,
    2559,  3062,  3063,  3064,  3065,  2244,  4101,  3069,  3070,  3521,
    3072,  2209,  2211,   719,  3595,  2212,  2134,   533,  1253,  2213,
    1670,  2260,  2903,  4482,  2236,  2264,  2235,  2327,  2237,  3552,
    1675,  3980,  2242,  1770,  2243,  3981,  2246,  4360,  2252,  2257,
    2135,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  2288,
    2261,  2323,  1675,  2265,  1152,  2283,  2284,  2289, -1288,  2292,
    2556,  2293,  2856,  2304, -1607,  3460,  2305,  3461,  2306,  3136,
     723,  2333,  2343,  1268, -1431,  4050,  2559,   724,  2363,  1204,
    1208,  2879,  3633,  2398,  1671,  3635,  4229,   647,  2378,  2557,
    2407,  2730,  1606,  4060,  4230,  2560,   647,  1434,  1676,  -671,
    -671,  2413,  2819,  2416,  2419,  2441,   728,   729,  1253,   955,
     955,  3462,  2447,  2988,  2442,  2902,  1236,  1237,  1258,  1259,
    4413,  4231, -1607,  2448,  1254,  2449,  1350,  2470,  2464,  1771,
    3553,  2471,  2472,  3554,  3463,  1419,  2475,  2512,  3981,  2476,
    2477,  2478,  2488,  2490,  3681,  2492,  2479,  1255,  2493,  2991,
    2497,   637,  4527,   527,  2513, -1607,  2506, -1607,  2520,  2558,
    2731,  2525,  3690,  2521,  2507,  4637,  2514,  2527, -1902,  2529,
    4188,  3464,  3083, -1607,  2524,  2538,   737,  3033,  2540, -1607,
    2541,  3416,  4457,  2989,  3083,  2545,  2542,  2543,  2555,  2732,
    2650,  3472,  2544,  3034,   647, -1607,  2646,  2652,   533,  2654,
    2655,  4467,  3416, -1607,  3083,  3083,  2656,  2657,  3651,  2658,
   -1607,  3555,  2659,  2660,  1256,  1434,  2560,  2661,  3083,  3416,
   -1607,  2662,  2663,  1687,  1688,  1689,  1690,  1691,  2664,  2665,
    3416,  2666, -1607,  3416,  1097,  1098,  4240, -1607,  2559,   748,
     528,  2667,  2668,  4232,  2669,  2670, -1607,  2515,  3683,  2671,
    4136,  2672,  2556,  2673,   752,   753,  2511,  3725,  2674,  2675,
     637,  2684,  2990,  2703,  2704,  3781,  1261,  1262,  1263,  1264,
    1265,  1266,  1267,  1268,  2705,  2712,  2708,  2716,  -885,  4637,
    -671,  2557,  2721,  2744,  2745,  2746,  2351,  3104,  3708,  2756,
    2757,  2829,  2560,  2769,  2791,  2798,  2806,  2815,  2834,  2816,
    2830,  3714,  2837,  2838,  1256,  2839,  2845,  2835,  2836,  2848,
    2850,  1257,   647, -1607,  2851,  2852,  2859,  2863,  2074,  3882,
    4642,  4643,  2860,  4645,  4233,  1906,   529,  1692,  1693,  1694,
    1695,  2864,  2075,  2865,  2869,  2883, -1607,  1770,   543,  2884,
    2887,  4782,  4234,  2888,  2889,  2456, -1607,  2455,  3556,  2907,
    1770,  2558,  2908,  1959,  4791,  1770,  1960,  3726,  2918,  4782,
    1770,  2933,  2936,  2516,  4791,  4235,  2948,  1258,  1259,  2949,
    3784,  2950,  2965,  2973,  3465,  2984,  4505,  3557, -1607,  2985,
    3003,  3016,  3025,  1260,  3021,  4689,  3022,  4690,  4691,  3026,
    3030,  3031,  3027,  3037,  3871,  2512,  3039,   544,  3040,  1771,
    3048,  3041,  1253,  3049,  3055,  3054,  3060,  3061,  3071,  3090,
    3421,  3094,  2513,  3099,  3134,  3105,   647,  3135,  3466,  3139,
    4240,  2204,  3160,  3165,  2514,  3434,   545,   530,  3151, -1607,
    2559,  3171,  3173,  2517,  1696,  3174,  1697,  1698,  1699,  3234,
    1687,  1688,  1689,  1690,  1691,  1700,  3175,  3182,   774,  3235,
    3252,  3183,  4102, -1607,  2560,  4103,  3224,  1258,  1259,  3238,
    3083,  3242,  3240,   546,  3247,  3250,   780,  3271,  3272,  3277,
    3284,   782,  3287,  3279,   783,  1371,  4753,  3288,  2991,  3416,
    3291,  3313,  3302,  3083,  3305,   692,  1238,  3324,  1434,  1239,
    3308,  1771,  4768,  3325,  3329,  3416,  3330,   637,  3333, -1607,
    3253,  2076,  3341,  4508,  3348,  2515,   894,  3342,  3352,   531,
    3254,   547,  3355,  3363,  3364,  1261,  1262,  1263,  1264,  1265,
    1266,  1267,  1268,  2610,  3424,  3255,  1701,  3427,  3890,  3429,
     532,  4104,  4105,  3491,  3496,  3499,  3502,  3256,  3257,  3258,
    3503,  3507,   992,  3512,  1692,  1693,  1694,  1695,  3513,  3912,
    3517,  2057,  3543,   533,  3562, -1607,  3259,  3565,  4236,  3566,
    3645,  3573,  4003,  3574,  3586,  4008,  2310, -1607, -1607,  4101,
    3599,  3229,  4016,  4016,  4016,  2008,   719,  2077,  3601,  3610,
    3600,  3612,  3617,  1702,  1703,   647,  3623,  2433, -1607,  3625,
   -1607,  3638,  3658,   534,  3646,  3659,  3670,  3676,  1256,  1097,
    1098,  4510,  2078,  3684,  3677,  1261,  1262,  1263,  1264,  1265,
    1266,  1267,  1268,  3685, -1607, -1607,  3682,  2575, -1607, -1607,
    3686,  2516,  3692,  2576,  3691,  2577,  3693,  2578,  3705,  3713,
    3717,  3724,  4794,   723,  2644,   535,  3723,   -67,  3783,  2579,
     724,  2580,   548,   536,  3785,  3792,  2560,  3801,  3793,  3804,
    2468,  1696,  3805,  1697,  1698,  1699,  3798,   647,  3808,  3812,
    3815,  3818,  1700,  3799,  3800,  2079,  3806,  2882,  3807,   728,
     729,  2581,  3820,  3831,  3822,  3823,  2582,  2583,  3824,  3827,
    4060,  3832,  3833,  2584,  3681,  3842,  3848,  3850,  3859,  3866,
    3867,  2517,  1296,  3878,   549,  2585,  3841,  4016,  3876,  3879,
    3864,  3884,  3083,  2586,  3899,  3883, -1517,  4111,   637,  3908,
    3328,  3909,  3893,  2587,  3917,   550,  4116,  3926, -1522,  3910,
    3913,  3923,  3927,  3934,  3942,  1297,  1704,  3949,  3992,  1296,
    2588,  3999,  4024,  4028,  4029,  4034,  3814,  1434,  4035,   737,
    1240,  1705,  1706,  1701,  1566,  4030,  2589,   647,  2590,  4036,
    4037,  1258,  1259,  4048,  4053,  4049,  2591,  2592,  4065,  4117,
    1395,  2080,  1297,  2593,  4052,  4508,  4078,  4079,  4096,  4067,
    1396,  2594,  4080,  4154,  4097,  -962,  3260,  2595,   551,  4099,
    4100,  3989,  4114,  4125,   552,  1397,  4129,  4131,  2596,  4139,
     823,  4140,  4142,  3261,  4141,  4143,  1298,  1398,  1399,  1400,
    1702,  1703,   748,   553,  4145,  4109,  4146,  4155,  2597,  4189,
    4197,  4200,  4201,  4202,  4209,  4211,  1401,   752,   753,  4205,
    4240,  1299,  4265,   637,  4204,  1300,  4226,  2387,   554,  4222,
    4208,  4219,  4282,  1298,   647,  4252,  4254,  4288,  4296,  4297,
    4304,  4135,  4294,  -352,   275,   555,   277,  4298,  4322,  4685,
    2598,  2388,  2599,  4324,  4540,  4261,   637,  4765,  1299,  4325,
    2600,  1301,  1300,  4343,  2389,  4353,  4367,  4370,  4371,  4540,
    4016,  4016,  4376,  4016,  4016,  2601,  2390,  4379,  4381,  4383,
    4388,  4393,  1302,  -370,  4765,  4397,  4406,  4419,  4448,  4422,
    4449,  4450,  4459,  4460,  4466,  4469,  4472,  1303,  1301,  2602,
    1262,  1263,  1264,  1265,  1266,  1267,  1268,  3262,  4496,  4484,
    3486,  4529,  4536,  4537,  4547,  4530,  4548,  4579,  4565,  1302,
    4220,  4302,  4541,  4580,  4581,  3263,  4582,  2391,  4685,  2392,
    4588,  4589,  4308,  2603,  1303,  4592,  4593,  4315,  4595,   823,
    4590,  4591,  4602,  1704,   823,  1304,  4605,  4606,  4610,  4617,
    4615,  2604,  4619,  4262,  4620,  2605,  2393,  2602,  1705,  1706,
   -2470,  4623,  2576,  4641,  4644,  4646,  4329,  4333,  4647,  4016,
    1305,  4655,  4651,  4654,  4679,  4665,  4678,  4682, -1691,  4692,
    4694,   823,  1304,  4699,  4703,  3264,  4702,  4708,  4713,  4704,
    4714,  4724,  4709,  1771,  2606,  4717,  4719,  4728,   823,  2607,
    4720,  4730,  4796,  3265,  4733,  4734,  2608,  1305,  2609,  4735,
    4744,   774,  4740,  2610,  4301,  4102,  2611,  4746,  4103,  4754,
    4769,  2394,  4770,  4774,  4317,  4783,  2882,  2824,  2882,   780,
    4793,  3128,  3797,  4012,   782,  4394,  1402,   783,  4511,  4083,
    4652,  4540,   823,   823,   823,   823,  2997,  2612,  4653,  1548,
    1497,  4677,  4483,  1403,   823,  4081,  4085,  1578,  4407,  4260,
    4785,  2613,  2614,  2615,  2616,  4748,   600,  1005,  2444,  2371,
    3267,  4166,  4167,  4169,  1306,  4170,  2395,  4172,  4173,  4174,
    4175,  4176,  4758,  1307,  4177,  4423,  4662,  4663,  2617,  4628,
    4534,  4546,  4180,  4181,  4104,  4105,  4182,  4545,  1308,  2116,
    4396,  2627,  4267,  2354,  3719,  3075,  3869,  3290,  1909,  1621,
    3616,  1306,  4471,  3295,  4221,  3872,  1309,  4564,  4716,  4684,
    1307,  4640,  4722,  2168,  4378,  4089,  3073,  1041,  3481,  3674,
    3916,  3080,  4540,  3488,  4540,  1308,  4108,  4110,  4700,  4226,
    4416,  3559,   823,  3957,  2618,  2619,  2620,  4290,  4739,   647,
    3998,  2621,  4540,  1309,  4144,  4489,  4134,  3226,  4563,  3589,
    1310,  2982,  3587,  1311,  2822,  4514,  3591,  2622,   539,   540,
    4599,  2623,  4600,  2702,  4456,  4464,  4462,  4342,  3696,  3147,
    4293,  3077,  3480,  4540,  4540,  1404,  2042,  1586,  4773,  1521,
    2624,  1312,  4113,  2940,  2866,  2625,  2649,  1310,  4549,  3929,
    1311,  4453,  2166,  2425,  2130,  2846,  3281,  3611,  2626,  2797,
     521,  2140,  1031,  1313,   522,  1424,  2890,  4187,  2454,  3598,
    2735,  2737,  3249,  2960,  4415,  2954,  4333,  3655,  1312,  4258,
    4390,  4557,  4649,  2796,  3794,  4476,  4477,  4650,  3937,  2813,
    1771,  1725,  2058,  3475,  3338,  1405,  4069,  1668,  4738,  4062,
    1313,  4639,  2897,  2706,  1558,  1559,  1892,  1924,  2844,  2872,
    3874,   647,  1314,  1406,  3629,  1560,  3628,  3664,  4561,  1019,
    1120,  2141,  -962,  2142,  2143,  2144,  2145,  2146,  2499,  2147,
    2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2000,  2156,
    2157,  2158,  1561,  2202,  1000,  1003,  2937,  2365,  3941,  1314,
    1930,  2500,  3615,  4715,  4736,  4583,  4648,  4792,  4795,  4138,
    2916,  3632,  1948,   957,  3648,   958,  3649,  2326,  2482,  2914,
     925,  2913,  2906,  1940,  4556,  2412,  1410,  4210,  1284,  4218,
    2885,  1885,   823,  2192,  3268,   927,  1416,  1037,  1038,  1039,
       0,  1552,  1553,  1554,     0,  4572,  4573,     0,   647,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3104,  3104,     0,     0,     0,   823,
     823,     0,     0,     0,     0,     0,     0,     0,   823,   823,
     823,   823,   823,   823,   823,   823,   823,   823,   823,   823,
    4667,     0,     0,     0,     0,     0,     0,  4675,   823,   823,
       0,   823,   823,     0,     0,     0,   823,     0,     0,   823,
     823,   823,   823,     0,   823,   823,   823,     0,  2159,  2160,
       0,     0,     0,   823,   823,     0,   823,   823,   823,   823,
     823,     0,     0,   823,   823,   823,   823,   823,   823,   823,
     823,   823,   823,   823,     0,   823,     0,     0,   823,   823,
       0,     0,     0,   823,     0,     0,  4786,   823,   823,   823,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   823,   823,   823,     0,     0,     0,  4726,     0,
       0,   823,     0,  4731,     0,     0,     0,     0,   823,   823,
     823,  2579,   823,  2580,     0,     0,     0,     0,     0,   823,
     823,   823,     0,   823,   823,   823,   823,   823,   843,   823,
     823,   823,   823,   823,   823,   823,   823,     0,     0,  4766,
     823,   823,     0,  4698,     0,  -819,  -819,     0,  2582,     0,
       0,     0,     0,     0,     0,     0,     0,  -819,     0,     0,
       0,     0,     0,     0,  1771,     0,  4766,  2585,     0,     0,
       0,     0,     0,   647,     0,  2586,     0,  1771,     0,     0,
       0,     0,  1771,     0,     0,     0,     0,  1771,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1566,     0,     0,   844,
    2590,     0,     0,     0,     0,     0,     0,     0,   823,     0,
       0,     0,     0,  4368,  4369,     0,     0,  4372,  4373,  4374,
    4375,     0,     0,     0,     0,     0,     0,     0,     0,  2595,
       0,     0,   846,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   847,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1877,
       0,   823,     0,  1878,     0,     0,     0,     0,     0,     0,
       0,   823,     0,     0,     0,  1879,     0,     0,     0,     0,
       0,     0,  1128,     0,     0,     0,   275,   823,   277,     0,
       0,   823,     0,     0,  2599,     0,     0,   851,     0,     0,
       0,     0,  2600,     0,     0,     0,     0,     0,     0,  4454,
       0,     0,     0,     0,     0,     0,     0,  2601,     0,  1165,
       0,     0,     0,     0,     0,   852,     0,     0,     0,     0,
       0,     0,   853,     0,     0,     0,  1183,     0,     0,     0,
       0,     0,     0,     0,  4478,  4479,   823,     0,     0,     0,
       0,     0,     0,  4487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   854,     0,     0,  2603,     0,     0,     0,     0,
       0,     0,     0,  1230,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2604,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2608,     0,
    2609,     0,     3,     0,     0,     0,     4,     0,  2611,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     6,     0,     0,     0,     0,     0,     0,     7,     0,
    1370,     0,     0,     8,     9,     0,     0,     0,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,  1880,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    11,     0,   857,     0,     0,     0,     0,
    2617,     0,     0,  1881,     0,     0,     0,     0,     0,     0,
       0,  1882,     0,     0,     0,     0,     0,    12,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
      17,   860,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    18,     0,   861,  1883,  2618,  2619,  2620,     0,
       0,     0,     0,  2621,     0,     0,     0,    19,     0,     0,
       0,   823,   823,   823,     0,     0,     0,     0,     0,  2622,
       0,     0,     0,  2623,    20,     0,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    21,
       0,    22,  2624,     0,  1884,     0,    23,     0,     0,     0,
      24,     0,   823,     0,     0,     0,     0,     0,   823,     0,
    2626,   823,     0,   823,     0,     0,     0,     0,     0,   823,
       0,   823,   823,     0,     0,   864,    25,     0,    26,     0,
    1602,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,   865,     0,   866,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,    29,  1641,  1642,     0,
    3386,     0,     0,     0,     0,     0,  1652,  1653,     0,     0,
    1656,  1657,  1658,  1659,  1662,  1663,  1664,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,  1681,  1682,     0,  1683,
    1684,     0,     0,     0,     0,     0,     0,  1717,  1718,  1719,
    1720,     0,     0,  1723,   823,     0,     0,     0,     0,     0,
       0,  1731,  1732,     0,  1735,  1736,     0,     0,     0,     0,
       0,  1740,  1741,  1742,     0,     0,  1745,  1746,  1747,  1748,
    1749,  1750,     0,  1752,     0,     0,  1755,  1756,     0,     0,
       0,  1759,     0,     0,     0,  1762,  1766,  1767,     0,     0,
       0,    30,     0,     0,     0,     0,     0,   823,     0,     0,
    1774,  1775,  1776,     0,     0,     0,   823,     0,    31,  1784,
      32,     0,     0,     0,     0,     0,  1789,  1790,  1791,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1827,
       0,     0,     0,     0,     0,     0,    35,     0,     0,    36,
    2579,    37,  2580,     0,    38,     0,     0,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,    44,     0,  2582,     0,     0,
       0,     0,     0,    45,     0,     0,     0,     0,    46,    47,
      48,     0,     0,     0,     0,     0,  2585,     0,     0,     0,
       0,     0,     0,     0,  2586,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1896,     0,     0,     0,
      49,     0,     0,     0,     0,  2643,     0,    50,     0,     0,
       0,  2588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1566,     0,   823,     0,  2590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    51,     0,     0,     0,     0,     0,  2595,  1947,
       0,     0,     0,     0,    52,     0,     0,     0,    53,  1953,
       0,    54,     0,     0,     0,     0,     0,    55,     0,     0,
       0,     0,     0,     0,     0,  1981,     0,     0,     0,  1987,
       0,     0,     0,     0,   823,     0,     0,     0,   823,     0,
       0,     0,     0,   823,   823,     0,     0,    56,     0,     0,
       0,     0,   823,    57,   823,     0,   823,   823,   823,   823,
       0,     0,   823,    58,     0,   275,     0,   277,     0,     0,
       0,     0,   823,  2599,   823,   823,     0,   823,   823,   823,
     823,  2600,   823,     0,  2032,   823,     0,     0,     0,     0,
       0,     0,     0,     0,   823,     0,  2601,     0,     0,     0,
       0,   823,     0,   823,     0,   823,   823,     0,   823,   823,
       0,     0,     0,   823,   823,   823,     0,     0,     0,   823,
     823,   823,     0,   823,     0,   823,     0,   823,     0,   823,
       0,   823,     0,     0,     0,     0,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     2,     0,     0,  2603,   823,     0,     0,     0,     0,
       0,     0,   823,     0,     0,   823,     0,     0,     0,     0,
       0,   823,  2604,     4,   823,     0,     0,     0,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       8,     9,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    10,     0,     0,     0,     0,  2214,  2608,     0,  2609,
       0,     0,     0,     0,     0,     0,     0,  2611,     0,     0,
      11,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,  2579,     0,  2580,     0,     0,
       0,     0,     0,    13,    14,    15,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    16,    17,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -819,
    -819,     0,  2582,     0,     0,     0,     0,     0,     0,  2617,
       0,  -819,   823,     0,    19,     0,     0,     0,     0,     0,
       0,  2585,     0,     0,     0,     0,     0,     0,     0,  2586,
       0,    20,     0,     0,     0,     0,     0,     0,     0,  2296,
    2298,  2300,     0,     0,     0,     0,    21,     0,    22,     0,
       0,     0,     0,    23,     0,     0,  2588,    24,     0,     0,
       0,     0,     0,  2643,     0,  2618,  2619,  2620,     0,     0,
    1566,     0,  2621,     0,  2590,     0,  2995,     0,     0,     0,
    2335,     0,     0,    25,     0,    26,     0,     0,  2622,  2340,
       0,  2341,  2623,     0,  2995,  2995,     0,     0,     0,     0,
       0,    27,     0,  2595,     0,     0,     0,     0,     0,     0,
       0,  2624,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,    29,     0,     0,     0,     0,     0,  2626,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     275,     0,   277,     0,     0,     0,     0,     0,  2599,     0,
       0,     0,     0,     0,     0,     0,  2600,     0,     0,     0,
       0,     0,  2421,     0,     0,     0,     0,     0,     0,     0,
       0,  2601,     0,     0,     0,     0,  2995,  2995,     0,     0,
       0,     0,     0,     0,     0,  2975,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,    32,     0,     0,
       0,     0,   823,     0,     0,  2481,   823,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,  2603,
       0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   823,   823,     0,     0,  2604,     0,     0,
       0,     0,     0,    35,     0,     0,    36,     0,    37,     0,
       0,    38,     0,   823,    39,    40,     0,     0,     0,     0,
       0,     0,   823,     0,   823,    41,   823,     0,    42,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
      45,     0,  2608,   823,  2609,    46,    47,    48,   823,     0,
       0,     0,  2611,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    49,     0,   823,
       0,     0,     0,     0,    50,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2617,  2653,     0,     0,     0,    51,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    52,     0,     0,     0,    53,     0,     0,    54,     0,
       0,     0,     0,   823,    55,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2618,  2619,  2620,     0,    56,     0,     0,  2621,     0,     0,
      57,     0,  2715,     0,     0,     0,  2717,     0,     0,     0,
      58,  2719,  2720,  2622,   823,     0,     0,  2623,     0,     0,
    1659,     0,  2736,     0,  1659,     0,  2739,  2740,     0,  2643,
       0,     0,     0,     0,     0,     0,  2624,     0,     0,     0,
    2747,     0,  2748,     0,     0,  2750,  2751,  2752,  2753,     0,
    2754,     0,     0,     0,  2626,     0,     0,     0,     0,     0,
       0,     0,  2758,     0,     0,     0,     0,     0,     0,  2759,
       0,  2760,     0,  2761,  2762,     0,  2763,     0,     0,     0,
       0,  2766,  2767,  2768,     0,     0,     0,  2770,  2771,  2772,
       0,  2773,     0,  2775,     0,  2777,     0,  2779,     0,  2780,
       0,     0,   960,     0,  2781,     0,     0,     0,     0,     0,
       0,     0,  2976,     0,     0,   961,     0,     0,     0,     0,
       0,     0,  2643,  2801,     0,     0,   898,   962,     0,     0,
       0,     0,     0,     0,     0,   823,   823,     0,     0,  2811,
       0,     0,  2814,     0,     0,     0,     0,     0,     0,     0,
       0,   963,   944,     0,     0,     0,     0,     0,     0,   964,
       0,     0,     0,     0,   965,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2995,     0,     0,     0,     0,     0,
     966,     0,   967,     0,   968,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   969,   823,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    14,    15,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   823,
     823,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,   823,     0,     0, -1902,   970,   823,     0,     0,   823,
     971,   823,   823,   972,     0,     0,     0,     0,     0,     0,
       0,  3727,  3728,     0,     0,     0,     0,  3729,     0,  3730,
    1981,  3731,  3732,     0,     0,     0,  2579,     0,  2580,     0,
       0,   973,     0,   974,   823,     0,     0,     0,  3546,     0,
       0,   975,     0,   976,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -819,  -819,     0,  2582,     0,   823,     0,     0,     0,   977,
     978,   979,  -819,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2585,     0,     0,     0,     0,     0,     0,   823,
    2586,     0,   980,     0,     0,  3733,     0,     0,  3734,     0,
       0,     0,     0,     0,     0,     0,  3735,     0,     0,     0,
       0,     0,     0,     0,   981,     0,     0,  2588,     0,     0,
       0,     0,     0,     0,     0,  3736,     0,     0,     0,     0,
       0,  1566,     0,     0,     0,  2590,     0,     0,     0,     0,
       0,     0,  3737,     0,   982,   823,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2595,     0,     0,     0,  3738,     0,
    3739,     0,     0,     0,  2643,     0,     0,     0,     0,     0,
       0,     0,     0,  3740,  3741,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   983,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3742,     0,
       0,   275,     0,   277,     0,     0,     0,   984,     0,  2599,
       0,     0,     0,     0,     0,     0,     0,  2600,   985,   986,
    3156,     0,   987,   988,  3158,     0,     0,  3743,     0,     0,
       0,     0,  2601,     0,     0,     0,  3744,  3745,     0,  3746,
       0,     0,     0,   989,     0,     0,     0,     0,     0,     0,
       0,  3185,  3186,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3206,     0,  3747,  3748,  3749,     0,     0,     0,     0,
    3216,     0,  3218,     0,  3220,     0,     0,     0,     0,     0,
    2603,   990,  3750,  3751,  3752,     0,     0,     0,     0,  3753,
       0,     0,  3754,     0,   991,     0,     0,     0,  2604,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3755,
    3756,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2510,     0,     0,     0,   992,
       0,     0,     0,     0,     0,     0,     0,  3278,     0,     0,
       0,     0,     0,     0,     0,  3757,  3758,   993,   994,     0,
       0,     0,     0,  2608,     0,  2609,     0,     0,     0,     0,
       0,     0,     0,  2611,     0,     0,     0,     0,     0,     0,
    3759,     0,     0,     0,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   995,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2510,     0,     0,
     823,  1981,     0,     0,     0,   996,     0,     0,   823,     0,
       0,     0,     0,     0,     0,     0,  3760,     0,     0,     0,
    3761,     0,     0,     0,     0,  2617,     0,     0,     0,   823,
       0,     0,     0,     0,  3762,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3360,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2618,  2619,  2620,     0,     0,     0,     0,  2621,     0,
       0,  3763,     0,     0,  3764,     0,     0,  3765,  3766,  3767,
    3768,     0,     0,     0,  2622,     0,     0,     0,  2623,     0,
       0,  3988,  3478,     0,     0,     0,     0,     0,  2576,     0,
    2577,     0,     0,     0,     0,     0,     0,  2624,     0,     0,
       0,     0,     0,     0,  2579,     0,  2580,     0,     0,     0,
       0,  3769,  3770,     0,     0,  2626,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   823,     0,     0,  2581,   823,  3771,     0,
       0,  2582,     0,  3497,  3498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2585,     0,     0,     0,     0,     0,     0,     0,  2586,     0,
       0,     0,   823,     0,     0,     0,     0,     0,  2587,     0,
       0,     0,     0,     0,     0,     0,   823,     0,     0,     0,
       0,     0,     0,     0,     0,  2588,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1566,
       0,     0,     0,  2590,     0,  3529,     0,     0,     0,     0,
       0,  2591,     0,  2643,     0,     0,     0,     0,  3479,     0,
       0,     0,     0,     0,     0,     0,  2594,     0,     0,     0,
       0,     0,  2595,     0,     0,     0,     0,  3568,  3569,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3576,
       0,     0,     0,     0,  3578,     0,     0,  3579,     0,  3580,
    3581,     0,     0,  2597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3988,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   275,
    4184,   277,     0,     0,     0,     0,     0,  2599,     0,     0,
       0,     0,     0,     0,     0,  2600,     0,     0,     0,     0,
       0,     0,     0,  3607,     0,     0,     0,     0,     0,     0,
    2601,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3607,   823,     0,
       0,     0,     0,     0,  2602,     0,   823,     0,     0,     0,
       0,     0,   823,     0,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2603,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3607,     0,     0,  2604,     0,     0,     0,
    2605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   823,  2607,     0,     0,     0,     0,  4184,
    4184,  2608,     0,  2609,     0,     0,     0,     0,     0,     0,
       0,  2611,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4341,     0,     0,     0,  4341,  4341,     0,     0,
       0,     0,     0,   823,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2614,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   823,     0,  2617,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2618,
    2619,  2620,   823,     0,   823,     0,  2621,     0,     0,     0,
       0,     0,     0,     0,   823,     0,  4184,  4184,     0,     0,
       0,     0,  2622,     0,     0,     0,  2623,     0,     0,     0,
       0,     0,     0,     0,     0,  4341,     0,     0,     0,     0,
       0,     0,     0,     0,  4341,  2624,     0,     0,  4341,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2626,     0,     0,     0,     0,     0,     0,
       0,     0,  3607,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4341,     0,     0,     0,     0,     0,     0,     0,  3892,     0,
       0,     0,     0,     0,     0,     0,  3360,     0,     0,     0,
       0,     0,     0,   823,     0,  4184,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3920,     0,     0,
    4184,   823,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4558,     0,
       0,     0,     0,     0,     0,   823,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4184,     0,     0,
       0,     0,     0,  4341,     0,  4341,  4341,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     823,  4184,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4184,  4184,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   823,     0,     0,     0,
       0,  3360,     0,     0,     0,  4027,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3607,     0,  4184,     0,     0,     0,     0,     0,     0,   823,
       0,     0,  4184,     0,  3360,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   823,
       0,     0,     0,     0,     0,     0,  4184,     0,  4184,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     823,     0,     0,   823,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4184,     0,     0,     0,     0,     0,     0,
       0,  4184,     0,  4184,     0,  4184,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4184,
       0,     0,     0,  4184,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4184,  4184,
       0,     0,     0,     0,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4184,  4184,     0,     0,     0,  4184,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4246,     0,     0,     0,     0,     0,
    4251,     0,  4253,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4303,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3360,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3360,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4417,     0,  4418,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4426,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4538,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4543,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3607,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4613,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4701,     0,     0,
       0,     0,     0,     0,     0,   142,     0,   143,   688,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,  4718,   689,     0,   152,   153,   154,   155,   156,   157,
     158,   690,   160,     0,   161,     0,     0,   691,   162,   692,
     693,   694,   163,   695,     0,   164,   165,   166,  1763,   167,
       0,   168,   169,     0,     0,   170,   696,   697,   171,   172,
       0,   173,   698,   699,   175,   176,     0,   177,   178,   179,
     180,   181,   700,   183,     0,   701,   185,   702,   703,   704,
     705,   706,  4767,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   707,   205,
       0,   206,   708,   709,   207,     0,     0,   208,   710,   209,
     711,   712,   210,     0,   211,   713,   714,     0,   212,   213,
     214,   715,   716,   717,     0,     0,     0,     0,   718,   217,
     719,     0,  3607,   720,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
     721,     0,   246,   247,   248,   249,   722,   723,   250,   251,
       0,   252,   253,   254,   724,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   725,   262,
     726,   264,   265,     0,   266,     0,   727,     0,   267,   268,
     269,     0,   270,   728,   729,     0,   271,   272,     0,     0,
       0,   730,   274,   275,   276,   277,   731,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,   732,   283,
     284,   733,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   734,
       0,  1764,   294,     0,   735,   295,   296,     0,     0,     0,
       0,     0,   736,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,   737,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   738,
     323,   324,   325,   326,   739,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   740,   334,     0,     0,   741,
     336,   742,   337,     0,   338,   743,   744,   745,   746,   747,
     343,   344,   345,   346,   347,     0,   748,   348,   349,     0,
       0,   350,   351,   352,   353,   749,   750,   751,   354,   355,
       0,   752,   753,   356,     0,   357,   358,   754,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,   755,   369,
       0,   370,     0,   371,   372,   756,   374,   375,   376,   377,
     757,   758,   380,   759,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   760,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,   761,   762,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   763,
       0,   764,   417,   418,   419,   420,   421,   422,   765,   766,
     425,   426,   427,   428,     0,   767,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,   768,   769,   456,
     457,     0,   458,   459,   770,   461,   462,   463,   771,   772,
     464,   465,   466,   467,   773,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,   774,   475,   476,     0,   775,
     776,   777,   778,     0,     0,     0,     0,  1765,   481,   482,
     483,     0,   779,   780,   781,   485,   486,   487,   782,   488,
     489,   783,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   784,   498,   499,     0,
       0,   785,   786,   787,   788,   500,     0,     0,   501,   789,
       0,   790,   502,   503,   504,   505,   506,   791,   792,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   793,     0,     0,     0,     0,   794,   795,
       0,     0,     0,     0,   796,   797,     0,     0,   798,   799,
       0,     0,   800,   801,   142,     0,   143,   688,   145,   146,
     147,   148,  1977,     0,   149,     0,     0,     0,   150,     0,
       0,   689,     0,   152,   153,   154,   155,   156,   157,   158,
     690,   160,     0,   161,     0,     0,  1978,   162,   692,   693,
     694,   163,   695,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,   696,   697,   171,   172,     0,
     173,   698,   699,   175,   176,     0,   177,   178,   179,   180,
     181,   700,   183,     0,   701,   185,   702,   703,   704,   705,
     706,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   707,   205,     0,
     206,   708,   709,   207,     0,     0,   208,   710,   209,   711,
     712,   210,     0,   211,   713,   714,     0,   212,   213,   214,
     715,   716,   717,     0,     0,     0,     0,   718,   217,   719,
       0,     0,  1979,   218,   219,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   721,
       0,   246,   247,   248,   249,   722,   723,   250,   251,     0,
     252,   253,   254,   724,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   725,   262,   726,
     264,   265,     0,   266,     0,   727,     0,   267,   268,   269,
       0,   270,   728,   729,     0,   271,   272,     0,     0,     0,
     730,   274,   275,   276,   277,   731,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,   732,   283,   284,
     733,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   734,     0,
       0,   294,     0,   735,   295,   296,     0,     0,     0,     0,
       0,   736,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,   737,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,   738,   323,
     324,   325,   326,   739,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   740,   334,     0,     0,   741,   336,
     742,   337,     0,   338,   743,   744,   745,   746,   747,   343,
     344,   345,   346,   347,     0,   748,   348,   349,     0,     0,
     350,   351,   352,   353,   749,   750,   751,   354,   355,     0,
     752,   753,   356,     0,   357,   358,   754,  1980,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,   755,   369,     0,
     370,     0,   371,   372,   756,   374,   375,   376,   377,   757,
     758,   380,   759,     0,   381,   382,   383,     0,   384,     0,
     385,   386,   387,   388,   389,     0,   760,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   406,   407,   408,   761,   762,   409,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   763,     0,
     764,   417,   418,   419,   420,   421,   422,   765,   766,   425,
     426,   427,   428,     0,   767,   430,     0,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,     0,
     436,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,   768,   769,   456,   457,
       0,   458,   459,   770,   461,   462,   463,   771,   772,   464,
     465,   466,   467,   773,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,   774,   475,   476,     0,   775,   776,
     777,   778,     0,     0,     0,     0,     0,   481,   482,   483,
       0,   779,   780,   781,   485,   486,   487,   782,   488,   489,
     783,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,     0,   496,     0,   784,   498,   499,     0,     0,
     785,   786,   787,   788,   500,     0,     0,   501,   789,     0,
     790,   502,   503,   504,   505,   506,   791,   792,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,     0,   793,     0,     0,     0,     0,   794,   795,     0,
       0,     0,     0,   796,   797,     0,     0,   798,   799,     0,
       0,   800,   801,   142,     0,   143,   688,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     689,     0,   152,   153,   154,   155,   156,   157,   158,   690,
     160,     0,   161,     0,     0,   691,   162,   692,   693,   694,
     163,   695,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,   696,   697,   171,   172,     0,   173,
     698,   699,   175,   176,     0,   177,   178,   179,   180,   181,
     700,   183,     0,   701,   185,   702,   703,   704,   705,   706,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   707,   205,     0,   206,
     708,   709,   207,     0,     0,   208,   710,   209,   711,   712,
     210,     0,   211,   713,   714,     0,   212,   213,   214,   715,
     716,   717,     0,     0,     0,     0,   718,   217,   719,     0,
       0,   720,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   721,     0,
     246,   247,   248,   249,   722,   723,   250,   251,     0,   252,
     253,   254,   724,     0,   255,     0,     0,     0,   256,  2295,
     257,     0,   258,     0,   259,   260,   725,   262,   726,   264,
     265,     0,   266,     0,   727,     0,   267,   268,   269,     0,
     270,   728,   729,     0,   271,   272,     0,     0,     0,   730,
     274,   275,   276,   277,   731,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,   732,   283,   284,   733,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   734,     0,     0,
     294,     0,   735,   295,   296,     0,     0,     0,     0,     0,
     736,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,   737,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   738,   323,   324,
     325,   326,   739,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   740,   334,     0,     0,   741,   336,   742,
     337,     0,   338,   743,   744,   745,   746,   747,   343,   344,
     345,   346,   347,     0,   748,   348,   349,     0,     0,   350,
     351,   352,   353,   749,   750,   751,   354,   355,     0,   752,
     753,   356,     0,   357,   358,   754,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,   755,   369,     0,   370,
       0,   371,   372,   756,   374,   375,   376,   377,   757,   758,
     380,   759,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   760,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,   761,   762,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   763,     0,   764,
     417,   418,   419,   420,   421,   422,   765,   766,   425,   426,
     427,   428,     0,   767,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,   768,   769,   456,   457,     0,
     458,   459,   770,   461,   462,   463,   771,   772,   464,   465,
     466,   467,   773,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,   774,   475,   476,     0,   775,   776,   777,
     778,     0,     0,     0,     0,     0,   481,   482,   483,     0,
     779,   780,   781,   485,   486,   487,   782,   488,   489,   783,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   784,   498,   499,     0,     0,   785,
     786,   787,   788,   500,     0,     0,   501,   789,     0,   790,
     502,   503,   504,   505,   506,   791,   792,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
       0,   793,     0,     0,     0,     0,   794,   795,     0,     0,
       0,     0,   796,   797,     0,     0,   798,   799,     0,     0,
     800,   801,   142,     0,   143,   688,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   689,
       0,   152,   153,   154,   155,   156,   157,   158,   690,   160,
       0,   161,     0,     0,   691,   162,   692,   693,   694,   163,
     695,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,   696,   697,   171,   172,     0,   173,   698,
     699,   175,   176,     0,   177,   178,   179,   180,   181,   700,
     183,     0,   701,   185,   702,   703,   704,   705,   706,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   707,   205,     0,   206,   708,
     709,   207,     0,     0,   208,   710,   209,   711,   712,   210,
       0,   211,   713,   714,     0,   212,   213,   214,   715,   716,
     717,     0,     0,     0,     0,   718,   217,   719,     0,     0,
     720,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   721,     0,   246,
     247,   248,   249,   722,   723,   250,   251,     0,   252,   253,
     254,   724,     0,   255,     0,     0,     0,   256,  2297,   257,
       0,   258,     0,   259,   260,   725,   262,   726,   264,   265,
       0,   266,     0,   727,     0,   267,   268,   269,     0,   270,
     728,   729,     0,   271,   272,     0,     0,     0,   730,   274,
     275,   276,   277,   731,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,   732,   283,   284,   733,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   734,     0,     0,   294,
       0,   735,   295,   296,     0,     0,     0,     0,     0,   736,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
     737,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,   738,   323,   324,   325,
     326,   739,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   740,   334,     0,     0,   741,   336,   742,   337,
       0,   338,   743,   744,   745,   746,   747,   343,   344,   345,
     346,   347,     0,   748,   348,   349,     0,     0,   350,   351,
     352,   353,   749,   750,   751,   354,   355,     0,   752,   753,
     356,     0,   357,   358,   754,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,   755,   369,     0,   370,     0,
     371,   372,   756,   374,   375,   376,   377,   757,   758,   380,
     759,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   760,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,   761,   762,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   763,     0,   764,   417,
     418,   419,   420,   421,   422,   765,   766,   425,   426,   427,
     428,     0,   767,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,   768,   769,   456,   457,     0,   458,
     459,   770,   461,   462,   463,   771,   772,   464,   465,   466,
     467,   773,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,   774,   475,   476,     0,   775,   776,   777,   778,
       0,     0,     0,     0,     0,   481,   482,   483,     0,   779,
     780,   781,   485,   486,   487,   782,   488,   489,   783,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   784,   498,   499,     0,     0,   785,   786,
     787,   788,   500,     0,     0,   501,   789,     0,   790,   502,
     503,   504,   505,   506,   791,   792,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,     0,
     793,     0,     0,     0,     0,   794,   795,     0,     0,     0,
       0,   796,   797,     0,     0,   798,   799,     0,     0,   800,
     801,   142,     0,   143,   688,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   689,     0,
     152,   153,   154,   155,   156,   157,   158,   690,   160,     0,
     161,     0,     0,   691,   162,   692,   693,   694,   163,   695,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,   696,   697,   171,   172,     0,   173,   698,   699,
     175,   176,     0,   177,   178,   179,   180,   181,   700,   183,
       0,   701,   185,   702,   703,   704,   705,   706,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   707,   205,     0,   206,   708,   709,
     207,     0,     0,   208,   710,   209,   711,   712,   210,     0,
     211,   713,   714,     0,   212,   213,   214,   715,   716,   717,
       0,     0,     0,     0,   718,   217,   719,     0,     0,   720,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   721,     0,   246,   247,
     248,   249,   722,   723,   250,   251,     0,   252,   253,   254,
     724,     0,   255,     0,     0,     0,   256,  2299,   257,     0,
     258,     0,   259,   260,   725,   262,   726,   264,   265,     0,
     266,     0,   727,     0,   267,   268,   269,     0,   270,   728,
     729,     0,   271,   272,     0,     0,     0,   730,   274,   275,
     276,   277,   731,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,   732,   283,   284,   733,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   734,     0,     0,   294,     0,
     735,   295,   296,     0,     0,     0,     0,     0,   736,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,   737,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   738,   323,   324,   325,   326,
     739,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   740,   334,     0,     0,   741,   336,   742,   337,     0,
     338,   743,   744,   745,   746,   747,   343,   344,   345,   346,
     347,     0,   748,   348,   349,     0,     0,   350,   351,   352,
     353,   749,   750,   751,   354,   355,     0,   752,   753,   356,
       0,   357,   358,   754,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,   755,   369,     0,   370,     0,   371,
     372,   756,   374,   375,   376,   377,   757,   758,   380,   759,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   760,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,   761,   762,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   763,     0,   764,   417,   418,
     419,   420,   421,   422,   765,   766,   425,   426,   427,   428,
       0,   767,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,   768,   769,   456,   457,     0,   458,   459,
     770,   461,   462,   463,   771,   772,   464,   465,   466,   467,
     773,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,   774,   475,   476,     0,   775,   776,   777,   778,     0,
       0,     0,     0,     0,   481,   482,   483,     0,   779,   780,
     781,   485,   486,   487,   782,   488,   489,   783,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   784,   498,   499,     0,     0,   785,   786,   787,
     788,   500,     0,     0,   501,   789,     0,   790,   502,   503,
     504,   505,   506,   791,   792,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   793,
       0,     0,     0,     0,   794,   795,     0,     0,     0,     0,
     796,   797,     0,     0,   798,   799,     0,     0,   800,   801,
     142,     0,   143,   688,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   689,     0,   152,
     153,   154,   155,   156,   157,   158,   690,   160,     0,   161,
       0,     0,   691,   162,   692,   693,   694,   163,   695,     0,
     164,   165,   166,     0,   167,     0,   168,   169,     0,     0,
     170,   696,   697,   171,   172,     0,   173,   698,   699,   175,
     176,     0,   177,   178,   179,   180,   181,   700,   183,     0,
     701,   185,   702,   703,   704,   705,   706,     0,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,   200,     0,
     201,   202,   203,   707,   205,     0,   206,   708,   709,   207,
       0,     0,   208,   710,   209,   711,   712,   210,     0,   211,
     713,   714,     0,   212,   213,   214,   715,   716,   717,     0,
       0,     0,     0,   718,   217,   719,     0,     0,   720,   218,
     219,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,   232,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   721,     0,   246,   247,   248,
     249,   722,   723,   250,   251,     0,   252,   253,   254,   724,
       0,   255,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   725,   262,   726,   264,   265,     0,   266,
       0,   727,     0,   267,   268,   269,     0,   270,   728,   729,
       0,   271,   272,     0,     0,     0,   730,   274,   275,   276,
     277,   731,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,   732,   283,   284,   733,     0,     0,   285,
       0,   286,   287,     0,   288,   289,     0,     0,     0,   290,
       0,     0,   291,   292,   734,     0,     0,   294,     0,   735,
     295,   296,     0,     0,     0,     0,     0,   736,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,   737,     0,
       0,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,   738,   323,   324,   325,   326,   739,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     740,   334,     0,     0,   741,   336,   742,   337,     0,   338,
     743,   744,   745,   746,   747,   343,   344,   345,   346,   347,
       0,   748,   348,   349,     0,     0,   350,   351,   352,   353,
     749,   750,   751,   354,   355,     0,   752,   753,   356,     0,
     357,   358,   754,     0,   360,   361,   362,   363,     0,   364,
     365,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,   368,     0,   755,   369,     0,   370,     0,   371,   372,
     756,   374,   375,   376,   377,   757,   758,   380,   759,     0,
     381,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   760,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   406,   407,   408,
     761,   762,   409,     0,   410,     0,   411,   412,     0,   413,
     414,     0,   415,     0,   763,     0,   764,   417,   418,   419,
     420,   421,   422,   765,   766,   425,   426,   427,   428,     0,
     767,   430,     0,     0,     0,   431,   432,   433,   434,     0,
       0,     0,   435,     0,     0,     0,   436,     0,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,   454,     0,     0,
       0,   455,   768,   769,   456,   457,     0,   458,   459,   770,
     461,   462,   463,   771,   772,   464,   465,   466,   467,   773,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
     774,   475,   476,     0,   775,   776,   777,   778,     0,     0,
       0,     0,     0,   481,   482,   483,     0,   779,   780,   781,
     485,   486,   487,   782,   488,   489,   783,   490,   491,     0,
     492,   493,     0,     0,   494,     0,     0,   495,     0,   496,
       0,   784,   498,   499,     0,     0,   785,   786,   787,   788,
     500,     0,     0,   501,   789,     0,   790,   502,   503,   504,
     505,   506,   791,   792,     0,     0,     0,     0,     0,     0,
     509,   510,     0,   511,   512,   513,     0,     0,   793,     0,
       0,     0,     0,   794,   795,     0,     0,     0,     0,   796,
     797,     0,     0,   798,   799,     0,     0,   800,   801,   142,
       0,   143,   688,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   689,     0,   152,   153,
     154,   155,   156,   157,   158,   690,   160,     0,   161,     0,
       0,   691,   162,   692,   693,   694,   163,   695,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
     696,   697,   171,   172,     0,   173,   698,   699,   175,   176,
       0,   177,   178,   179,   180,   181,   700,   183,     0,   701,
     185,   702,   703,   704,   705,   706,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   707,   205,     0,   206,   708,   709,   207,     0,
       0,   208,   710,   209,   711,   712,   210,     0,   211,   713,
     714,     0,   212,   213,   214,   715,   716,   717,     0,     0,
       0,     0,   718,   217,   719,     0,     0,   720,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,   721,     0,   246,   247,   248,   249,
     722,   723,   250,   251,     0,   252,   253,   254,   724,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   725,   262,   726,   264,   265,     0,   266,     0,
     727,     0,   267,   268,   269,     0,   270,   728,   729,     0,
     271,   272,     0,     0,     0,   730,   274,   275,   276,   277,
     731,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,   732,   283,   284,   733,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   734,     0,     0,   294,     0,   735,   295,
     296,     0,     0,     0,     0,     0,   736,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,   737,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   738,   323,   324,   325,   326,   739,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   740,
     334,     0,     0,   741,   336,   742,   337,     0,   338,   743,
     744,   745,   746,   747,   343,   344,   345,   346,   347,     0,
     748,   348,   349,     0,     0,   350,   351,   352,   353,   749,
     750,   751,   354,   355,     0,   752,   753,   356,     0,   357,
     358,   754,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,   755,   369,     0,   370,     0,   371,   372,   756,
     374,   375,   376,   377,   757,   758,   380,   759,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   760,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,   761,
     762,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   763,     0,   764,   417,   418,   419,   420,
     421,   422,   765,   766,   425,   426,   427,   428,     0,   767,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
       0,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,   768,   769,   456,   457,     0,   458,   459,   770,   461,
     462,   463,   771,   772,   464,   465,   466,   467,   773,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,   774,
     475,   476,     0,   775,   776,   777,   778,     0,     0,     0,
       0,     0,   481,   482,   483,     0,   779,   780,   781,   485,
     486,   487,   782,   488,   489,   783,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     784,   498,   499,     0,     0,   785,   786,   787,   788,   500,
       0,     0,   501,   789,     0,   790,   502,   503,   504,   505,
     506,   791,   792,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,     0,   793,     0,     0,
       0,     0,   794,   795,     0,     0,     0,     0,   796,  1164,
       0,     0,   798,   799,     0,     0,   800,   801,   142,     0,
     143,   688,   145,   146,   147,   148,  1798,     0,   149,     0,
       0,     0,  1799,     0,     0,   689,     0,   152,   153,   154,
     155,   156,   157,   158,   690,   160,     0,   161,     0,     0,
     691,   162,   692,   693,   694,   163,   695,     0,   164,   165,
     166,     0,   167,     0,   168,   169,     0,     0,   170,   696,
     697,   171,   172,     0,   173,   698,   699,   175,   176,     0,
     177,   178,   179,   180,   181,   700,   183,     0,   701,   185,
     702,   703,   704,   705,   706,     0,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,   707,   205,     0,   206,   708,   709,   207,     0,     0,
     208,   710,   209,   711,   712,   210,     0,   211,   713,   714,
       0,   212,   213,   214,   715,   716,   717,     0,     0,     0,
       0,   718,   217,   719,     0,     0,   720,   218,   219,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   227,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,   232,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   721,     0,   246,   247,   248,   249,   722,
     723,   250,   251,     0,   252,   253,   254,   724,     0,   255,
       0,     0,     0,   256,     0,   257,     0,   258,     0,   259,
     260,   725,   262,   726,   264,   265,     0,   266,     0,   727,
       0,   267,   268,   269,     0,   270,   728,   729,     0,   271,
     272,     0,     0,     0,   730,   274,   275,   276,   277,   731,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,   732,   283,   284,   733,     0,     0,   285,     0,   286,
     287,     0,   288,   289,     0,     0,     0,   290,     0,     0,
     291,   292,   734,     0,     0,   294,     0,   735,   295,   296,
       0,     0,     0,     0,     0,   736,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,   737,     0,     0,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,   738,   323,   324,   325,   326,   739,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   740,   334,
       0,     0,   741,   336,   742,   337,     0,   338,   743,   744,
     745,   746,   747,   343,   344,   345,   346,   347,     0,   748,
     348,   349,     0,     0,   350,   351,   352,   353,   749,     0,
     751,   354,   355,     0,   752,   753,   356,     0,   357,   358,
     754,     0,   360,   361,   362,   363,     0,   364,   365,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,   368,
       0,   755,   369,     0,   370,     0,   371,   372,   756,   374,
     375,   376,   377,   757,   758,   380,   759,     0,   381,   382,
     383,     0,   384,     0,   385,   386,   387,   388,   389,     0,
     760,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   406,   407,   408,   761,   762,
     409,     0,   410,     0,   411,   412,     0,   413,   414,     0,
     415,     0,   763,     0,   764,   417,   418,   419,   420,   421,
     422,   765,   766,   425,   426,   427,   428,     0,   767,   430,
       0,     0,     0,   431,   432,   433,   434,     0,     0,     0,
     435,     0,     0,     0,   436,     0,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,   454,     0,     0,     0,   455,
     768,   769,   456,   457,     0,   458,   459,   770,   461,   462,
     463,   771,   772,   464,   465,   466,   467,   773,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,   774,   475,
     476,     0,   775,   776,   777,   778,     0,     0,     0,     0,
       0,   481,   482,   483,     0,   779,   780,   781,   485,   486,
     487,   782,   488,   489,   783,   490,   491,     0,   492,   493,
       0,     0,   494,     0,     0,   495,     0,   496,     0,   784,
     498,   499,     0,     0,   785,   786,   787,   788,   500,     0,
       0,   501,   789,     0,   790,   502,   503,   504,   505,   506,
     791,   792,     0,     0,     0,     0,     0,     0,   509,   510,
       0,   511,   512,   513,     0,     0,   793,     0,     0,     0,
       0,   794,   795,     0,     0,     0,     0,   796,   797,     0,
       0,   798,   799,     0,     0,   800,   801,   142,     0,   143,
     688,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   689,     0,   152,   153,   154,   155,
     156,   157,   158,   690,   160,     0,   161,     0,     0,   691,
     162,   692,   693,   694,   163,   695,     0,   164,   165,   166,
       0,   167,     0,   168,   169,     0,     0,   170,   696,   697,
     171,   172,     0,   173,   698,   699,   175,   176,     0,   177,
     178,   179,   180,   181,   700,   183,     0,   701,   185,   702,
     703,   704,   705,   706,     0,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,   200,     0,   201,   202,   203,
     707,   205,     0,   206,   708,   709,   207,     0,     0,   208,
     710,   209,   711,   712,   210,     0,   211,   713,   714,     0,
     212,   213,   214,   715,   716,   717,     0,     0,     0,     0,
     718,   217,   719,     0,     0,   720,   218,   219,     0,   220,
       0,     0,     0,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   227,     0,     0,   228,   229,   230,     0,
       0,     0,   231,     0,   232,   233,     0,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   721,     0,   246,   247,   248,   249,   722,   723,
     250,   251,     0,   252,   253,   254,   724,     0,   255,     0,
       0,     0,   256,     0,   257,     0,   258,     0,   259,   260,
     725,   262,   726,   264,   265,     0,   266,     0,   727,     0,
     267,   268,   269,     0,   270,   728,   729,     0,   271,   272,
       0,     0,     0,   730,   274,   275,   276,   277,   731,     0,
     278,   279,   280,     0,   281,     0,   282,     0,     0,     0,
     732,   283,   284,   733,     0,     0,   285,     0,   286,   287,
       0,   288,   289,     0,     0,     0,   290,     0,     0,   291,
     292,   734,     0,     0,   294,     0,   735,   295,   296,     0,
       0,     0,     0,     0,   736,   298,     0,   299,     0,   300,
       0,   301,   302,     0,     0,   737,     0,     0,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   738,   323,   324,   325,   326,   739,   327,   328,     0,
       0,     0,     0,   329,   330,   331,   332,   740,   334,     0,
       0,   741,   336,   742,   337,     0,   338,   743,   744,   745,
     746,   747,   343,   344,   345,   346,   347,     0,   748,   348,
     349,     0,     0,   350,   351,   352,   353,   749,   750,   751,
     354,   355,     0,   752,   753,   356,     0,   357,   358,   754,
       0,   360,   361,   362,   363,     0,   364,   365,     0,     0,
       0,     0,     0,     0,     0,     0,   366,   367,   368,     0,
     755,   369,     0,   370,     0,   371,   372,   756,   374,   375,
     376,   377,   757,   758,   380,   759,     0,   381,   382,   383,
       0,   384,     0,   385,   386,   387,   388,   389,     0,   760,
     391,   392,     0,     0,   393,     0,     0,     0,   394,   395,
     396,   397,   398,     0,     0,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   406,   407,   408,   761,   762,   409,
       0,   410,     0,   411,   412,     0,   413,   414,     0,   415,
       0,   763,     0,   764,   417,   418,   419,   420,   421,   422,
     765,   766,   425,   426,   427,   428,     0,   767,   430,     0,
       0,     0,   431,   432,   433,   434,     0,     0,     0,   435,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,   450,     0,   451,     0,     0,
     452,     0,     0,   453,   454,     0,     0,     0,   455,   768,
     769,   456,   457,     0,   458,   459,   770,   461,   462,   463,
     771,   772,   464,   465,   466,   467,   773,   468,   469,     0,
     470,     0,   471,   472,   473,   474,     0,   774,   475,   476,
       0,   775,   776,   777,   778,     0,     0,     0,     0,     0,
     481,   482,   483,     0,   779,   780,   781,   485,   486,   487,
     782,   488,   489,   783,   490,   491,     0,   492,   493,     0,
       0,   494,     0,     0,   495,     0,   496,     0,  1895,   498,
     499,     0,     0,   785,   786,   787,   788,   500,     0,     0,
     501,   789,     0,   790,   502,   503,   504,   505,   506,   791,
     792,     0,     0,     0,     0,     0,     0,   509,   510,     0,
     511,   512,   513,     0,     0,   793,     0,     0,     0,     0,
     794,   795,     0,     0,     0,     0,   796,   797,     0,     0,
     798,   799,     0,     0,   800,   801,   142,     0,   143,   688,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   689,     0,   152,   153,   154,   155,   156,
     157,   158,   690,   160,     0,   161,     0,     0,   691,   162,
     692,   693,   694,   163,   695,     0,   164,   165,   166,     0,
     167,     0,   168,   169,     0,     0,   170,   696,   697,   171,
     172,     0,   173,   698,   699,   175,   176,     0,   177,   178,
     179,   180,   181,   700,   183,     0,   701,   185,   702,   703,
     704,   705,   706,     0,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,   200,     0,   201,   202,   203,   707,
     205,     0,   206,   708,   709,   207,     0,     0,   208,   710,
     209,   711,   712,   210,     0,   211,   713,   714,     0,   212,
     213,   214,   715,   716,   717,     0,     0,     0,     0,   718,
     217,   719,     0,     0,   720,   218,   219,     0,   220,     0,
       0,     0,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   227,     0,     0,   228,   229,   230,     0,     0,
       0,   231,     0,   232,   233,     0,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   721,     0,   246,   247,   248,   249,   722,   723,   250,
     251,     0,   252,   253,   254,   724,     0,   255,     0,     0,
       0,   256,     0,   257,     0,   258,     0,   259,   260,   725,
     262,   726,   264,   265,     0,   266,     0,   727,     0,   267,
     268,   269,     0,   270,   728,   729,     0,   271,   272,     0,
       0,     0,   730,   274,   275,   276,   277,   731,     0,   278,
     279,   280,     0,   281,     0,   282,     0,     0,     0,   732,
     283,   284,  2714,     0,     0,   285,     0,   286,   287,     0,
     288,   289,     0,     0,     0,   290,     0,     0,   291,   292,
     734,     0,     0,   294,     0,   735,   295,   296,     0,     0,
       0,     0,     0,   736,   298,     0,   299,     0,   300,     0,
     301,   302,     0,     0,   737,     0,     0,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
     738,   323,   324,   325,   326,   739,   327,   328,     0,     0,
       0,     0,   329,   330,   331,   332,   740,   334,     0,     0,
     741,   336,   742,   337,     0,   338,   743,   744,   745,   746,
     747,   343,   344,   345,   346,   347,     0,   748,   348,   349,
       0,     0,   350,   351,   352,   353,   749,   750,   751,   354,
     355,     0,   752,   753,   356,     0,   357,   358,   754,     0,
     360,   361,   362,   363,     0,   364,   365,     0,     0,     0,
       0,     0,     0,     0,     0,   366,   367,   368,     0,   755,
     369,     0,   370,     0,   371,   372,   756,   374,   375,   376,
     377,   757,   758,   380,   759,     0,   381,   382,   383,     0,
     384,     0,   385,   386,   387,   388,   389,     0,   760,   391,
     392,     0,     0,   393,     0,     0,     0,   394,   395,   396,
     397,   398,     0,     0,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   406,   407,   408,   761,   762,   409,     0,
     410,     0,   411,   412,     0,   413,   414,     0,   415,     0,
     763,     0,   764,   417,   418,   419,   420,   421,   422,   765,
     766,   425,   426,   427,   428,     0,   767,   430,     0,     0,
       0,   431,   432,   433,   434,     0,     0,     0,   435,     0,
       0,     0,   436,     0,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,   450,     0,   451,     0,     0,   452,
       0,     0,   453,   454,     0,     0,     0,   455,   768,   769,
     456,   457,     0,   458,   459,   770,   461,   462,   463,   771,
     772,   464,   465,   466,   467,   773,   468,   469,     0,   470,
       0,   471,   472,   473,   474,     0,   774,   475,   476,     0,
     775,   776,   777,   778,     0,     0,     0,     0,     0,   481,
     482,   483,     0,   779,   780,   781,   485,   486,   487,   782,
     488,   489,   783,   490,   491,     0,   492,   493,     0,     0,
     494,     0,     0,   495,     0,   496,     0,   784,   498,   499,
       0,     0,   785,   786,   787,   788,   500,     0,     0,   501,
     789,     0,   790,   502,   503,   504,   505,   506,   791,   792,
       0,     0,     0,     0,     0,     0,   509,   510,     0,   511,
     512,   513,     0,     0,   793,     0,     0,     0,     0,   794,
     795,     0,     0,     0,     0,   796,   797,     0,     0,   798,
     799,     0,     0,   800,   801,   142,     0,   143,   688,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   689,     0,   152,   153,   154,   155,   156,   157,
     158,   690,   160,     0,   161,     0,     0,   691,   162,   692,
     693,   694,   163,   695,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,   696,   697,   171,   172,
       0,   173,   698,   699,   175,   176,     0,   177,   178,   179,
     180,   181,   700,   183,     0,   701,   185,   702,   703,   704,
     705,   706,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   707,   205,
       0,   206,   708,   709,   207,     0,     0,   208,   710,   209,
     711,   712,   210,     0,   211,   713,   714,     0,   212,   213,
     214,   715,   716,   717,     0,     0,     0,     0,   718,   217,
     719,     0,     0,   720,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
     721,     0,   246,   247,   248,   249,   722,   723,   250,   251,
       0,   252,   253,   254,   724,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   725,   262,
     726,   264,   265,     0,   266,     0,   727,     0,   267,   268,
     269,     0,   270,   728,   729,     0,   271,   272,     0,     0,
       0,   730,   274,   275,   276,   277,   731,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,   732,   283,
     284,  2765,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   734,
       0,     0,   294,     0,   735,   295,   296,     0,     0,     0,
       0,     0,   736,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,   737,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   738,
     323,   324,   325,   326,   739,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   740,   334,     0,     0,   741,
     336,   742,   337,     0,   338,   743,   744,   745,   746,   747,
     343,   344,   345,   346,   347,     0,   748,   348,   349,     0,
       0,   350,   351,   352,   353,   749,   750,   751,   354,   355,
       0,   752,   753,   356,     0,   357,   358,   754,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,   755,   369,
       0,   370,     0,   371,   372,   756,   374,   375,   376,   377,
     757,   758,   380,   759,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   760,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,   761,   762,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   763,
       0,   764,   417,   418,   419,   420,   421,   422,   765,   766,
     425,   426,   427,   428,     0,   767,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,   768,   769,   456,
     457,     0,   458,   459,   770,   461,   462,   463,   771,   772,
     464,   465,   466,   467,   773,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,   774,   475,   476,     0,   775,
     776,   777,   778,     0,     0,     0,     0,     0,   481,   482,
     483,     0,   779,   780,   781,   485,   486,   487,   782,   488,
     489,   783,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   784,   498,   499,     0,
       0,   785,   786,   787,   788,   500,     0,     0,   501,   789,
       0,   790,   502,   503,   504,   505,   506,   791,   792,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   793,     0,     0,     0,     0,   794,   795,
       0,     0,     0,     0,   796,   797,     0,     0,   798,   799,
       0,     0,   800,   801,   142,     0,   143,   688,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   689,     0,   152,   153,   154,   155,   156,   157,   158,
     690,   160,     0,   161,     0,     0,   691,   162,   692,   693,
     694,   163,   695,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,   696,   697,   171,   172,     0,
     173,   698,   699,   175,   176,     0,   177,   178,   179,   180,
     181,   700,   183,     0,   701,   185,   702,   703,   704,   705,
     706,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   707,   205,     0,
     206,   708,   709,   207,     0,     0,   208,   710,   209,   711,
     712,   210,     0,   211,   713,   714,     0,   212,   213,   214,
     715,   716,   717,     0,     0,     0,     0,   718,   217,   719,
       0,     0,  3606,   218,   219,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   721,
       0,   246,   247,   248,   249,   722,   723,   250,   251,     0,
     252,   253,   254,   724,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   725,   262,   726,
     264,   265,     0,   266,     0,   727,     0,   267,   268,   269,
       0,   270,   728,   729,     0,   271,   272,     0,     0,     0,
     730,   274,   275,   276,   277,   731,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,   732,   283,   284,
     733,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   734,     0,
       0,   294,     0,   735,   295,   296,     0,     0,     0,     0,
       0,   736,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,   737,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,   738,   323,
     324,   325,   326,   739,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   740,   334,     0,     0,   741,   336,
     742,   337,     0,   338,   743,   744,   745,   746,   747,   343,
     344,   345,   346,   347,     0,   748,   348,   349,     0,     0,
     350,   351,   352,   353,   749,   750,   751,   354,   355,     0,
     752,   753,   356,     0,   357,   358,   754,     0,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,   755,   369,     0,
     370,     0,   371,   372,   756,   374,   375,   376,   377,   757,
     758,   380,   759,     0,   381,   382,   383,     0,   384,     0,
     385,   386,   387,   388,   389,     0,   760,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   406,   407,   408,   761,   762,   409,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   763,     0,
     764,   417,   418,   419,   420,   421,   422,   765,   766,   425,
     426,   427,   428,     0,   767,   430,     0,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,     0,
     436,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,   768,   769,   456,   457,
       0,   458,   459,   770,   461,   462,   463,   771,   772,   464,
     465,   466,   467,   773,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,   774,   475,   476,     0,   775,   776,
     777,   778,     0,     0,     0,     0,     0,   481,   482,   483,
       0,   779,   780,   781,   485,   486,   487,   782,   488,   489,
     783,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,     0,   496,     0,   784,   498,   499,     0,     0,
     785,   786,   787,   788,   500,     0,     0,   501,   789,     0,
     790,   502,   503,   504,   505,   506,   791,   792,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,     0,   793,     0,     0,     0,     0,   794,   795,     0,
       0,     0,     0,   796,   797,     0,     0,   798,   799,     0,
       0,   800,   801,   142,     0,   143,   688,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     689,     0,   152,   153,   154,   155,   156,   157,   158,   690,
     160,     0,   161,     0,     0,   691,   162,   692,   693,   694,
     163,   695,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,   696,   697,   171,   172,     0,   173,
     698,   699,   175,   176,     0,   177,   178,   179,   180,   181,
     700,   183,     0,   701,   185,   702,   703,   704,   705,   706,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   707,   205,     0,   206,
     708,   709,   207,     0,     0,   208,   710,   209,   711,   712,
     210,     0,   211,   713,   714,     0,   212,   213,   214,   715,
     716,   717,     0,     0,     0,     0,   718,   217,   719,     0,
       0,   720,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   721,     0,
     246,   247,   248,   249,   722,   723,   250,   251,     0,   252,
     253,   254,   724,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   725,   262,   726,   264,
     265,     0,   266,     0,   727,     0,   267,   268,   269,     0,
     270,   728,   729,     0,   271,   272,     0,     0,     0,   730,
     274,   275,   276,   277,   731,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,   732,   283,   284,   733,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   734,     0,     0,
     294,     0,   735,   295,   296,     0,     0,     0,     0,     0,
     736,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,   737,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   738,   323,   324,
     325,   326,   739,   327,   328,  4634,     0,     0,     0,   329,
     330,   331,   332,   740,   334,     0,     0,   741,   336,   742,
     337,     0,   338,   743,   744,   745,   746,   747,   343,   344,
     345,   346,   347,     0,   748,   348,   349,     0,     0,   350,
     351,   352,   353,   749,     0,   751,   354,   355,     0,   752,
     753,   356,     0,   357,   358,   754,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,   755,   369,     0,   370,
       0,   371,   372,   756,   374,   375,   376,   377,   757,   758,
     380,   759,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   760,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,   761,   762,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   763,     0,   764,
     417,   418,   419,   420,   421,   422,   765,   766,   425,   426,
     427,   428,     0,   767,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,   768,   769,   456,   457,     0,
     458,   459,   770,   461,   462,   463,   771,   772,   464,   465,
     466,   467,   773,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,   774,   475,   476,     0,   775,   776,   777,
     778,     0,     0,     0,     0,     0,   481,   482,   483,     0,
     779,   780,   781,   485,   486,   487,   782,   488,   489,   783,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   784,   498,   499,     0,     0,   785,
     786,   787,   788,   500,     0,     0,   501,   789,     0,   790,
     502,   503,   504,   505,   506,   791,   792,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
       0,   793,     0,     0,     0,     0,   794,   795,     0,     0,
       0,     0,   796,   797,     0,     0,   798,   799,     0,     0,
     800,   801,   142,     0,   143,   688,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   689,
       0,   152,   153,   154,   155,   156,   157,   158,   690,   160,
       0,   161,     0,     0,   691,   162,   692,   693,   694,   163,
     695,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,   696,   697,   171,   172,     0,   173,   698,
     699,   175,   176,     0,   177,   178,   179,   180,   181,   700,
     183,     0,   701,   185,   702,   703,   704,   705,   706,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   707,   205,     0,   206,   708,
     709,   207,     0,     0,   208,   710,   209,   711,   712,   210,
       0,   211,   713,   714,     0,   212,   213,   214,   715,   716,
     717,     0,     0,     0,     0,   718,   217,   719,     0,     0,
     720,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   721,     0,   246,
     247,   248,   249,   722,   723,   250,   251,     0,   252,   253,
     254,   724,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   725,   262,   726,   264,   265,
       0,   266,     0,   727,     0,   267,   268,   269,     0,   270,
     728,   729,     0,   271,   272,     0,     0,     0,   730,   274,
     275,   276,   277,   731,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,   732,   283,   284,   733,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   734,     0,     0,   294,
       0,   735,   295,   296,     0,     0,     0,     0,     0,   736,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
     737,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,   738,   323,   324,   325,
     326,   739,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   740,   334,     0,     0,   741,   336,   742,   337,
       0,   338,   743,   744,   745,   746,   747,   343,   344,   345,
     346,   347,     0,   748,   348,   349,     0,     0,   350,   351,
     352,   353,   749,     0,   751,   354,   355,     0,   752,   753,
     356,     0,   357,   358,   754,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,   755,   369,     0,   370,     0,
     371,   372,   756,   374,   375,   376,   377,   757,   758,   380,
     759,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   760,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,   761,   762,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   763,     0,   764,   417,
     418,   419,   420,   421,   422,   765,   766,   425,   426,   427,
     428,     0,   767,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,   768,   769,   456,   457,     0,   458,
     459,   770,   461,   462,   463,   771,   772,   464,   465,   466,
     467,   773,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,   774,   475,   476,     0,   775,   776,   777,   778,
       0,     0,     0,     0,     0,   481,   482,   483,     0,   779,
     780,   781,   485,   486,   487,   782,   488,   489,   783,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   784,   498,   499,     0,     0,   785,   786,
     787,   788,   500,     0,     0,   501,   789,     0,   790,   502,
     503,   504,   505,   506,   791,   792,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,     0,
     793,     0,     0,     0,     0,   794,   795,     0,     0,     0,
       0,   796,   797,     0,     0,   798,   799,     0,     0,   800,
     801,   142,     0,   143,   688,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   689,     0,
     152,   153,   154,   155,   156,   157,   158,   690,   160,     0,
     161,     0,     0,   691,   162,   692,   693,   694,   163,   695,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,   696,   697,   171,   172,     0,   173,   698,   699,
     175,   176,     0,   177,   178,   179,   180,   181,   700,   183,
       0,   701,   185,   702,   703,   704,   705,   706,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   707,   205,     0,   206,   708,   709,
     207,     0,     0,   208,   710,   209,   711,   712,   210,     0,
     211,   713,   714,     0,   212,   213,   214,   715,   716,   717,
       0,     0,     0,     0,   718,   217,   719,     0,     0,   720,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   721,     0,   246,   247,
     248,   249,   722,   723,   250,   251,     0,   252,   253,   254,
     724,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   725,   262,   726,   264,   265,     0,
     266,     0,   727,     0,   267,   268,   269,     0,   270,   728,
     729,     0,   271,   272,     0,     0,     0,   730,   274,   275,
     276,   277,   731,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,   732,   283,   284,  1813,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   734,     0,     0,   294,     0,
     735,   295,   296,     0,     0,     0,     0,     0,   736,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,   737,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   738,   323,   324,   325,   326,
     739,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   740,   334,     0,     0,   741,   336,   742,   337,     0,
     338,   743,   744,   745,   746,   747,   343,   344,   345,   346,
     347,     0,   748,   348,   349,     0,     0,   350,   351,   352,
     353,   749,     0,   751,   354,   355,     0,   752,   753,   356,
       0,   357,   358,   754,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,   755,   369,     0,   370,     0,   371,
     372,   756,   374,   375,   376,   377,   757,   758,   380,   759,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   760,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,   761,   762,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   763,     0,   764,   417,   418,
     419,   420,   421,   422,   765,   766,   425,   426,   427,   428,
       0,   767,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,   768,   769,   456,   457,     0,   458,   459,
     770,   461,   462,   463,   771,   772,   464,   465,   466,   467,
     773,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,   774,   475,   476,     0,   775,   776,   777,   778,     0,
       0,     0,     0,     0,   481,   482,   483,     0,   779,   780,
     781,   485,   486,   487,   782,   488,   489,   783,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   784,   498,   499,     0,     0,   785,   786,   787,
     788,   500,     0,     0,   501,   789,     0,   790,   502,   503,
     504,   505,   506,   791,   792,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   793,
       0,     0,     0,     0,   794,   795,     0,     0,     0,     0,
     796,   797,     0,     0,   798,   799,     0,     0,   800,   801,
     142,     0,   143,   688,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   689,     0,   152,
     153,   154,   155,   156,   157,   158,   690,   160,     0,   161,
       0,     0,   691,   162,   692,   693,   694,   163,   695,     0,
     164,   165,   166,     0,   167,     0,   168,   169,     0,     0,
     170,   696,   697,   171,   172,     0,   173,   698,   699,   175,
     176,     0,   177,   178,   179,   180,   181,   700,   183,     0,
     701,   185,   702,   703,   704,   705,   706,     0,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,   200,     0,
     201,   202,   203,   707,   205,     0,   206,   708,   709,   207,
       0,     0,   208,   710,   209,   711,   712,   210,     0,   211,
     713,   714,     0,   212,   213,   214,   715,   716,   717,     0,
       0,     0,     0,   718,   217,   719,     0,     0,   720,   218,
     219,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,   232,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   721,     0,   246,   247,   248,
     249,   722,   723,   250,   251,     0,   252,   253,   254,   724,
       0,   255,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   725,   262,   726,   264,   265,     0,   266,
       0,   727,     0,   267,   268,   269,     0,   270,   728,   729,
       0,   271,   272,     0,     0,     0,   730,   274,   275,   276,
     277,   731,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,   732,   283,   284,  1815,     0,     0,   285,
       0,   286,   287,     0,   288,   289,     0,     0,     0,   290,
       0,     0,   291,   292,   734,     0,     0,   294,     0,   735,
     295,   296,     0,     0,     0,     0,     0,   736,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,   737,     0,
       0,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,   738,   323,   324,   325,   326,   739,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     740,   334,     0,     0,   741,   336,   742,   337,     0,   338,
     743,   744,   745,   746,   747,   343,   344,   345,   346,   347,
       0,   748,   348,   349,     0,     0,   350,   351,   352,   353,
     749,     0,   751,   354,   355,     0,   752,   753,   356,     0,
     357,   358,   754,     0,   360,   361,   362,   363,     0,   364,
     365,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,   368,     0,   755,   369,     0,   370,     0,   371,   372,
     756,   374,   375,   376,   377,   757,   758,   380,   759,     0,
     381,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   760,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   406,   407,   408,
     761,   762,   409,     0,   410,     0,   411,   412,     0,   413,
     414,     0,   415,     0,   763,     0,   764,   417,   418,   419,
     420,   421,   422,   765,   766,   425,   426,   427,   428,     0,
     767,   430,     0,     0,     0,   431,   432,   433,   434,     0,
       0,     0,   435,     0,     0,     0,   436,     0,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,   454,     0,     0,
       0,   455,   768,   769,   456,   457,     0,   458,   459,   770,
     461,   462,   463,   771,   772,   464,   465,   466,   467,   773,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
     774,   475,   476,     0,   775,   776,   777,   778,     0,     0,
       0,     0,     0,   481,   482,   483,     0,   779,   780,   781,
     485,   486,   487,   782,   488,   489,   783,   490,   491,     0,
     492,   493,     0,     0,   494,     0,     0,   495,     0,   496,
       0,   784,   498,   499,     0,     0,   785,   786,   787,   788,
     500,     0,     0,   501,   789,     0,   790,   502,   503,   504,
     505,   506,   791,   792,     0,     0,     0,     0,     0,     0,
     509,   510,     0,   511,   512,   513,     0,     0,   793,     0,
       0,     0,     0,   794,   795,     0,     0,     0,     0,   796,
     797,     0,     0,   798,   799,     0,     0,   800,   801,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,     0,   161,     0,
       0,     0,   162,   692,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,  1854,     0,     0,
       0,     0,   216,   217,   719,     0,     0,     0,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,   723,   250,   251,     0,   252,   253,   254,   724,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
       0,     0,   267,   268,   269,     0,   270,   728,   729,     0,
     271,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,   284,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   293,     0,     0,   294,     0,     0,   295,
     296,     0,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,   737,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     748,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,   354,   355,     0,   752,   753,   356,     0,   357,
     358,   359,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,     0,   369,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
       0,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,   774,
     475,   476,     0,  1855,   478,   479,  1856,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,   780,   484,   485,
     486,   487,   782,   488,   489,   783,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,     0,   514,     0,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,   800,   801,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
    3004,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,   528,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,  2134,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,  2135,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,  3377,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,  2433,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   533,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   514,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,  3079,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
    3004,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,   528,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,  2134,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,  2135,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   533,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   514,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,  3079,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,  2433,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   514,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,  2873,     0,     0,   150,     0,     0,   151,   801,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   514,
       0,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,     0,  4778,   149,     0,     0,     0,   150,  4779,   801,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,     0,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,     0,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,     0,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,     0,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
       0,   514,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,  1169,     0,   149,     0,     0,     0,   150,
       0,   801,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,  1386,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   562,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,     0,     0,     0,     0,     0,     0,
    2381,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,   562,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   514,
       0,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,  3078,     0,   149,     0,     0,     0,   150,     0,  3079,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,     0,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,     0,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,     0,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,     0,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
       0,   514,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
    4779,   801,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   562,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   633,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   634,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   562,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   801,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,  3079,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   943,   944,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,   945,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   946,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   947,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   948,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   949,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   950,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   951,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   952,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,     0,   514,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,   953,   152,   153,   154,   155,   156,   157,   158,
     159,   160,     0,   161,     0,     0,     0,   162,     0,     0,
       0,   163,     0,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,     0,     0,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,     0,
     206,     0,     0,   207,     0,     0,   208,     0,   209,     0,
       0,   210,     0,   211,     0,     0,     0,   212,   213,   214,
       0,     0,   215,     0,     0,     0,     0,   216,   217,     0,
       0,     0,     0,   218,   219,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,     0,
     252,   253,   254,     0,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,     0,     0,   267,   268,   269,
       0,   270,     0,     0,     0,   271,   272,     0,     0,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,     0,   283,   284,
       0,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   293,     0,
       0,   294,     0,     0,   295,   296,   645,     0,     0,     0,
       0,   297,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,     0,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,     0,   323,
     324,   325,   326,     0,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,   337,     0,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,   348,   349,     0,     0,
     350,   351,   352,   353,     0,     0,     0,   354,   355,     0,
       0,     0,   356,     0,   357,   358,   359,     0,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,     0,   369,     0,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,     0,   384,     0,
     385,   386,   387,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   429,   430,     0,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,     0,
     436,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,   139,   475,   476,     0,   477,   478,
     479,   480,     0,     0,     0,     0,     0,   481,   482,   483,
       0,     0,     0,   484,   485,   486,   487,     0,   488,   489,
       0,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,     0,   496,     0,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,     0,     0,   501,     0,     0,
       0,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,     0,   514,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,  1439,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,     0,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,     0,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,   645,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,   139,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
       0,   514,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
    1785,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,     0,     0,   171,   172,     0,   173,   943,
     944,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,     0,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,   217,     0,     0,     0,
     945,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,     0,   252,   253,
     254,     0,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,   264,   946,
       0,   266,     0,     0,     0,   267,   268,   269,     0,   270,
       0,     0,     0,   271,   272,     0,     0,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,   284,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   293,     0,     0,   294,
       0,     0,   295,   296,     0,     0,     0,     0,     0,   297,
     298,     0,   947,     0,   300,     0,   301,   302,     0,     0,
       0,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   948,
     346,   347,     0,     0,   348,   349,     0,     0,   350,   351,
     352,   353,     0,     0,     0,   354,   355,     0,     0,     0,
     356,     0,   357,   358,   359,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,     0,   369,     0,   370,     0,
     371,   372,   949,   374,   375,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   416,     0,     0,   950,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   429,   430,     0,     0,     0,   431,   432,   951,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,     0,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,   484,   485,   486,   487,     0,   488,   489,     0,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,     0,
     514,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,   953,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,   645,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,   139,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,     0,   514,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,  3642,   152,
     153,   154,   155,   156,   157,   158,   159,   160,     0,   161,
       0,     0,     0,   162,     0,     0,     0,   163,     0,     0,
     164,   165,   166,     0,   167,     0,   168,   169,     0,     0,
     170,     0,     0,   171,   172,     0,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,   196,   197,   198,  1319,   199,   200,     0,
     201,   202,   203,   204,   205,     0,   206,     0,     0,   207,
       0,     0,   208,     0,   209,     0,     0,   210,     0,   211,
       0,     0,     0,   212,   213,   214,     0,     0,   215,     0,
       0,     0,     0,   216,   217,     0,     0,     0,     0,   218,
     219,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,   232,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,     0,   252,   253,   254,     0,
       0,   255,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,     0,     0,   267,   268,   269,     0,   270,     0,     0,
       0,   271,   272,     0,     0,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,     0,   283,   284,     0,     0,     0,   285,
       0,   286,   287,     0,   288,   289,     0,     0,     0,   290,
       0,     0,   291,   292,   293,     0,     0,   294,     0,     0,
     295,   296,     0,     0,     0,     0,     0,   297,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,     0,     0,
       0,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,     0,   323,   324,   325,   326,     0,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,   337,     0,   338,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,   348,   349,     0,     0,   350,   351,   352,   353,
       0,     0,     0,   354,   355,     0,     0,     0,   356,     0,
     357,   358,   359,     0,   360,   361,   362,   363,     0,   364,
     365,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,   368,     0,     0,   369,     0,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,   409,     0,   410,     0,   411,   412,     0,   413,
     414,     0,   415,     0,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     429,   430,     0,     0,     0,   431,   432,   433,   434,     0,
       0,     0,   435,     0,     0,     0,   436,     0,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,   454,     0,     0,
       0,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
       0,   475,   476,     0,   477,   478,   479,   480,     0,     0,
       0,     0,     0,   481,   482,   483,     0,     0,     0,   484,
     485,   486,   487,     0,   488,   489,     0,   490,   491,     0,
     492,   493,     0,     0,   494,     0,     0,   495,     0,   496,
       0,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,     0,     0,   501,     0,     0,     0,   502,   503,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,     0,
     509,   510,     0,   511,   512,   513,     0,     0,   514,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,  1320,   152,   153,
     154,   155,   156,   157,   158,   159,   160,     0,   161,     0,
       0,     0,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,   217,     0,     0,     0,     0,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,     0,   252,   253,   254,     0,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
       0,     0,   267,   268,   269,     0,   270,     0,     0,     0,
     271,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,   284,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   293,     0,     0,   294,     0,     0,   295,
     296,     0,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,   354,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,     0,   369,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
       0,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,     0,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,   484,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,     0,   514,   142,     0,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,     0,  1320,   152,   153,   154,
     155,   156,   157,   158,   159,     0,     0,  -372,     0,     0,
       0,   162,     0,     0,     0,   163,     0,     0,   164,   165,
     166,     0,   167,     0,     0,     0,     0,     0,   170,  4157,
       0,   171,   172,     0,   173,     0,     0,     0,     0,     0,
     177,   178,   179,   180,  4158,   182,   183,     0,   184,   185,
       0,     0,     0,     0,     0,     0,   191,     0,   193,     0,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,     0,   205,     0,   206,     0,     0,   207,     0,     0,
     208,     0,   209,     0,     0,   210,     0,   211,     0,     0,
       0,   212,   213,   214,     0,     0,   215,     0,     0,     0,
       0,   216,     0,     0,     0,     0,     0,   218,     0,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,     0,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,     0,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,  4159,   252,   253,   254,     0,     0,     0,
       0,     0,     0,   256,     0,   257,     0,   258,     0,   259,
     260,   261,   262,   263,     0,   265,     0,   266,     0,     0,
       0,     0,   268,   269,     0,     0,     0,     0,     0,     0,
     272,     0,     0,     0,   273,   274,   275,   276,   277,  4160,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,     0,   283,     0,     0,     0,     0,   285,     0,   286,
     287,     0,   288,   289,  4161,     0,     0,   290,     0,     0,
       0,   292,   293,     0,     0,   294,  4162,     0,   295,   296,
       0,     0,     0,     0,     0,   297,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,     0,     0,  -327,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,     0,   323,   324,   325,   326,     0,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,   337,     0,   338,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
     348,   349,     0,     0,   350,   351,   352,   353,     0,     0,
       0,     0,   355,     0,     0,     0,   356,     0,   357,   358,
     359,     0,   360,   361,   362,  4163,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   367,   368,
       0,     0,     0,     0,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,     0,     0,   382,
     383,     0,   384,     0,   385,   386,   387,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,     0,     0,   406,     0,   408,  -327,     0,
     409,     0,     0,     0,   411,     0,     0,   413,   414,     0,
     415,  4164,   416,     0,     0,   417,     0,   419,   420,   421,
     422,   423,   424,   425,     0,   427,   428,     0,   429,     0,
       0,     0,     0,   431,   432,   433,     0,     0,     0,     0,
     435,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     441,   442,     0,   443,     0,   445,     0,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,     0,     0,     0,     0,   455,
       0,     0,     0,   457,     0,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,     0,   475,
     476,     0,   477,   478,   479,   480,     0,     0,     0,     0,
       0,   481,   482,   483,     0,     0,     0,     0,   485,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,     0,
       0,     0,   494,     0,     0,   495,     0,     0,     0,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,     0,
       0,   501,     0,     0,     0,   502,   503,   504,   505,   506,
     507,   508,     0,     0,  -327,     0,     0,     0,   509,     0,
       0,   511,     0,   513,     0,   142,   514,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
    4772,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
    1049,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,   645,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,   139,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,   142,   514,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,  1217,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,     0,     0,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,     0,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,   217,     0,     0,     0,
       0,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,     0,   252,   253,
     254,     0,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,     0,     0,   267,   268,   269,     0,   270,
       0,     0,     0,   271,   272,     0,     0,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,   284,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   293,     0,     0,   294,
       0,     0,   295,   296,     0,     0,     0,     0,     0,   297,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
       0,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,   348,   349,     0,     0,   350,   351,
     352,   353,     0,     0,     0,   354,   355,     0,     0,     0,
     356,     0,   357,   358,   359,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,     0,   369,     0,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   429,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,     0,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,   484,   485,   486,   487,     0,   488,   489,     0,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,   142,
     514,   143,   144,   145,   146,   147,   148,  2204,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,     0,   161,     0,
       0,     0,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,   217,     0,     0,     0,     0,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,     0,   252,   253,   254,     0,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
       0,     0,   267,   268,   269,     0,   270,     0,     0,     0,
     271,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,   284,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   293,     0,     0,   294,     0,     0,   295,
     296,     0,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,   354,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,     0,   369,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
       0,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,     0,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,   484,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,   142,   514,   143,   144,
     145,   146,   147,   148,  2904,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,   160,     0,   161,     0,     0,     0,   162,
       0,     0,     0,   163,     0,     0,   164,   165,   166,     0,
     167,     0,   168,   169,     0,     0,   170,     0,     0,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,     0,   206,     0,     0,   207,     0,     0,   208,     0,
     209,     0,     0,   210,     0,   211,     0,     0,     0,   212,
     213,   214,     0,     0,   215,     0,     0,     0,     0,   216,
     217,     0,     0,     0,     0,   218,   219,     0,   220,     0,
       0,     0,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   227,     0,     0,   228,   229,   230,     0,     0,
       0,   231,     0,   232,   233,     0,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,     0,   252,   253,   254,     0,     0,   255,     0,     0,
       0,   256,     0,   257,     0,   258,     0,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,     0,     0,   267,
     268,   269,     0,   270,     0,     0,     0,   271,   272,     0,
       0,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,     0,   281,     0,   282,     0,     0,     0,     0,
     283,   284,     0,     0,     0,   285,     0,   286,   287,     0,
     288,   289,     0,     0,     0,   290,     0,     0,   291,   292,
     293,     0,     0,   294,     0,     0,   295,   296,     0,     0,
       0,     0,     0,   297,   298,     0,   299,     0,   300,     0,
     301,   302,     0,     0,     0,     0,     0,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
       0,   323,   324,   325,   326,     0,   327,   328,     0,     0,
       0,     0,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,   337,     0,   338,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,   348,   349,
       0,     0,   350,   351,   352,   353,     0,     0,     0,   354,
     355,     0,     0,     0,   356,     0,   357,   358,   359,     0,
     360,   361,   362,   363,     0,   364,   365,     0,     0,     0,
       0,     0,     0,     0,     0,   366,   367,   368,     0,     0,
     369,     0,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,     0,
     384,     0,   385,   386,   387,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,     0,     0,   394,   395,   396,
     397,   398,     0,     0,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
     410,     0,   411,   412,     0,   413,   414,     0,   415,     0,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   429,   430,     0,     0,
       0,   431,   432,   433,   434,     0,     0,     0,   435,     0,
       0,     0,   436,     0,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,   450,     0,   451,     0,     0,   452,
       0,     0,   453,   454,     0,     0,     0,   455,     0,     0,
     456,   457,     0,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
       0,   471,   472,   473,   474,     0,     0,   475,   476,     0,
     477,   478,   479,   480,     0,     0,     0,     0,     0,   481,
     482,   483,     0,     0,     0,   484,   485,   486,   487,     0,
     488,   489,     0,   490,   491,     0,   492,   493,     0,     0,
     494,     0,     0,   495,     0,   496,     0,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,     0,     0,   501,
       0,     0,     0,   502,   503,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,     0,   509,   510,     0,   511,
     512,   513,     0,   142,   514,   143,   144,   145,   146,   147,
     148,  3273,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,     0,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,     0,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,     0,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,     0,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
       0,   514,     0,     0,     0,     0,     0,   142,  3647,   143,
     144,   145,   146,   147,   148,   842,   843,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,     0,   161,     0,     0,     0,
     162,     0,     0,     0,   163,     0,     0,   164,   165,   166,
       0,   167,     0,   168,   169,     0,     0,   170,     0,     0,
     171,   172,     0,   173,   174,     0,   175,   176,     0,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,     0,   206,     0,     0,   207,   844,     0,   208,
       0,   209,     0,   845,   210,     0,   211,     0,     0,     0,
     212,   213,   214,     0,     0,   215,     0,     0,     0,     0,
     216,   217,     0,     0,     0,     0,   218,   219,     0,   220,
     846,     0,     0,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   227,   847,     0,   228,   229,   230,     0,
       0,     0,   231,     0,   232,   233,     0,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   848,   242,   243,
     244,   849,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,     0,   850,   253,   254,     0,     0,   255,     0,
       0,     0,   256,     0,   257,     0,   258,     0,   259,   260,
     261,   262,   263,   264,   265,   851,   266,     0,     0,     0,
     267,   268,   269,     0,   270,     0,     0,     0,   271,   272,
       0,     0,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   852,   281,     0,   282,     0,     0,     0,
     853,   283,   284,     0,     0,     0,   285,     0,   286,   287,
       0,   288,   289,     0,     0,     0,   290,     0,     0,   291,
     292,   293,     0,     0,   294,     0,     0,   295,   296,   645,
       0,     0,     0,     0,   297,   298,     0,   299,     0,   300,
     854,   301,   302,     0,     0,     0,     0,     0,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,     0,   323,   324,   325,   326,     0,   327,   328,     0,
       0,     0,     0,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,   337,     0,   338,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,   348,
     349,     0,     0,   350,   351,   352,   353,     0,     0,     0,
     354,   355,     0,     0,     0,   356,     0,   357,   358,   359,
       0,   360,   361,   362,   363,     0,   364,   365,     0,     0,
       0,     0,     0,     0,     0,     0,   366,   367,   368,     0,
       0,   369,     0,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
       0,   384,     0,   855,   386,   387,   388,   856,     0,   390,
     391,   392,     0,     0,   393,     0,     0,     0,   394,   395,
     396,   397,   398,   857,     0,   399,   400,   401,   402,   403,
       0,   858,   405,     0,   406,   407,   408,     0,     0,   859,
       0,   410,     0,   411,   412,     0,   413,   414,     0,   415,
       0,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   429,   430,   860,
       0,     0,   431,   432,   433,   434,     0,     0,     0,   435,
       0,     0,   861,   862,     0,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,   450,     0,   451,     0,     0,
     452,     0,     0,   453,   454,     0,     0,     0,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,   462,   463,
       0,     0,   863,   465,   466,   467,     0,   468,   469,     0,
     470,     0,   471,   472,   473,   474,     0,   139,   475,   476,
       0,   477,   478,   479,   480,     0,     0,     0,     0,     0,
     481,   482,   483,   864,     0,     0,   484,   485,   486,   487,
       0,   488,   489,     0,   490,   491,     0,   492,   493,     0,
       0,   494,     0,     0,   495,   865,   496,   866,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,     0,     0,
     501,     0,     0,     0,   502,   503,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,     0,   509,   510,     0,
     511,   512,   513,     0,   142,   514,   919,   144,   145,   146,
     147,   148,   920,   843,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,     0,   161,     0,     0,     0,   162,     0,     0,
       0,   163,     0,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,     0,     0,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,     0,
     206,     0,     0,   207,   844,     0,   208,     0,   209,     0,
     845,   210,     0,   211,     0,     0,     0,   212,   213,   214,
       0,     0,   215,     0,     0,     0,     0,   216,   217,     0,
       0,     0,     0,   218,   219,     0,   220,   846,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,   847,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   848,   242,   243,   244,   849,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,     0,
     850,   253,   254,     0,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   261,   262,   263,
     264,   265,   851,   266,     0,     0,     0,   267,   268,   269,
       0,   270,     0,     0,     0,   271,   272,     0,     0,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     852,   281,     0,   282,     0,     0,     0,   853,   283,   284,
       0,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   293,     0,
       0,   294,     0,     0,   295,   296,   645,     0,     0,     0,
       0,   297,   298,     0,   299,     0,   300,   854,   301,   302,
       0,     0,     0,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,     0,   323,
     324,   325,   326,     0,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,   337,     0,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,   348,   349,     0,     0,
     350,   351,   352,   353,     0,     0,     0,   354,   355,     0,
       0,     0,   356,     0,   357,   358,   359,     0,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,     0,   369,     0,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,     0,   384,     0,
     855,   386,   387,   388,   921,     0,   390,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
     857,     0,   399,   400,   401,   402,   403,     0,   858,   405,
       0,   406,   407,   408,     0,     0,   859,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   429,   430,   860,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,   861,
     862,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,   462,   463,     0,     0,   863,
     465,   466,   467,     0,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,   139,   475,   476,     0,   477,   478,
     479,   480,     0,     0,     0,     0,     0,   481,   482,   483,
     864,     0,     0,   484,   485,   486,   487,     0,   488,   489,
       0,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,   865,   496,   866,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,     0,     0,   501,     0,     0,
       0,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,   142,   514,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,  2555,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
    2556,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,  2557,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,  2558,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,  1097,  1098,     0,   354,   355,     0,     0,  2559,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,  4759,   587,  4760,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,  2560,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,   142,   514,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,   161,     0,     0,
       0,   162,     0,     0,     0,   163,     0,     0,   164,   165,
     166,     0,   167,     0,   168,   169,     0,     0,   170,     0,
       0,   171,   172,     0,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,     0,   206,     0,     0,   207,     0,     0,
     208,     0,   209,     0,     0,   210,     0,   211,     0,     0,
       0,   212,   213,   214,     0,     0,   215,     0,     0,     0,
       0,   216,   217,  1670,     0,     0,  3492,   218,   219,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   227,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,   232,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,     0,   252,   253,   254,  1671,     0,   255,
       0,     0,     0,   256,     0,   257,     0,   258,     0,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,     0,
       0,   267,   268,   269,     0,   270,  2988,     0,     0,   271,
     272,     0,     0,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,     0,   283,   284,     0,     0,     0,   285,     0,   286,
     287,     0,   288,   289,     0,     0,     0,   290,     0,     0,
     291,   292,   293,     0,     0,   294,     0,     0,   295,   296,
       0,     0,     0,     0,     0,   297,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,  2989,     0,     0,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,     0,   323,   324,   325,   326,     0,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,   337,     0,   338,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
     348,   349,     0,     0,   350,   351,   352,   353,     0,     0,
       0,   354,   355,     0,     0,  2990,   356,     0,   357,   358,
     359,     0,   360,   361,   362,   363,     0,   364,   365,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,   368,
       0,     0,   369,     0,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,     0,   384,     0,   385,   386,   387,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,   410,     0,   411,   412,     0,   413,   414,     0,
     415,     0,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   429,   430,
       0,     0,     0,   431,   432,   433,   434,     0,     0,     0,
     435,     0,     0,     0,   436,     0,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,   454,     0,     0,     0,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,   139,   475,
     476,     0,   477,   478,   479,   480,     0,     0,     0,     0,
       0,   481,   482,   483,     0,     0,     0,   484,   485,   486,
     487,  2991,   488,   489,     0,   490,   491,     0,   492,   493,
       0,     0,   494,     0,     0,   495,     0,   496,     0,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,     0,
       0,   501,     0,     0,     0,   502,   503,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,     0,   509,   510,
       0,   511,   512,   513,     0,   142,   514,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
    1670,     0,     0,  4299,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,  1671,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,  2988,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,  2989,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,  2990,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,   139,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,  2991,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,   142,   514,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,     0,     0,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,     0,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,   217,  1670,     0,     0,
    4554,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,     0,   252,   253,
     254,  1671,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,     0,     0,   267,   268,   269,     0,   270,
    2988,     0,     0,   271,   272,     0,     0,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,   284,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   293,     0,     0,   294,
       0,     0,   295,   296,     0,     0,     0,     0,     0,   297,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
    2989,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,   348,   349,     0,     0,   350,   351,
     352,   353,     0,     0,     0,   354,   355,     0,     0,  2990,
     356,     0,   357,   358,   359,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,     0,   369,     0,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   429,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,   139,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,   484,   485,   486,   487,  2991,   488,   489,     0,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,   142,
     514,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,     0,   161,     0,
       0,  1427,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,   217,     0,     0,     0,  1428,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,  1429,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,     0,   252,   253,   254,     0,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
       0,     0,   267,   268,   269,     0,   270,     0,     0,     0,
     271,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,   284,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   293,     0,     0,   294,     0,     0,   295,
     296,   645,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,   354,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,     0,   369,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
    1430,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,   139,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,   484,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,   142,   514,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,   160,     0,   161,     0,     0,     0,   162,
       0,     0,     0,   163,     0,     0,   164,   165,   166,     0,
     167,     0,   168,   169,     0,     0,   170,     0,     0,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,     0,   206,     0,     0,   207,     0,     0,   208,     0,
     209,  1049,   845,   210,     0,   211,     0,     0,     0,   212,
     213,   214,     0,     0,   215,     0,     0,     0,     0,   216,
     217,     0,     0,     0,     0,   218,   219,     0,   220,     0,
       0,     0,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   227,     0,     0,   228,   229,   230,     0,     0,
       0,   231,     0,   232,   233,     0,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,     0,   252,   253,   254,     0,     0,   255,     0,     0,
       0,   256,     0,   257,     0,   258,     0,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,     0,     0,   267,
     268,   269,     0,   270,     0,     0,     0,   271,   272,     0,
       0,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,     0,   281,     0,   282,     0,     0,     0,     0,
     283,   284,     0,     0,     0,   285,     0,   286,   287,     0,
     288,   289,     0,     0,     0,   290,     0,     0,   291,   292,
     293,     0,     0,   294,     0,     0,   295,   296,   645,     0,
       0,     0,     0,   297,   298,     0,   299,     0,   300,     0,
     301,   302,     0,     0,     0,     0,     0,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
       0,   323,   324,   325,   326,     0,   327,   328,     0,     0,
       0,     0,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,   337,     0,   338,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,   348,   349,
       0,     0,   350,   351,   352,   353,     0,     0,     0,   354,
     355,     0,     0,     0,   356,     0,   357,   358,   359,     0,
     360,   361,   362,   363,     0,   364,   365,     0,     0,     0,
       0,     0,     0,     0,     0,   366,   367,   368,     0,     0,
     369,     0,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,     0,
     384,     0,   385,   386,   387,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,     0,     0,   394,   395,   396,
     397,   398,     0,     0,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
     410,     0,   411,   412,     0,   413,   414,     0,   415,     0,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   429,   430,     0,     0,
       0,   431,   432,   433,   434,     0,     0,     0,   435,     0,
       0,     0,   436,     0,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,   450,     0,   451,     0,     0,   452,
       0,     0,   453,   454,     0,     0,     0,   455,     0,     0,
     456,   457,     0,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
       0,   471,   472,   473,   474,     0,   139,   475,   476,     0,
     477,   478,   479,   480,     0,     0,     0,     0,     0,   481,
     482,   483,     0,     0,     0,   484,   485,   486,   487,     0,
     488,   489,     0,   490,   491,     0,   492,   493,     0,     0,
     494,     0,     0,   495,     0,   496,     0,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,     0,     0,   501,
       0,     0,     0,   502,   503,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,     0,   509,   510,     0,   511,
     512,   513,     0,   142,   514,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,  1441,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,  1442,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,   645,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,   139,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
     142,   514,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,   160,     0,   161,
       0,     0,     0,   162,  1020,     0,     0,   163,     0,     0,
     164,   165,   166,     0,   167,     0,   168,   169,     0,     0,
     170,     0,     0,   171,   172,     0,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,     0,   206,     0,     0,   207,
       0,     0,   208,     0,   209,     0,     0,   210,     0,   211,
       0,     0,     0,   212,   213,   214,     0,     0,   215,     0,
       0,     0,     0,   216,   217,     0,     0,     0,     0,   218,
     219,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,   232,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,     0,   252,   253,   254,     0,
       0,   255,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,     0,     0,   267,   268,   269,     0,   270,  1021,  1022,
       0,   271,   272,     0,     0,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,     0,   283,   284,     0,     0,     0,   285,
       0,   286,   287,     0,   288,   289,     0,     0,     0,   290,
       0,     0,   291,   292,   293,     0,     0,   294,     0,     0,
     295,   296,     0,     0,     0,     0,     0,   297,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,     0,     0,
       0,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,     0,   323,   324,   325,   326,     0,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,   337,     0,   338,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,   348,   349,     0,     0,   350,   351,   352,   353,
       0,     0,     0,   354,   355,     0,     0,     0,   356,     0,
     357,   358,   359,     0,   360,   361,   362,   363,     0,   364,
     365,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,   368,     0,     0,   369,     0,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,   409,     0,   410,     0,   411,   412,     0,   413,
     414,     0,   415,     0,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     429,   430,     0,     0,     0,   431,   432,   433,   434,     0,
       0,     0,   435,     0,     0,     0,   436,     0,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,   454,     0,     0,
       0,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
    1023,   475,   476,     0,   477,   478,   479,   480,     0,     0,
       0,     0,     0,   481,   482,   483,     0,     0,     0,   484,
     485,   486,   487,     0,   488,   489,     0,   490,   491,     0,
     492,   493,     0,     0,   494,     0,     0,   495,     0,   496,
       0,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,     0,     0,   501,     0,     0,     0,   502,   503,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,     0,
     509,   510,     0,   511,   512,   513,     0,   142,   514,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,     0,   161,     0,     0,     0,
     162,     0,     0,     0,   163,     0,     0,   164,   165,   166,
       0,   167,     0,   168,   169,     0,     0,   170,     0,     0,
     171,   172,     0,   173,   174,     0,   175,   176,     0,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,     0,   206,     0,     0,   207,     0,     0,   208,
       0,   209,     0,     0,   210,     0,   211,     0,     0,     0,
     212,   213,   214,     0,     0,   215,     0,     0,     0,     0,
     216,   217,     0,     0,     0,     0,   218,   219,     0,   220,
       0,     0,     0,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   227,     0,     0,   228,   229,   230,     0,
       0,     0,   231,     0,   232,   233,     0,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,     0,   252,   253,   254,     0,     0,   255,     0,
       0,     0,   256,     0,   257,     0,   258,     0,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,     0,     0,
     267,   268,   269,     0,   270,     0,     0,     0,   271,   272,
       0,     0,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,     0,   281,     0,   282,     0,     0,     0,
       0,   283,   284,     0,     0,     0,   285,     0,   286,   287,
       0,   288,   289,     0,     0,     0,   290,     0,     0,   291,
     292,   293,     0,     0,   294,     0,     0,   295,   296,     0,
       0,     0,     0,     0,   297,   298,     0,   299,     0,   300,
       0,   301,   302,     0,     0,  2001,     0,     0,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,     0,   323,   324,   325,   326,     0,   327,   328,     0,
       0,     0,     0,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,   337,     0,   338,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,   348,
     349,     0,     0,   350,   351,   352,   353,     0,     0,     0,
     354,   355,     0,     0,  2002,   356,     0,   357,   358,   359,
       0,   360,   361,   362,   363,     0,   364,   365,     0,     0,
       0,     0,     0,     0,     0,     0,   366,   367,   368,     0,
     755,   369,     0,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
       0,   384,     0,   385,   386,   387,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,     0,     0,   394,   395,
     396,   397,   398,     0,     0,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,   410,     0,   411,   412,     0,   413,   414,     0,   415,
       0,   416,     0,     0,   417,   418,   419,   420,  2003,   422,
     423,   424,   425,   426,   427,   428,     0,   429,   430,     0,
       0,     0,   431,   432,   433,   434,     0,     0,     0,   435,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,   450,     0,   451,     0,     0,
     452,     0,     0,   453,   454,     0,     0,     0,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,   467,     0,   468,   469,     0,
     470,     0,   471,   472,   473,   474,     0,     0,   475,   476,
       0,   477,   478,   479,   480,     0,     0,     0,     0,     0,
     481,   482,   483,     0,     0,     0,   484,   485,   486,   487,
    2004,   488,   489,     0,   490,   491,     0,   492,   493,     0,
       0,   494,     0,     0,   495,     0,   496,     0,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,     0,     0,
     501,     0,     0,     0,   502,   503,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,     0,   509,   510,     0,
     511,   512,   513,     0,   142,   514,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,     0,   161,     0,     0,     0,   162,     0,     0,
       0,   163,     0,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,     0,     0,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,     0,
     206,     0,     0,   207,     0,     0,   208,     0,   209,     0,
       0,   210,     0,   211,     0,     0,     0,   212,   213,   214,
       0,     0,   215,     0,     0,     0,     0,   216,   217,     0,
       0,     0,     0,   218,   219,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,     0,
     252,   253,   254,     0,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,     0,     0,   267,   268,   269,
       0,   270,     0,     0,     0,   271,   272,     0,     0,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,     0,   283,   284,
       0,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   293,     0,
       0,   294,     0,     0,   295,   296,     0,     0,     0,     0,
       0,   297,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,  2001,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,     0,   323,
     324,   325,   326,     0,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,   337,     0,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,   348,   349,     0,     0,
     350,   351,   352,   353,     0,     0,     0,   354,   355,     0,
       0,  2002,   356,     0,   357,   358,   359,     0,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,   755,   369,     0,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,     0,   384,     0,
     385,   386,   387,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   429,   430,     0,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,     0,
     436,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,     0,   475,   476,     0,   477,   478,
     479,   480,     0,     0,     0,     0,     0,   481,   482,   483,
       0,     0,     0,   484,   485,   486,   487,  2004,   488,   489,
       0,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,     0,   496,     0,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,     0,     0,   501,     0,     0,
       0,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,   142,   514,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,  1427,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,  1428,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,   645,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,   139,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,   142,   514,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,   161,     0,     0,
       0,   162,     0,     0,     0,   163,     0,     0,   164,   165,
     166,     0,   167,     0,   168,   169,     0,     0,   170,     0,
       0,   171,   172,     0,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,     0,   206,     0,     0,   207,     0,     0,
     208,     0,   209,     0,     0,   210,     0,   211,     0,     0,
       0,   212,   213,   214,     0,     0,   215,     0,     0,     0,
       0,   216,   217,     0,     0,     0,     0,   218,   219,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   227,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,   232,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,     0,   252,   253,   254,     0,     0,   255,
       0,     0,     0,   256,     0,   257,     0,   258,     0,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,     0,
       0,   267,   268,   269,     0,   270,     0,     0,     0,   271,
     272,     0,     0,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,     0,   283,   284,     0,     0,     0,   285,     0,   286,
     287,     0,   288,   289,     0,     0,     0,   290,     0,     0,
     291,   292,   293,     0,     0,   294,     0,     0,   295,   296,
       0,     0,     0,     0,     0,   297,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,  2001,     0,     0,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,     0,   323,   324,   325,   326,     0,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,   337,     0,   338,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
     348,   349,     0,     0,   350,   351,   352,   353,     0,     0,
       0,   354,   355,     0,     0,  2002,   356,     0,   357,   358,
     359,     0,   360,   361,   362,   363,     0,   364,   365,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,   368,
       0,   755,   369,     0,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,     0,   384,     0,   385,   386,   387,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,   410,     0,   411,   412,     0,   413,   414,     0,
     415,     0,   416,     0,     0,   417,   418,   419,   420,  4019,
     422,   423,   424,   425,   426,   427,   428,     0,   429,   430,
       0,     0,     0,   431,   432,   433,   434,     0,     0,     0,
     435,     0,     0,     0,   436,     0,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,   454,     0,     0,     0,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,     0,   475,
     476,     0,   477,   478,   479,   480,     0,     0,     0,     0,
       0,   481,   482,   483,     0,     0,     0,   484,   485,   486,
     487,  2004,   488,   489,     0,   490,   491,     0,   492,   493,
       0,     0,   494,     0,     0,   495,     0,   496,     0,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,     0,
       0,   501,     0,     0,     0,   502,   503,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,     0,   509,   510,
       0,   511,   512,   513,     0,   142,   514,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,   845,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,   645,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,   139,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,   142,   514,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,     0,     0,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,  1049,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,   217,     0,     0,     0,
       0,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,     0,   252,   253,
     254,     0,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,     0,     0,   267,   268,   269,     0,   270,
       0,     0,     0,   271,   272,     0,     0,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,   284,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   293,     0,     0,   294,
       0,     0,   295,   296,   645,     0,     0,     0,     0,   297,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
       0,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,   348,   349,     0,     0,   350,   351,
     352,   353,     0,     0,     0,   354,   355,     0,     0,     0,
     356,     0,   357,   358,   359,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,     0,   369,     0,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   429,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,   139,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,   484,   485,   486,   487,     0,   488,   489,     0,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,   142,
     514,   143,   144,   145,   146,   147,   148,  1464,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,     0,   161,     0,
       0,     0,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,   217,     0,     0,     0,     0,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,     0,   252,   253,   254,     0,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
       0,     0,   267,   268,   269,     0,   270,     0,     0,     0,
     271,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,   284,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   293,     0,     0,   294,     0,     0,   295,
     296,   645,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,   354,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,     0,   369,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
       0,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,   139,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,   484,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,   142,   514,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,   160,     0,   161,     0,     0,     0,   162,
       0,     0,     0,   163,     0,     0,   164,   165,   166,     0,
     167,     0,   168,   169,     0,     0,   170,     0,     0,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,     0,   206,     0,     0,   207,     0,     0,   208,     0,
     209,     0,     0,   210,     0,   211,     0,     0,     0,   212,
     213,   214,     0,     0,   215,     0,     0,     0,     0,   216,
     217,     0,     0,     0,  2465,   218,   219,     0,   220,     0,
       0,     0,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   227,     0,     0,   228,   229,   230,     0,     0,
       0,   231,     0,   232,   233,     0,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,     0,   252,   253,   254,     0,     0,   255,     0,     0,
       0,   256,     0,   257,     0,   258,     0,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,     0,     0,   267,
     268,   269,     0,   270,     0,     0,     0,   271,   272,     0,
       0,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,     0,   281,     0,   282,     0,     0,     0,     0,
     283,   284,     0,     0,     0,   285,     0,   286,   287,     0,
     288,   289,     0,     0,     0,   290,     0,     0,   291,   292,
     293,     0,     0,   294,     0,     0,   295,   296,   645,     0,
       0,     0,     0,   297,   298,     0,   299,     0,   300,     0,
     301,   302,     0,     0,     0,     0,     0,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
       0,   323,   324,   325,   326,     0,   327,   328,     0,     0,
       0,     0,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,   337,     0,   338,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,   348,   349,
       0,     0,   350,   351,   352,   353,     0,     0,     0,   354,
     355,     0,     0,     0,   356,     0,   357,   358,   359,     0,
     360,   361,   362,   363,     0,   364,   365,     0,     0,     0,
       0,     0,     0,     0,     0,   366,   367,   368,     0,     0,
     369,     0,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,     0,
     384,     0,   385,   386,   387,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,     0,     0,   394,   395,   396,
     397,   398,     0,     0,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
     410,     0,   411,   412,     0,   413,   414,     0,   415,     0,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   429,   430,     0,     0,
       0,   431,   432,   433,   434,     0,     0,     0,   435,     0,
       0,     0,   436,     0,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,   450,     0,   451,     0,     0,   452,
       0,     0,   453,   454,     0,     0,     0,   455,     0,     0,
     456,   457,     0,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
       0,   471,   472,   473,   474,     0,   139,   475,   476,     0,
     477,   478,   479,   480,     0,     0,     0,     0,     0,   481,
     482,   483,     0,     0,     0,   484,   485,   486,   487,     0,
     488,   489,     0,   490,   491,     0,   492,   493,     0,     0,
     494,     0,     0,   495,     0,   496,     0,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,     0,     0,   501,
       0,     0,     0,   502,   503,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,     0,   509,   510,     0,   511,
     512,   513,     0,   142,   514,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,  1427,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,     0,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,   645,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,   139,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
     142,   514,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,   160,     0,   161,
       0,     0,     0,   162,     0,     0,     0,   163,     0,     0,
     164,   165,   166,     0,   167,     0,   168,   169,     0,     0,
     170,     0,     0,   171,   172,     0,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,     0,   206,     0,     0,   207,
       0,     0,   208,     0,   209,     0,     0,   210,     0,   211,
       0,     0,     0,   212,   213,   214,     0,     0,   215,     0,
       0,     0,     0,   216,   217,     0,     0,     0,     0,   218,
     219,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,   232,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,     0,   252,   253,   254,     0,
       0,   255,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,     0,     0,   267,   268,   269,     0,   270,     0,     0,
       0,   271,   272,     0,     0,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,     0,   283,   284,     0,     0,     0,   285,
       0,   286,   287,     0,   288,   289,     0,     0,     0,   290,
       0,     0,   291,   292,   293,     0,     0,   294,     0,     0,
     295,   296,   645,     0,     0,     0,     0,   297,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,     0,     0,
       0,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,     0,   323,   324,   325,   326,     0,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,   337,     0,   338,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,   348,   349,     0,     0,   350,   351,   352,   353,
       0,     0,     0,   354,   355,     0,     0,     0,   356,     0,
     357,   358,   359,     0,   360,   361,   362,   363,     0,   364,
     365,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,   368,     0,     0,   369,     0,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,   409,     0,   410,     0,   411,   412,     0,   413,
     414,     0,   415,     0,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     429,   430,     0,     0,     0,   431,   432,   433,   434,     0,
       0,     0,   435,     0,     0,     0,   436,     0,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,   454,     0,     0,
       0,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
     139,   475,   476,     0,   477,   478,   479,   480,     0,     0,
       0,     0,     0,   481,   482,   483,     0,     0,     0,   484,
     485,   486,   487,     0,   488,   489,     0,   490,   491,     0,
     492,   493,     0,     0,   494,     0,     0,   495,     0,   496,
       0,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,     0,     0,   501,     0,     0,     0,   502,   503,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,     0,
     509,   510,     0,   511,   512,   513,     0,   142,   514,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,  2900,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,     0,   161,     0,     0,     0,
     162,     0,     0,     0,   163,     0,     0,   164,   165,   166,
       0,   167,     0,   168,   169,     0,     0,   170,     0,     0,
     171,   172,     0,   173,   174,     0,   175,   176,     0,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,     0,   206,     0,     0,   207,     0,     0,   208,
       0,   209,     0,     0,   210,     0,   211,     0,     0,     0,
     212,   213,   214,     0,     0,   215,     0,     0,     0,     0,
     216,   217,     0,     0,     0,     0,   218,   219,     0,   220,
       0,     0,     0,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   227,     0,     0,   228,   229,   230,     0,
       0,     0,   231,     0,   232,   233,     0,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,     0,   252,   253,   254,     0,     0,   255,     0,
       0,     0,   256,     0,   257,     0,   258,     0,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,     0,     0,
     267,   268,   269,     0,   270,     0,     0,     0,   271,   272,
       0,     0,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,     0,   281,     0,   282,     0,     0,     0,
       0,   283,   284,     0,     0,     0,   285,     0,   286,   287,
       0,   288,   289,     0,     0,     0,   290,     0,     0,   291,
     292,   293,     0,     0,   294,     0,     0,   295,   296,     0,
       0,     0,     0,     0,   297,   298,     0,   299,     0,   300,
       0,   301,   302,     0,     0,     0,     0,     0,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,     0,   323,   324,   325,   326,     0,   327,   328,     0,
       0,     0,     0,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,   337,     0,   338,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,   348,
     349,     0,     0,   350,   351,   352,   353,     0,     0,     0,
     354,   355,     0,     0,     0,   356,     0,   357,   358,   359,
       0,   360,   361,   362,   363,     0,   364,   365,     0,     0,
       0,     0,     0,     0,     0,     0,   366,   367,   368,     0,
       0,   369,     0,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
       0,   384,     0,   385,   386,   387,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,     0,     0,   394,   395,
     396,   397,   398,     0,     0,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,   410,     0,   411,   412,     0,   413,   414,     0,   415,
       0,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   429,   430,     0,
       0,     0,   431,   432,   433,   434,     0,     0,     0,   435,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,   450,     0,   451,     0,     0,
     452,     0,     0,   453,   454,     0,     0,     0,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,   467,     0,   468,   469,     0,
     470,     0,   471,   472,   473,   474,     0,   139,   475,   476,
       0,   477,   478,   479,   480,     0,     0,     0,     0,     0,
     481,   482,   483,     0,     0,     0,   484,   485,   486,   487,
       0,   488,   489,     0,   490,   491,     0,   492,   493,     0,
       0,   494,     0,     0,   495,     0,   496,     0,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,     0,     0,
     501,     0,     0,     0,   502,   503,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,     0,   509,   510,     0,
     511,   512,   513,     0,   142,   514,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,     0,   161,     0,     0,     0,   162,     0,     0,
       0,   163,     0,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,     0,     0,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,  4671,
     206,     0,     0,   207,     0,     0,   208,     0,   209,     0,
       0,   210,     0,   211,     0,     0,     0,   212,   213,   214,
       0,     0,   215,     0,     0,     0,     0,   216,   217,     0,
       0,     0,     0,   218,   219,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
    4672,   246,   247,   248,   249,     0,     0,   250,   251,     0,
     252,   253,   254,     0,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,     0,     0,   267,   268,   269,
       0,   270,     0,     0,     0,   271,   272,     0,     0,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,     0,   283,   284,
       0,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   293,     0,
       0,   294,     0,     0,   295,   296,     0,     0,     0,     0,
       0,   297,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,     0,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,     0,   323,
     324,   325,   326,     0,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,   337,     0,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,   348,   349,     0,     0,
     350,   351,   352,   353,     0,     0,     0,   354,   355,     0,
       0,     0,   356,     0,   357,   358,   359,     0,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,     0,   369,     0,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,     0,   384,     0,
     385,   386,   387,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   429,   430,     0,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,     0,
     436,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,     0,   475,   476,     0,   477,   478,
     479,   480,     0,     0,     0,     0,     0,   481,   482,   483,
       0,     0,     0,   484,   485,   486,   487,     0,   488,   489,
       0,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,     0,   496,     0,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,     0,     0,   501,     0,     0,
       0,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,   142,   514,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,     0,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,   587,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,   142,   514,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,   161,     0,     0,
       0,   162,     0,     0,     0,   163,     0,     0,   164,   165,
     166,     0,   167,     0,   168,   169,     0,     0,   170,     0,
       0,   171,   172,     0,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,     0,   206,     0,     0,   207,     0,     0,
     208,     0,   209,     0,     0,   210,     0,   211,     0,     0,
       0,   212,   213,   214,     0,     0,   215,     0,     0,     0,
       0,   216,   217,     0,     0,     0,     0,   218,   219,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   227,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,   232,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,     0,   252,   253,   254,     0,     0,   255,
       0,     0,     0,   256,  1115,   257,     0,   258,     0,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,     0,
       0,   267,   268,   269,     0,   270,     0,     0,     0,   271,
     272,     0,     0,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,     0,   283,   284,     0,     0,     0,   285,     0,   286,
     287,     0,   288,   289,     0,     0,     0,   290,     0,     0,
     291,   292,   293,     0,     0,   294,     0,     0,   295,   296,
       0,     0,     0,     0,     0,   297,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,     0,     0,     0,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,     0,   323,   324,   325,   326,     0,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,   337,     0,   338,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
     348,   349,     0,     0,   350,   351,   352,   353,     0,     0,
       0,   354,   355,     0,     0,     0,   356,     0,   357,   358,
     359,     0,   360,   361,   362,   363,     0,   364,   365,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,   368,
       0,     0,   369,     0,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,     0,   384,     0,   385,   386,   387,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,   410,     0,   411,   412,     0,   413,   414,     0,
     415,     0,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   429,   430,
       0,     0,     0,   431,   432,   433,   434,     0,     0,     0,
     435,     0,     0,     0,   436,     0,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,   454,     0,     0,     0,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,     0,   475,
     476,     0,   477,   478,   479,   480,     0,     0,     0,     0,
       0,   481,   482,   483,     0,     0,     0,   484,   485,   486,
     487,     0,   488,   489,     0,   490,   491,     0,   492,   493,
       0,     0,   494,     0,     0,   495,     0,   496,     0,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,     0,
       0,   501,     0,     0,     0,   502,   503,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,     0,   509,   510,
       0,   511,   512,   513,     0,   142,   514,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,   945,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,  1971,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,   142,   514,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,     0,     0,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,     0,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,   217,     0,     0,     0,
    2127,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,     0,   252,   253,
     254,     0,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,     0,     0,   267,   268,   269,     0,   270,
       0,     0,     0,   271,   272,     0,     0,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,   284,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   293,     0,     0,   294,
       0,     0,   295,   296,     0,     0,     0,     0,     0,   297,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
       0,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,   348,   349,     0,     0,   350,   351,
     352,   353,     0,     0,     0,   354,   355,     0,     0,     0,
     356,     0,   357,   358,   359,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,     0,   369,     0,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   429,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,     0,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,   484,   485,   486,   487,     0,   488,   489,     0,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,   142,
     514,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,   160,     0,   161,     0,
       0,     0,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,   168,   169,     0,     0,   170,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,   217,     0,     0,     0,   945,   218,   219,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   227,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,   232,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,     0,   252,   253,   254,     0,     0,
     255,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
       0,     0,   267,   268,   269,     0,   270,     0,     0,     0,
     271,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,   284,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,   291,   292,   293,     0,     0,   294,     0,     0,   295,
     296,     0,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,   354,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,   363,     0,   364,   365,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
     368,     0,     0,   369,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,   410,     0,   411,   412,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,     0,     0,     0,   431,   432,   433,   434,     0,     0,
       0,   435,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,   454,     0,     0,     0,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,     0,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,   484,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,   492,
     493,     0,     0,   494,     0,     0,   495,     0,   496,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
     510,     0,   511,   512,   513,     0,   142,   514,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,   160,     0,   161,     0,     0,     0,   162,
       0,     0,     0,   163,     0,     0,   164,   165,   166,     0,
     167,     0,   168,   169,     0,     0,   170,     0,     0,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,   196,
     197,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,     0,   206,     0,     0,   207,     0,     0,   208,     0,
     209,     0,     0,   210,     0,   211,     0,     0,     0,   212,
     213,   214,     0,     0,   215,     0,     0,     0,     0,   216,
     217,     0,     0,     0,     0,   218,   219,     0,   220,     0,
       0,     0,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   227,     0,     0,   228,   229,   230,     0,     0,
       0,   231,     0,   232,   233,     0,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,     0,   252,   253,   254,     0,     0,   255,     0,     0,
       0,   256,     0,   257,     0,   258,     0,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,     0,     0,   267,
     268,   269,     0,   270,     0,     0,     0,   271,   272,     0,
       0,     0,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,     0,   281,     0,   282,     0,     0,     0,     0,
     283,   284,     0,     0,     0,   285,     0,   286,   287,     0,
     288,   289,     0,     0,     0,   290,     0,     0,   291,   292,
     293,     0,     0,   294,     0,     0,   295,   296,     0,     0,
       0,     0,     0,   297,   298,     0,   299,     0,   300,     0,
     301,   302,     0,     0,     0,     0,     0,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
       0,   323,   324,   325,   326,     0,   327,   328,     0,     0,
       0,     0,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,   337,     0,   338,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,   348,   349,
       0,     0,   350,   351,   352,   353,     0,     0,     0,   354,
     355,     0,     0,     0,   356,     0,   357,   358,   359,     0,
     360,   361,   362,   363,     0,   364,   365,     0,     0,     0,
       0,     0,     0,     0,     0,   366,   367,   368,     0,     0,
     369,     0,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,  3100,
     384,     0,   385,   386,   387,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,     0,     0,   394,   395,   396,
     397,   398,     0,     0,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
     410,     0,   411,   412,     0,   413,   414,     0,   415,     0,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   429,   430,     0,     0,
       0,   431,   432,   433,   434,     0,     0,     0,   435,     0,
       0,     0,   436,     0,   437,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,   450,     0,   451,     0,     0,   452,
       0,     0,   453,   454,     0,     0,     0,   455,     0,     0,
     456,   457,     0,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
       0,   471,   472,   473,   474,     0,     0,   475,   476,     0,
     477,   478,   479,   480,     0,     0,     0,     0,     0,   481,
     482,   483,     0,     0,     0,   484,   485,   486,   487,     0,
     488,   489,     0,   490,   491,     0,   492,   493,     0,     0,
     494,     0,     0,   495,     0,   496,     0,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,     0,     0,   501,
       0,     0,     0,   502,   503,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,     0,   509,   510,     0,   511,
     512,   513,     0,   142,   514,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
     160,     0,   161,     0,     0,     0,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,   168,
     169,     0,     0,   170,     0,     0,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,   217,     0,     0,
       0,     0,   218,   219,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   228,   229,   230,     0,     0,     0,   231,     0,
     232,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,     0,   252,
     253,   254,     0,     0,   255,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,     0,     0,   267,   268,   269,     0,
     270,     0,     0,     0,   271,   272,     0,     0,     0,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,   284,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,     0,
       0,     0,   290,     0,     0,   291,   292,   293,     0,     0,
     294,     0,     0,   295,   296,     0,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,     0,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,   354,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
     363,     0,   364,   365,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,   368,     0,     0,   369,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,   410,     0,   411,
     412,     0,   413,   414,     0,   415,     0,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,     0,     0,     0,   431,   432,
     433,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
     454,     0,     0,     0,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,   139,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,   484,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,   492,   493,     0,     0,   494,     0,     0,
     495,     0,   496,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,     0,     0,     0,
       0,     0,     0,   509,   510,     0,   511,   512,   513,     0,
     142,   514,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,   160,     0,   161,
       0,     0,     0,   162,     0,     0,     0,   163,     0,     0,
     164,   165,   166,     0,   167,     0,   168,   169,     0,     0,
     170,     0,     0,   171,   172,     0,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,   196,   197,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,     0,   206,     0,     0,   207,
       0,     0,   208,     0,   209,     0,     0,   210,     0,   211,
       0,     0,     0,   212,   213,   214,     0,     0,   215,     0,
       0,     0,     0,   216,   217,     0,     0,     0,  3404,   218,
     219,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,   232,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,     0,   252,   253,   254,     0,
       0,   255,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,     0,     0,   267,   268,   269,     0,   270,     0,     0,
       0,   271,   272,     0,     0,     0,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,     0,   283,   284,     0,     0,     0,   285,
       0,   286,   287,     0,   288,   289,     0,     0,     0,   290,
       0,     0,   291,   292,   293,     0,     0,   294,     0,     0,
     295,   296,     0,     0,     0,     0,     0,   297,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,     0,     0,
       0,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,     0,   323,   324,   325,   326,     0,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,   337,     0,   338,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,   348,   349,     0,     0,   350,   351,   352,   353,
       0,     0,     0,   354,   355,     0,     0,     0,   356,     0,
     357,   358,   359,     0,   360,   361,   362,   363,     0,   364,
     365,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,   368,     0,     0,   369,     0,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,   409,     0,   410,     0,   411,   412,     0,   413,
     414,     0,   415,     0,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     429,   430,     0,     0,     0,   431,   432,   433,   434,     0,
       0,     0,   435,     0,     0,     0,   436,     0,   437,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,   454,     0,     0,
       0,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
       0,   475,   476,     0,   477,   478,   479,   480,     0,     0,
       0,     0,     0,   481,   482,   483,     0,     0,     0,   484,
     485,   486,   487,     0,   488,   489,     0,   490,   491,     0,
     492,   493,     0,     0,   494,     0,     0,   495,     0,   496,
       0,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,     0,     0,   501,     0,     0,     0,   502,   503,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,     0,
     509,   510,     0,   511,   512,   513,     0,   142,   514,   143,
     144,   145,   146,   147,   148,  3412,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,     0,   161,     0,     0,     0,
     162,     0,     0,     0,   163,     0,     0,   164,   165,   166,
       0,   167,     0,   168,   169,     0,     0,   170,     0,     0,
     171,   172,     0,   173,   174,     0,   175,   176,     0,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
     196,   197,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,     0,   206,     0,     0,   207,     0,     0,   208,
       0,   209,     0,     0,   210,     0,   211,     0,     0,     0,
     212,   213,   214,     0,     0,   215,     0,     0,     0,     0,
     216,   217,     0,     0,     0,     0,   218,   219,     0,   220,
       0,     0,     0,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   227,     0,     0,   228,   229,   230,     0,
       0,     0,   231,     0,   232,   233,     0,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,     0,   252,   253,   254,     0,     0,   255,     0,
       0,     0,   256,     0,   257,     0,   258,     0,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,     0,     0,
     267,   268,   269,     0,   270,     0,     0,     0,   271,   272,
       0,     0,     0,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,     0,   281,     0,   282,     0,     0,     0,
       0,   283,   284,     0,     0,     0,   285,     0,   286,   287,
       0,   288,   289,     0,     0,     0,   290,     0,     0,   291,
     292,   293,     0,     0,   294,     0,     0,   295,   296,     0,
       0,     0,     0,     0,   297,   298,     0,   299,     0,   300,
       0,   301,   302,     0,     0,     0,     0,     0,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,     0,   323,   324,   325,   326,     0,   327,   328,     0,
       0,     0,     0,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,   337,     0,   338,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,   348,
     349,     0,     0,   350,   351,   352,   353,     0,     0,     0,
     354,   355,     0,     0,     0,   356,     0,   357,   358,   359,
       0,   360,   361,   362,   363,     0,   364,   365,     0,     0,
       0,     0,     0,     0,     0,     0,   366,   367,   368,     0,
       0,   369,     0,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
       0,   384,     0,   385,   386,   387,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,     0,     0,   394,   395,
     396,   397,   398,     0,     0,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,   410,     0,   411,   412,     0,   413,   414,     0,   415,
       0,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   429,   430,     0,
       0,     0,   431,   432,   433,   434,     0,     0,     0,   435,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,   450,     0,   451,     0,     0,
     452,     0,     0,   453,   454,     0,     0,     0,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,   467,     0,   468,   469,     0,
     470,     0,   471,   472,   473,   474,     0,     0,   475,   476,
       0,   477,   478,   479,   480,     0,     0,     0,     0,     0,
     481,   482,   483,     0,     0,     0,   484,   485,   486,   487,
       0,   488,   489,     0,   490,   491,     0,   492,   493,     0,
       0,   494,     0,     0,   495,     0,   496,     0,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,     0,     0,
     501,     0,     0,     0,   502,   503,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,     0,   509,   510,     0,
     511,   512,   513,     0,   142,   514,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,     0,   161,     0,     0,     0,   162,     0,     0,
       0,   163,     0,     0,   164,   165,   166,     0,   167,     0,
     168,   169,     0,     0,   170,     0,     0,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,     0,
     206,     0,     0,   207,     0,     0,   208,     0,   209,     0,
       0,   210,     0,   211,     0,     0,     0,   212,   213,   214,
       0,     0,   215,     0,     0,     0,     0,   216,   217,     0,
       0,     0,     0,   218,   219,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,   232,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,     0,
     252,   253,   254,     0,     0,   255,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,     0,     0,   267,   268,   269,
       0,   270,     0,     0,     0,   271,   272,     0,     0,     0,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,     0,   283,   284,
       0,     0,     0,   285,     0,   286,   287,     0,   288,   289,
       0,     0,     0,   290,     0,     0,   291,   292,   293,     0,
       0,   294,     0,     0,   295,   296,     0,     0,     0,     0,
       0,   297,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,     0,     0,     0,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,     0,   323,
     324,   325,   326,     0,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,   337,     0,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,   348,   349,     0,     0,
     350,   351,   352,   353,     0,     0,     0,   354,   355,     0,
       0,     0,   356,     0,   357,   358,   359,     0,   360,   361,
     362,   363,     0,   364,   365,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,   368,     0,     0,   369,     0,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,  3422,   384,     0,
     385,   386,   387,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,   410,     0,
     411,   412,     0,   413,   414,     0,   415,     0,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   429,   430,     0,     0,     0,   431,
     432,   433,   434,     0,     0,     0,   435,     0,     0,     0,
     436,     0,   437,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,   454,     0,     0,     0,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,     0,   475,   476,     0,   477,   478,
     479,   480,     0,     0,     0,     0,     0,   481,   482,   483,
       0,     0,     0,   484,   485,   486,   487,     0,   488,   489,
       0,   490,   491,     0,   492,   493,     0,     0,   494,     0,
       0,   495,     0,   496,     0,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,     0,     0,   501,     0,     0,
       0,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,     0,   509,   510,     0,   511,   512,   513,
       0,   142,   514,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
     161,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,   168,   169,     0,
       0,   170,     0,     0,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,   217,     0,     0,     0,  3440,
     218,   219,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   227,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,   232,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,     0,   252,   253,   254,
       0,     0,   255,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,     0,     0,   267,   268,   269,     0,   270,     0,
       0,     0,   271,   272,     0,     0,     0,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,   284,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,     0,     0,     0,
     290,     0,     0,   291,   292,   293,     0,     0,   294,     0,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,     0,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,   354,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,   363,     0,
     364,   365,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,   368,     0,     0,   369,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,   410,     0,   411,   412,     0,
     413,   414,     0,   415,     0,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   429,   430,     0,     0,     0,   431,   432,   433,   434,
       0,     0,     0,   435,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,   454,     0,
       0,     0,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
     484,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,   492,   493,     0,     0,   494,     0,     0,   495,     0,
     496,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,     0,
       0,   509,   510,     0,   511,   512,   513,     0,   142,   514,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,   161,     0,     0,
       0,   162,     0,     0,     0,   163,     0,     0,   164,   165,
     166,     0,   167,     0,   168,   169,     0,     0,   170,     0,
       0,   171,   172,     0,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,     0,   206,     0,     0,   207,     0,     0,
     208,     0,   209,     0,     0,   210,     0,   211,     0,     0,
       0,   212,   213,   214,     0,     0,   215,     0,     0,     0,
       0,   216,   217,     0,     0,     0,     0,   218,   219,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   227,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,   232,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,     0,   252,   253,   254,     0,     0,   255,
       0,     0,     0,   256,     0,   257,     0,   258,     0,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,     0,
       0,   267,   268,   269,     0,   270,     0,     0,     0,   271,
     272,     0,     0,     0,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,     0,   283,   284,     0,     0,     0,   285,     0,   286,
     287,     0,   288,   289,     0,     0,     0,   290,     0,     0,
     291,   292,   293,     0,     0,   294,     0,     0,   295,   296,
       0,     0,     0,     0,     0,   297,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,     0,     0,     0,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,     0,   323,   324,   325,   326,     0,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,   337,     0,   338,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
     348,   349,     0,     0,   350,   351,   352,   353,     0,     0,
       0,   354,   355,     0,     0,     0,   356,     0,   357,   358,
     359,     0,   360,   361,   362,   363,     0,   364,   365,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,   368,
       0,     0,   369,     0,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,  4330,   384,     0,   385,   386,   387,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,   410,     0,   411,   412,     0,   413,   414,     0,
     415,     0,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   429,   430,
       0,     0,     0,   431,   432,   433,   434,     0,     0,     0,
     435,     0,     0,     0,   436,     0,   437,   438,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,   454,     0,     0,     0,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,     0,   475,
     476,     0,   477,   478,   479,   480,     0,     0,     0,     0,
       0,   481,   482,   483,     0,     0,     0,   484,   485,   486,
     487,     0,   488,   489,     0,   490,   491,     0,   492,   493,
       0,     0,   494,     0,     0,   495,     0,   496,     0,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,     0,
       0,   501,     0,     0,     0,   502,   503,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,     0,   509,   510,
       0,   511,   512,   513,     0,   142,   514,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,   160,     0,   161,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,   168,   169,     0,     0,   170,     0,     0,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,   217,
       0,     0,     0,     0,   218,   219,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   227,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,   232,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
       0,   252,   253,   254,     0,     0,   255,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,     0,     0,   267,   268,
     269,     0,   270,     0,     0,     0,   271,   272,     0,     0,
       0,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
     284,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,     0,     0,     0,   290,     0,     0,   291,   292,   293,
       0,     0,   294,     0,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,     0,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,   354,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,   363,     0,   364,   365,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,   368,     0,     0,   369,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,   410,
       0,   411,   412,     0,   413,   414,     0,   415,     0,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,     0,     0,     0,
     431,   432,   433,   434,     0,     0,     0,   435,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,   454,     0,     0,     0,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,   484,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,   492,   493,     0,     0,   494,
       0,     0,   495,     0,   496,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,     0,     0,     0,   509,   510,     0,   511,   512,
     513,     0,   142,   514,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,   168,   169,
       0,     0,   170,     0,     0,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,     0,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,   217,     0,     0,     0,
       0,   218,   219,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   227,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,   232,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,     0,   252,  1887,
     254,     0,     0,   255,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,     0,     0,   267,   268,   269,     0,   270,
       0,     0,     0,   271,   272,     0,     0,     0,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,   284,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,     0,     0,
       0,   290,     0,     0,   291,   292,   293,     0,     0,   294,
       0,     0,   295,   296,     0,     0,     0,     0,     0,   297,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
       0,     0,     0,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,   348,   349,     0,     0,   350,  1888,
     352,   353,     0,     0,     0,   354,   355,     0,     0,     0,
     356,     0,   357,   358,   359,     0,   360,   361,   362,   363,
       0,   364,   365,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,   368,     0,     0,   369,     0,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,   410,     0,   411,   412,
       0,   413,   414,     0,   415,     0,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   429,   430,     0,     0,     0,   431,   432,   433,
     434,     0,     0,     0,   435,     0,     0,     0,   436,     0,
     437,   438,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,   454,
       0,     0,     0,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,     0,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,   484,   485,   486,   487,     0,   488,   489,     0,   490,
     491,     0,   492,   493,     0,     0,   494,     0,     0,   495,
       0,   496,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,     0,   509,   510,     0,   511,   512,   513,     0,   142,
     514,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,     0,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,     0,  -372,     0,
       0,     0,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   170,
    4157,     0,   171,   172,     0,   173,     0,     0,     0,     0,
       0,   177,   178,   179,   180,  4158,   182,   183,     0,   184,
     185,     0,     0,     0,     0,     0,     0,   191,     0,   193,
       0,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,     0,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,     0,     0,     0,     0,     0,   218,     0,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,     0,     0,     0,   228,   229,
     230,     0,  -342,  -342,   231,     0,  -342,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,  4159,   252,   253,   254,     0,     0,
       0,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,     0,   265,     0,   266,     0,
       0,     0,     0,   268,   269,     0,     0,     0,     0,     0,
       0,   272,     0,     0,     0,   273,   274,   275,   276,   277,
    4160,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,     0,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,  4161,     0,     0,   290,     0,
       0,     0,   292,   293,     0,     0,   294,  4162,     0,   295,
     296,     0,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,  -327,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,     0,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,  4163,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   367,
     368,     0,     0,     0,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,     0,     0,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,     0,     0,   406,     0,   408,  -327,
       0,   409,     0,     0,     0,   411,     0,     0,   413,   414,
       0,   415,  4164,   416,     0,     0,   417,     0,   419,   420,
     421,   422,   423,   424,   425,     0,   427,   428,     0,   429,
       0,     0,     0,     0,   431,   432,   433,     0,     0,     0,
       0,   435,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   441,   442,     0,   443,     0,   445,     0,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,     0,     0,     0,     0,
     455,     0,     0,     0,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,     0,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,     0,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
       0,     0,     0,   494,     0,     0,   495,     0,     0,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,  -327,     0,     0,     0,   509,
       0,     0,   511,     0,   513,     0,   142,   514,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,     0,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,     0,  -372,     0,     0,     0,   162,
       0,     0,     0,   163,     0,     0,   164,   165,   166,     0,
     167,     0,     0,     0,     0,     0,   170,  4157,     0,   171,
     172,     0,   173,     0,     0,     0,     0,     0,   177,   178,
     179,   180,  4158,   182,   183,     0,   184,   185,     0,     0,
       0,     0,     0,     0,   191,     0,   193,     0,   195,   196,
     197,   198,     0,   199,   200,     0,   201,   202,   203,     0,
     205,     0,   206,     0,     0,   207,     0,     0,   208,     0,
     209,     0,     0,   210,     0,   211,     0,     0,     0,   212,
     213,   214,     0,     0,   215,     0,     0,     0,     0,   216,
       0,     0,     0,     0,     0,   218,     0,     0,   220,     0,
       0,     0,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,     0,     0,     0,   228,   229,   230,     0,  -363,
       0,   231,     0,  -363,   233,     0,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,  4159,   252,   253,   254,     0,     0,     0,     0,     0,
       0,   256,     0,   257,     0,   258,     0,   259,   260,   261,
     262,   263,     0,   265,     0,   266,     0,     0,     0,     0,
     268,   269,     0,     0,     0,     0,     0,     0,   272,     0,
       0,     0,   273,   274,   275,   276,   277,  4160,     0,   278,
     279,   280,     0,   281,     0,   282,     0,     0,     0,     0,
     283,     0,     0,     0,     0,   285,     0,   286,   287,     0,
     288,   289,  4161,     0,     0,   290,     0,     0,     0,   292,
     293,     0,     0,   294,  4162,     0,   295,   296,     0,     0,
       0,     0,     0,   297,   298,     0,   299,     0,   300,     0,
     301,   302,     0,     0,     0,     0,  -327,     0,     0,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
       0,   323,   324,   325,   326,     0,   327,   328,     0,     0,
       0,     0,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,   337,     0,   338,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,   348,   349,
       0,     0,   350,   351,   352,   353,     0,     0,     0,     0,
     355,     0,     0,     0,   356,     0,   357,   358,   359,     0,
     360,   361,   362,  4163,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   367,   368,     0,     0,
       0,     0,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,     0,     0,     0,   382,   383,     0,
     384,     0,   385,   386,   387,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,     0,     0,   394,   395,   396,
     397,   398,     0,     0,   399,   400,   401,   402,   403,     0,
     404,     0,     0,   406,     0,   408,  -327,     0,   409,     0,
       0,     0,   411,     0,     0,   413,   414,     0,   415,  4164,
     416,     0,     0,   417,     0,   419,   420,   421,   422,   423,
     424,   425,     0,   427,   428,     0,   429,     0,     0,     0,
       0,   431,   432,   433,     0,     0,     0,     0,   435,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   441,   442,
       0,   443,     0,   445,     0,   447,   448,     0,     0,     0,
       0,     0,     0,   449,   450,     0,   451,     0,     0,   452,
       0,     0,   453,     0,     0,     0,     0,   455,     0,     0,
       0,   457,     0,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
       0,   471,   472,   473,   474,     0,     0,   475,   476,     0,
     477,   478,   479,   480,     0,     0,     0,     0,     0,   481,
     482,   483,     0,     0,     0,     0,   485,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,     0,     0,     0,
     494,     0,     0,   495,     0,     0,     0,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,     0,     0,   501,
       0,     0,     0,   502,   503,   504,   505,   506,   507,   508,
    -363,     0,  -327,     0,     0,     0,   509,     0,     0,   511,
       0,   513,     0,   142,   514,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
       0,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,     0,  -372,     0,     0,     0,   162,     0,     0,     0,
     163,     0,     0,   164,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   170,  4157,     0,   171,   172,     0,   173,
       0,     0,     0,     0,     0,   177,   178,   179,   180,  4158,
     182,   183,     0,   184,   185,     0,     0,     0,     0,     0,
       0,   191,     0,   193,     0,   195,   196,   197,   198,     0,
     199,   200,     0,   201,   202,   203,     0,   205,     0,   206,
       0,     0,   207,     0,     0,   208,     0,   209,     0,     0,
     210,     0,   211,     0,     0,     0,   212,   213,   214,     0,
       0,   215,     0,     0,     0,     0,   216,     0,     0,     0,
       0,     0,   218,     0,     0,   220,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,     0,
       0,     0,   228,   229,   230,     0,  -360,     0,   231,     0,
    -360,   233,     0,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,     0,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,  4159,   252,
     253,   254,     0,     0,     0,     0,     0,     0,   256,     0,
     257,     0,   258,     0,   259,   260,   261,   262,   263,     0,
     265,     0,   266,     0,     0,     0,     0,   268,   269,     0,
       0,     0,     0,     0,     0,   272,     0,     0,     0,   273,
     274,   275,   276,   277,  4160,     0,   278,   279,   280,     0,
     281,     0,   282,     0,     0,     0,     0,   283,     0,     0,
       0,     0,   285,     0,   286,   287,     0,   288,   289,  4161,
       0,     0,   290,     0,     0,     0,   292,   293,     0,     0,
     294,  4162,     0,   295,   296,     0,     0,     0,     0,     0,
     297,   298,     0,   299,     0,   300,     0,   301,   302,     0,
       0,     0,     0,  -327,     0,     0,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,     0,   323,   324,
     325,   326,     0,   327,   328,     0,     0,     0,     0,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
     337,     0,   338,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,   348,   349,     0,     0,   350,
     351,   352,   353,     0,     0,     0,     0,   355,     0,     0,
       0,   356,     0,   357,   358,   359,     0,   360,   361,   362,
    4163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   367,   368,     0,     0,     0,     0,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,     0,     0,   382,   383,     0,   384,     0,   385,
     386,   387,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,     0,     0,   394,   395,   396,   397,   398,     0,
       0,   399,   400,   401,   402,   403,     0,   404,     0,     0,
     406,     0,   408,  -327,     0,   409,     0,     0,     0,   411,
       0,     0,   413,   414,     0,   415,  4164,   416,     0,     0,
     417,     0,   419,   420,   421,   422,   423,   424,   425,     0,
     427,   428,     0,   429,     0,     0,     0,     0,   431,   432,
     433,     0,     0,     0,     0,   435,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   441,   442,     0,   443,     0,
     445,     0,   447,   448,     0,     0,     0,     0,     0,     0,
     449,   450,     0,   451,     0,     0,   452,     0,     0,   453,
       0,     0,     0,     0,   455,     0,     0,     0,   457,     0,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,   467,     0,   468,   469,     0,   470,     0,   471,   472,
     473,   474,     0,     0,   475,   476,     0,   477,   478,   479,
     480,     0,     0,     0,     0,     0,   481,   482,   483,     0,
       0,     0,     0,   485,   486,   487,     0,   488,   489,     0,
     490,   491,     0,     0,     0,     0,     0,   494,     0,     0,
     495,     0,     0,     0,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,     0,     0,   501,     0,     0,     0,
     502,   503,   504,   505,   506,   507,   508,  -360,     0,  -327,
       0,     0,     0,   509,     0,     0,   511,     0,   513,     0,
     142,   514,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,     0,  -372,
       0,     0,     0,   162,     0,     0,     0,   163,     0,     0,
     164,   165,   166,     0,   167,     0,     0,     0,     0,     0,
     170,  4157,     0,   171,   172,     0,   173,     0,     0,     0,
       0,     0,   177,   178,   179,   180,  4158,   182,   183,     0,
     184,   185,     0,     0,     0,     0,     0,     0,   191,     0,
     193,     0,   195,   196,   197,   198,     0,   199,   200,     0,
     201,   202,   203,     0,   205,     0,   206,     0,     0,   207,
       0,     0,   208,     0,   209,     0,     0,   210,     0,   211,
       0,     0,     0,   212,   213,   214,     0,     0,   215,     0,
       0,     0,     0,   216,     0,     0,     0,     0,     0,   218,
       0,     0,   220,     0,     0,     0,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,     0,     0,     0,   228,
     229,   230,     0,     0,     0,   231,     0,  4539,   233,     0,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,  4159,   252,   253,   254,     0,
       0,     0,     0,     0,     0,   256,     0,   257,     0,   258,
       0,   259,   260,   261,   262,   263,     0,   265,     0,   266,
       0,     0,     0,     0,   268,   269,     0,     0,     0,     0,
       0,     0,   272,     0,     0,     0,   273,   274,   275,   276,
     277,  4160,     0,   278,   279,   280,     0,   281,     0,   282,
       0,     0,     0,     0,   283,     0,     0,     0,     0,   285,
       0,   286,   287,     0,   288,   289,  4161,     0,     0,   290,
       0,     0,     0,   292,   293,     0,     0,   294,  4162,     0,
     295,   296,     0,     0,     0,     0,     0,   297,   298,     0,
     299,     0,   300,     0,   301,   302,     0,     0,     0,     0,
    -327,     0,     0,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,     0,   323,   324,   325,   326,     0,
     327,   328,     0,     0,     0,     0,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,   337,     0,   338,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,   348,   349,     0,     0,   350,   351,   352,   353,
       0,     0,     0,     0,   355,     0,     0,     0,   356,     0,
     357,   358,   359,     0,   360,   361,   362,  4163,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     367,   368,     0,     0,     0,     0,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,     0,     0,
       0,   382,   383,     0,   384,     0,   385,   386,   387,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,     0,
       0,   394,   395,   396,   397,   398,     0,     0,   399,   400,
     401,   402,   403,     0,   404,     0,     0,   406,     0,   408,
    -327,     0,   409,     0,     0,     0,   411,     0,     0,   413,
     414,     0,   415,  4164,   416,     0,     0,   417,     0,   419,
     420,   421,   422,   423,   424,   425,     0,   427,   428,     0,
     429,     0,     0,     0,     0,   431,   432,   433,     0,     0,
       0,     0,   435,     0,     0,     0,     0,     0,     0,   438,
       0,     0,   441,   442,     0,   443,     0,   445,     0,   447,
     448,     0,     0,     0,     0,     0,     0,   449,   450,     0,
     451,     0,     0,   452,     0,     0,   453,     0,     0,     0,
       0,   455,     0,     0,     0,   457,     0,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,     0,   471,   472,   473,   474,     0,
       0,   475,   476,     0,   477,   478,   479,   480,     0,     0,
       0,     0,     0,   481,   482,   483,     0,     0,     0,     0,
     485,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,     0,     0,     0,   494,     0,     0,   495,     0,     0,
       0,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,     0,     0,   501,     0,     0,     0,   502,   503,   504,
     505,   506,   507,   508,     0,     0,  -327,     0,     0,     0,
     509,     0,     0,   511,     0,   513,     0,   142,   514,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,     0,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,     0,  -372,     0,     0,     0,
     162,     0,     0,     0,   163,     0,     0,   164,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   170,  4157,     0,
     171,   172,     0,   173,     0,     0,     0,     0,     0,   177,
     178,   179,   180,  4158,   182,   183,     0,   184,   185,     0,
       0,     0,     0,     0,     0,   191,     0,   193,     0,   195,
     196,   197,   198,     0,   199,   200,     0,   201,   202,   203,
       0,   205,     0,   206,     0,     0,   207,     0,     0,   208,
       0,   209,     0,     0,   210,     0,   211,     0,     0,     0,
     212,   213,   214,     0,     0,   215,     0,     0,     0,     0,
     216,     0,     0,     0,     0,     0,   218,     0,     0,   220,
       0,     0,     0,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,     0,     0,     0,   228,   229,   230,     0,
       0,     0,   231,     0,  -365,   233,     0,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,  4159,   252,   253,   254,     0,     0,     0,     0,
       0,     0,   256,     0,   257,     0,   258,     0,   259,   260,
     261,   262,   263,     0,   265,     0,   266,     0,     0,     0,
       0,   268,   269,     0,     0,     0,     0,     0,     0,   272,
       0,     0,     0,   273,   274,   275,   276,   277,  4160,     0,
     278,   279,   280,     0,   281,     0,   282,     0,     0,     0,
       0,   283,     0,     0,     0,     0,   285,     0,   286,   287,
       0,   288,   289,  4161,     0,     0,   290,     0,     0,     0,
     292,   293,     0,     0,   294,  4162,     0,   295,   296,     0,
       0,     0,     0,     0,   297,   298,     0,   299,     0,   300,
       0,   301,   302,     0,     0,     0,     0,  -327,     0,     0,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,     0,   323,   324,   325,   326,     0,   327,   328,     0,
       0,     0,     0,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,   337,     0,   338,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,   348,
     349,     0,     0,   350,   351,   352,   353,     0,     0,     0,
       0,   355,     0,     0,     0,   356,     0,   357,   358,   359,
       0,   360,   361,   362,  4163,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   367,   368,     0,
       0,     0,     0,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,     0,     0,   382,   383,
       0,   384,     0,   385,   386,   387,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,     0,     0,   394,   395,
     396,   397,   398,     0,     0,   399,   400,   401,   402,   403,
       0,   404,     0,     0,   406,     0,   408,  -327,     0,   409,
       0,     0,     0,   411,     0,     0,   413,   414,     0,   415,
    4164,   416,     0,     0,   417,     0,   419,   420,   421,   422,
     423,   424,   425,     0,   427,   428,     0,   429,     0,     0,
       0,     0,   431,   432,   433,     0,     0,     0,     0,   435,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   441,
     442,     0,   443,     0,   445,     0,   447,   448,     0,     0,
       0,     0,     0,     0,   449,   450,     0,   451,     0,     0,
     452,     0,     0,   453,     0,     0,     0,     0,   455,     0,
       0,     0,   457,     0,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,   467,     0,   468,   469,     0,
     470,     0,   471,   472,   473,   474,     0,     0,   475,   476,
       0,   477,   478,   479,   480,     0,     0,     0,     0,     0,
     481,   482,   483,     0,     0,     0,     0,   485,   486,   487,
       0,   488,   489,     0,   490,   491,     0,     0,     0,     0,
       0,   494,     0,     0,   495,     0,     0,     0,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,     0,     0,
     501,     0,     0,     0,   502,   503,   504,   505,   506,   507,
     508,     0,     0,  -327,     0,     0,     0,   509,     0,     0,
     511,     0,   513,     0,   142,   514,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,     0,  -372,     0,     0,     0,   162,     0,     0,
       0,   163,     0,     0,   164,   165,   166,     0,   167,     0,
       0,     0,     0,     0,   170,  4157,     0,   171,   172,     0,
     173,     0,     0,     0,     0,     0,   177,   178,   179,   180,
    4158,   182,   183,     0,   184,   185,     0,     0,     0,     0,
       0,     0,   191,     0,   193,     0,   195,   196,   197,   198,
       0,   199,   200,     0,   201,   202,   203,     0,   205,     0,
     206,     0,     0,   207,     0,     0,   208,     0,   209,     0,
       0,   210,     0,   211,     0,     0,     0,   212,   213,   214,
       0,     0,   215,     0,     0,     0,     0,   216,     0,     0,
       0,     0,     0,   218,     0,     0,   220,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
       0,     0,     0,   228,   229,   230,     0,     0,     0,   231,
       0,  4676,   233,     0,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,  4159,
     252,   253,   254,     0,     0,     0,     0,     0,     0,   256,
       0,   257,     0,   258,     0,   259,   260,   261,   262,   263,
       0,   265,     0,   266,     0,     0,     0,     0,   268,   269,
       0,     0,     0,     0,     0,     0,   272,     0,     0,     0,
     273,   274,   275,   276,   277,  4160,     0,   278,   279,   280,
       0,   281,     0,   282,     0,     0,     0,     0,   283,     0,
       0,     0,     0,   285,     0,   286,   287,     0,   288,   289,
    4161,     0,     0,   290,     0,     0,     0,   292,   293,     0,
       0,   294,  4162,     0,   295,   296,     0,     0,     0,     0,
       0,   297,   298,     0,   299,     0,   300,     0,   301,   302,
       0,     0,     0,     0,  -327,     0,     0,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,     0,   323,
     324,   325,   326,     0,   327,   328,     0,     0,     0,     0,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,   337,     0,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,   348,   349,     0,     0,
     350,   351,   352,   353,     0,     0,     0,     0,   355,     0,
       0,     0,   356,     0,   357,   358,   359,     0,   360,   361,
     362,  4163,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   367,   368,     0,     0,     0,     0,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,     0,     0,   382,   383,     0,   384,     0,
     385,   386,   387,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,     0,     0,   394,   395,   396,   397,   398,
       0,     0,   399,   400,   401,   402,   403,     0,   404,     0,
       0,   406,     0,   408,  -327,     0,   409,     0,     0,     0,
     411,     0,     0,   413,   414,     0,   415,  4164,   416,     0,
       0,   417,     0,   419,   420,   421,   422,   423,   424,   425,
       0,   427,   428,     0,   429,     0,     0,     0,     0,   431,
     432,   433,     0,     0,     0,     0,   435,     0,     0,     0,
       0,     0,     0,   438,     0,     0,   441,   442,     0,   443,
       0,   445,     0,   447,   448,     0,     0,     0,     0,     0,
       0,   449,   450,     0,   451,     0,     0,   452,     0,     0,
     453,     0,     0,     0,     0,   455,     0,     0,     0,   457,
       0,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,     0,   471,
     472,   473,   474,     0,     0,   475,   476,     0,   477,   478,
     479,   480,     0,     0,     0,     0,     0,   481,   482,   483,
       0,     0,     0,     0,   485,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,     0,     0,     0,   494,     0,
       0,   495,     0,     0,     0,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,     0,     0,   501,     0,     0,
       0,   502,   503,   504,   505,   506,   507,   508,     0,     0,
    -327,     0,     0,     0,   509,     0,     0,   511,     0,   513,
       0,   142,   514,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,     0,
    -372,     0,     0,     0,   162,     0,     0,     0,   163,     0,
       0,   164,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   170,  4157,     0,   171,   172,     0,   173,     0,     0,
       0,     0,     0,   177,   178,   179,   180,  4158,   182,   183,
       0,   184,   185,     0,     0,     0,     0,     0,     0,   191,
       0,   193,     0,   195,   196,   197,   198,     0,   199,   200,
       0,   201,   202,   203,     0,   205,     0,   206,     0,     0,
     207,     0,     0,   208,     0,   209,     0,     0,   210,     0,
     211,     0,     0,     0,   212,   213,   214,     0,     0,   215,
       0,     0,     0,     0,   216,     0,     0,     0,     0,     0,
     218,     0,     0,   220,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,     0,     0,     0,
     228,   229,   230,     0,     0,     0,   231,     0,  4729,   233,
       0,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,  4159,   252,   253,   254,
       0,     0,     0,     0,     0,     0,   256,     0,   257,     0,
     258,     0,   259,   260,   261,   262,   263,     0,   265,     0,
     266,     0,     0,     0,     0,   268,   269,     0,     0,     0,
       0,     0,     0,   272,     0,     0,     0,   273,   274,   275,
     276,   277,  4160,     0,   278,   279,   280,     0,   281,     0,
     282,     0,     0,     0,     0,   283,     0,     0,     0,     0,
     285,     0,   286,   287,     0,   288,   289,  4161,     0,     0,
     290,     0,     0,     0,   292,   293,     0,     0,   294,  4162,
       0,   295,   296,     0,     0,     0,     0,     0,   297,   298,
       0,   299,     0,   300,     0,   301,   302,     0,     0,     0,
       0,  -327,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,     0,   323,   324,   325,   326,
       0,   327,   328,     0,     0,     0,     0,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,   337,     0,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,   348,   349,     0,     0,   350,   351,   352,
     353,     0,     0,     0,     0,   355,     0,     0,     0,   356,
       0,   357,   358,   359,     0,   360,   361,   362,  4163,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   367,   368,     0,     0,     0,     0,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,     0,
       0,     0,   382,   383,     0,   384,     0,   385,   386,   387,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
       0,     0,   394,   395,   396,   397,   398,     0,     0,   399,
     400,   401,   402,   403,     0,   404,     0,     0,   406,     0,
     408,  -327,     0,   409,     0,     0,     0,   411,     0,     0,
     413,   414,     0,   415,  4164,   416,     0,     0,   417,     0,
     419,   420,   421,   422,   423,   424,   425,     0,   427,   428,
       0,   429,     0,     0,     0,     0,   431,   432,   433,     0,
       0,     0,     0,   435,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   441,   442,     0,   443,     0,   445,     0,
     447,   448,     0,     0,     0,     0,     0,     0,   449,   450,
       0,   451,     0,     0,   452,     0,     0,   453,     0,     0,
       0,     0,   455,     0,     0,     0,   457,     0,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,     0,   471,   472,   473,   474,
       0,     0,   475,   476,     0,   477,   478,   479,   480,     0,
       0,     0,     0,     0,   481,   482,   483,     0,     0,     0,
       0,   485,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,     0,     0,     0,   494,     0,     0,   495,     0,
       0,     0,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,     0,     0,   501,     0,     0,     0,   502,   503,
     504,   505,   506,   507,   508,     0,     0,  -327,     0,     0,
       0,   509,     0,     0,   511,     0,   513,     0,   142,   514,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,     0,  -372,     0,     0,
       0,   162,     0,     0,     0,   163,     0,     0,   164,   165,
     166,     0,   167,     0,     0,     0,     0,     0,   170,  4157,
       0,   171,   172,     0,   173,     0,     0,     0,     0,     0,
     177,   178,   179,   180,  4158,   182,   183,     0,   184,   185,
       0,     0,     0,     0,     0,     0,   191,     0,   193,     0,
     195,   196,   197,   198,     0,   199,   200,     0,   201,   202,
     203,     0,   205,     0,   206,     0,     0,   207,     0,     0,
     208,     0,   209,     0,     0,   210,     0,   211,     0,     0,
       0,   212,   213,   214,     0,     0,   215,     0,     0,     0,
       0,   216,     0,     0,     0,     0,     0,   218,     0,     0,
     220,     0,     0,     0,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,     0,     0,     0,   228,   229,   230,
       0,     0,     0,   231,     0,  -346,   233,     0,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,  4159,   252,   253,   254,     0,     0,     0,
       0,     0,     0,   256,     0,   257,     0,   258,     0,   259,
     260,   261,   262,   263,     0,   265,     0,   266,     0,     0,
       0,     0,   268,   269,     0,     0,     0,     0,     0,     0,
     272,     0,     0,     0,   273,   274,   275,   276,   277,  4160,
       0,   278,   279,   280,     0,   281,     0,   282,     0,     0,
       0,     0,   283,     0,     0,     0,     0,   285,     0,   286,
     287,     0,   288,   289,  4161,     0,     0,   290,     0,     0,
       0,   292,   293,     0,     0,   294,  4162,     0,   295,   296,
       0,     0,     0,     0,     0,   297,   298,     0,   299,     0,
     300,     0,   301,   302,     0,     0,     0,     0,  -327,     0,
       0,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     321,   322,     0,   323,   324,   325,   326,     0,   327,   328,
       0,     0,     0,     0,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,   337,     0,   338,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
     348,   349,     0,     0,   350,   351,   352,   353,     0,     0,
       0,     0,   355,     0,     0,     0,   356,     0,   357,   358,
     359,     0,   360,   361,   362,  4163,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   367,   368,
       0,     0,     0,     0,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,     0,     0,   382,
     383,     0,   384,     0,   385,   386,   387,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,     0,     0,   394,
     395,   396,   397,   398,     0,     0,   399,   400,   401,   402,
     403,     0,   404,     0,     0,   406,     0,   408,  -327,     0,
     409,     0,     0,     0,   411,     0,     0,   413,   414,     0,
     415,  4164,   416,     0,     0,   417,     0,   419,   420,   421,
     422,   423,   424,   425,     0,   427,   428,     0,   429,     0,
       0,     0,     0,   431,   432,   433,     0,     0,     0,     0,
     435,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     441,   442,     0,   443,     0,   445,     0,   447,   448,     0,
       0,     0,     0,     0,     0,   449,   450,     0,   451,     0,
       0,   452,     0,     0,   453,     0,     0,     0,     0,   455,
       0,     0,     0,   457,     0,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,     0,   471,   472,   473,   474,     0,     0,   475,
     476,     0,   477,   478,   479,   480,     0,     0,     0,     0,
       0,   481,   482,   483,     0,     0,     0,     0,   485,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,     0,
       0,     0,   494,     0,     0,   495,     0,     0,     0,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,     0,
       0,   501,     0,     0,     0,   502,   503,   504,   505,   506,
     507,   508,     0,     0,  -327,     0,     0,     0,   509,     0,
       0,   511,     0,   513,     0,   142,   514,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,     0,  -372,     0,     0,     0,   162,     0,
       0,     0,   163,     0,     0,   164,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   170,  4157,     0,   171,   172,
       0,   173,     0,     0,     0,     0,     0,   177,   178,   179,
     180,  4158,   182,   183,     0,   184,   185,     0,     0,     0,
       0,     0,     0,   191,     0,   193,     0,   195,   196,   197,
     198,     0,   199,   200,     0,   201,   202,   203,     0,   205,
       0,   206,     0,     0,   207,     0,     0,   208,     0,   209,
       0,     0,   210,     0,   211,     0,     0,     0,   212,   213,
     214,     0,     0,   215,     0,     0,     0,     0,   216,     0,
       0,     0,     0,     0,   218,     0,     0,   220,     0,     0,
       0,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,     0,     0,     0,   228,   229,   230,     0,     0,     0,
     231,     0,     0,   233,     0,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,   242,   243,     0,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
    4159,   252,   253,   254,     0,     0,     0,     0,     0,     0,
     256,     0,   257,     0,   258,     0,   259,   260,   261,   262,
     263,     0,   265,     0,   266,     0,     0,     0,     0,   268,
     269,     0,     0,     0,     0,     0,     0,   272,     0,     0,
       0,   273,   274,   275,   276,   277,  4160,     0,   278,   279,
     280,     0,   281,     0,   282,     0,     0,     0,     0,   283,
       0,     0,     0,     0,   285,     0,   286,   287,     0,   288,
     289,  4161,     0,     0,   290,     0,     0,     0,   292,   293,
       0,     0,   294,  4162,     0,   295,   296,     0,     0,     0,
       0,     0,   297,   298,     0,   299,     0,   300,     0,   301,
     302,     0,     0,     0,     0,  -327,     0,     0,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,     0,
     323,   324,   325,   326,     0,   327,   328,     0,     0,     0,
       0,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,   337,     0,   338,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,   348,   349,     0,
       0,   350,   351,   352,   353,     0,     0,     0,     0,   355,
       0,     0,     0,   356,     0,   357,   358,   359,     0,   360,
     361,   362,  4163,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   367,   368,     0,     0,     0,
       0,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,     0,     0,   382,   383,     0,   384,
       0,   385,   386,   387,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,     0,     0,   394,   395,   396,   397,
     398,     0,     0,   399,   400,   401,   402,   403,     0,   404,
       0,     0,   406,     0,   408,  -327,     0,   409,     0,     0,
       0,   411,     0,     0,   413,   414,     0,   415,  4164,   416,
       0,     0,   417,     0,   419,   420,   421,   422,   423,   424,
     425,     0,   427,   428,     0,   429,     0,     0,     0,     0,
     431,   432,   433,     0,     0,     0,     0,   435,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   441,   442,     0,
     443,     0,   445,     0,   447,   448,     0,     0,     0,     0,
       0,     0,   449,   450,     0,   451,     0,     0,   452,     0,
       0,   453,     0,     0,     0,     0,   455,     0,     0,     0,
     457,     0,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,     0,
     471,   472,   473,   474,     0,     0,   475,   476,     0,   477,
     478,   479,   480,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,     0,   485,   486,   487,     0,   488,
     489,     0,   490,   491,     0,     0,     0,     0,     0,   494,
       0,     0,   495,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,     0,     0,   501,     0,
       0,     0,   502,   503,   504,   505,   506,   507,   508,     0,
       0,  -327,     0,     0,     0,   509,     0,     0,   511,     0,
     513,     0,   142,   514,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
       0,  -372,     0,     0,     0,   162,     0,     0,     0,   163,
       0,     0,   164,   165,   166,     0,   167,     0,     0,     0,
       0,     0,   170,  4157,     0,   171,   172,     0,   173,     0,
       0,     0,     0,     0,   177,   178,   179,   180,  4158,   182,
     183,     0,   184,   185,     0,     0,     0,     0,     0,     0,
     191,     0,   193,     0,   195,   196,   197,   198,     0,   199,
     200,     0,   201,   202,   203,     0,   205,     0,   206,     0,
       0,   207,     0,     0,   208,     0,   209,     0,     0,   210,
       0,   211,     0,     0,     0,   212,   213,   214,     0,     0,
     215,     0,     0,     0,     0,   216,     0,     0,     0,     0,
       0,   218,     0,     0,   220,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,     0,     0,
       0,   228,   229,   230,     0,     0,     0,   231,     0,     0,
     233,     0,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,  4159,   252,   253,
     254,     0,     0,     0,     0,     0,     0,   256,     0,   257,
       0,   258,     0,   259,   260,   261,   262,   263,     0,   265,
       0,   266,     0,     0,     0,     0,   268,   269,     0,     0,
       0,     0,     0,     0,   272,     0,     0,     0,   273,   274,
     275,   276,   277,  4160,     0,   278,   279,   280,     0,   281,
       0,   282,     0,     0,     0,     0,   283,     0,     0,     0,
       0,   285,     0,   286,   287,     0,   288,   289,  4161,     0,
       0,   290,     0,     0,     0,   292,   293,     0,     0,   294,
    4162,     0,   295,   296,     0,     0,     0,     0,     0,   297,
     298,     0,   299,     0,   300,     0,   301,   302,     0,     0,
       0,     0,  -327,     0,     0,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,     0,   323,   324,   325,
     326,     0,   327,   328,     0,     0,     0,     0,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,   337,
       0,   338,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,   348,   349,     0,     0,   350,   351,
     352,   353,     0,     0,     0,     0,   355,     0,     0,     0,
     356,     0,   357,   358,   359,     0,   360,   361,   362,  4163,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   367,   368,     0,     0,     0,     0,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,     0,     0,   382,   383,     0,   384,     0,   385,   386,
     387,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,     0,     0,   394,   395,   396,   397,   398,     0,     0,
     399,   400,   401,   402,   403,     0,   404,     0,     0,   406,
       0,   408,  -327,     0,   409,     0,     0,     0,   411,     0,
       0,   413,   414,     0,   415,  4164,   416,     0,     0,   417,
       0,   419,   420,   421,   422,   423,   424,   425,     0,   427,
     428,     0,   429,     0,     0,     0,     0,   431,   432,   433,
       0,     0,     0,     0,   435,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   441,   442,     0,   443,     0,   445,
       0,   447,   448,     0,     0,     0,     0,     0,     0,   449,
     450,     0,   451,     0,     0,   452,     0,     0,   453,     0,
       0,     0,     0,   455,     0,     0,     0,   457,     0,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,     0,   471,   472,   473,
     474,     0,     0,   475,   476,     0,   477,   478,   479,   480,
       0,     0,     0,     0,     0,   481,   482,   483,     0,     0,
       0,     0,   485,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,     0,     0,     0,   494,     0,     0,  4542,
       0,     0,     0,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,     0,     0,   501,     0,     0,     0,   502,
     503,   504,   505,   506,   507,   508,     0,     0,  -327,     0,
       0,     0,   509,     0,     0,   511,     0,   513,     0,   142,
     514,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,     0,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,     0,     0,     0,
       0,     0,   162,     0,     0,     0,   163,     0,     0,   164,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   170,
       0,     0,   171,   172,     0,   173,     0,     0,     0,     0,
       0,   177,   178,   179,   180,     0,   182,   183,     0,   184,
     185,     0,     0,     0,     0,     0,     0,   191,     0,   193,
       0,   195,   196,   197,   198,     0,   199,   200,     0,   201,
     202,   203,     0,   205,     0,   206,     0,     0,   207,     0,
       0,   208,     0,   209,     0,     0,   210,     0,   211,     0,
       0,     0,   212,   213,   214,     0,     0,   215,     0,     0,
       0,     0,   216,     0,     0,     0,     0,     0,   218,     0,
       0,   220,     0,     0,     0,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,     0,     0,     0,   228,   229,
     230,     0,     0,     0,   231,     0,     0,   233,     0,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,     0,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,     0,   252,   253,   254,     0,     0,
       0,     0,     0,     0,   256,     0,   257,     0,   258,     0,
     259,   260,   261,   262,   263,     0,   265,     0,   266,     0,
       0,     0,     0,   268,   269,     0,     0,     0,     0,     0,
       0,   272,     0,     0,     0,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,   281,     0,   282,     0,
       0,     0,     0,   283,     0,     0,     0,     0,   285,     0,
     286,   287,     0,   288,   289,     0,     0,     0,   290,     0,
       0,     0,   292,   293,     0,     0,   294,     0,     0,   295,
     296,     0,     0,     0,     0,     0,   297,   298,     0,   299,
       0,   300,     0,   301,   302,     0,     0,     0,     0,     0,
       0,     0,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,     0,   323,   324,   325,   326,     0,   327,
     328,     0,     0,     0,     0,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,   337,     0,   338,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,   348,   349,     0,     0,   350,   351,   352,   353,     0,
       0,     0,     0,   355,     0,     0,     0,   356,     0,   357,
     358,   359,     0,   360,   361,   362,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   367,
     368,     0,     0,     0,     0,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,     0,     0,
     382,   383,     0,   384,     0,   385,   386,   387,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,     0,     0,
     394,   395,   396,   397,   398,     0,     0,   399,   400,   401,
     402,   403,     0,   404,     0,     0,   406,     0,   408,     0,
       0,   409,     0,     0,     0,   411,     0,     0,   413,   414,
       0,   415,     0,   416,     0,     0,   417,     0,   419,   420,
     421,   422,   423,   424,   425,     0,   427,   428,     0,   429,
       0,     0,     0,     0,   431,   432,   433,     0,     0,     0,
       0,   435,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   441,   442,     0,   443,     0,   445,     0,   447,   448,
       0,     0,     0,     0,     0,     0,   449,   450,     0,   451,
       0,     0,   452,     0,     0,   453,     0,     0,     0,     0,
     455,     0,     0,     0,   457,     0,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,   467,     0,   468,
     469,     0,   470,     0,   471,   472,   473,   474,     0,     0,
     475,   476,     0,   477,   478,   479,   480,     0,     0,     0,
       0,     0,   481,   482,   483,     0,     0,     0,     0,   485,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
       0,     0,     0,   494,     0,     0,   495,     0,     0,     0,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
       0,     0,   501,     0,     0,     0,   502,   503,   504,   505,
     506,   507,   508,     0,     0,     0,     0,     0,     0,   509,
       0,     0,   511,     0,   513,     0,     0,   514
};

static const yytype_int16 yycheck[] =
{
       6,   599,  1042,   671,  1043,   577,  1189,   622,  1221,   948,
     949,    20,  1221,    19,   928,  1319,  1147,    23,   641,  1634,
     959,    30,  1947,  1948,   527,   128,  1599,    33,    37,  1782,
     598,   599,  2117,     6,    40,  2117,   996,    43,  1119,  1467,
    1365,   971,    48,  1467,   738,  1165,  1630,  1631,  1447,    55,
     544,   545,   546,  2537,   548,   542,   550,  2437,  2399,   553,
    1597,   555,  3038,  2610,  1244,   641,   996,  3357,  1286,  1252,
    1253,  1251,  1346,  1256,  1257,  1258,  1259,   969,  1261,  1262,
    1263,  1264,  1265,  1266,  1267,  1268,  2220,  2793,  1577,  1319,
    2672,     4,  2880,    99,   691,  2361,   834,  2945,  2232,  3084,
    1156,   836,  3089,   679,   561,   997,   602,  2323,   561,   605,
     667,   668,  1373,  1047,    23,  2548,  1858,   123,  2459,   125,
    1015,   127,   128,   129,  1047,  2507,  1932,  2117,  1478,  2187,
    2187,  2575,  1621,  2566,  2567,   592,  2233,   805,   134,   592,
    2502,  3039,  2577,  2115,  3558,  3239,  2581,  3630,  1498,    27,
    2115,  3153,   125,    18,   127,  2510,  1506,  1507,  2593,  2954,
      13,    17,    18,    13,  2519,    20,    37,  1567,   903,    54,
    2605,  3169,    21,    63,    17,    18,    20,   680,   681,   682,
    2098,    76,    13,  1078,    66,    22,     9,    50,    69,    22,
      99,    17,    18,    20,    20,  2723,  2724,   794,   795,   796,
      37,  2729,  1946,  2731,  3177,   119,    29,    11,  2203,   806,
     133,    84,    33,    36,    51,  2187,  2566,  2567,   675,    22,
      17,    18,  2187,  1037,  1038,    62,    63,    84,   117,    62,
      63,  2317,  2687,  2174,    37,   197,    18,   998,  2107,    20,
      88,   164,    17,    18,    13,  2678,  2679,   279,    51,  2981,
    2726,   171,   197,  3012,   152,  4093,   204,    71,   295,    62,
      63,    85,    84,  1077,    59,   202,   372,   184,  3670,   382,
      17,    18,    92,   133,   290,   237,    37,   388,  3004,  4391,
     355,  3448,   296,   333,   219,   168,    27,   378,   133,  3015,
     139,  3707,   237,   369,    74,    17,    18,   262,   467,   164,
     154,   133,    90,   378,   164,   237,    39,   406,   278,   164,
     433,   403,   315,   168,   137,   458,   198,    17,    18,   164,
    2053,  4472,    13,   281,  4475,   201,    39,   241,  2678,  2679,
     237,  3745,  3746,    25,   350,  3749,  3626,    17,    18,    17,
      18,   168,    13,    13,   838,   138,   158,  2709,   373,  2711,
    4108,    17,    18,    13,  3768,   565,   388,  2867,    12,  1577,
      42,  3775,   536,  4261,   285,   447,   244,   158,   368,  1874,
     751,  1876,   201,   201,    13,   832,   233,   597,   235,  1061,
    1062,   175,    76,   487,    17,    18,    73,   168,   530,   296,
     555,   164,   773,  2311,   559,    67,   164,   145,    91,   365,
     366,    17,    18,  1621,   164,   786,   787,   264,    17,    18,
     204,   233,   160,   235,   184,   138,   241,    67,   455,   433,
     113,    73,   564,  3825,  1106,   428,   255,    17,    18,   532,
      20,  3914,   158,  1938,  1939,  1940,   656,    76,   246,  2089,
     265,   606,   264,   565,   618,   323,   528,   255,   448,   370,
     276,   279,   662,  2963,   479,   248,   138,   148,   561,   120,
    2455,  1155,   123,   566,   401,  1037,  1038,    17,    18,   237,
      20,  3490,   420,    17,    18,  1169,  3878,   148,   148,   201,
     134,   199,  4633,  1522,   176,  2516,   362,  2570,   148,   592,
     223,   224,    22,   989,   663,    17,    18,  4395,  2484,   464,
     153,  1440,   505,   244,    21,   168,   279,    37,   296,   632,
     223,   224,   429,   563,   657,   296,  2873,    54,   476,   279,
     536,    51,   429,  4281,   456,   624,   532,   168,   534,  2891,
    2892,   387,    62,    63,   390,   610,   418,  1040,   392,   371,
     590,  4653,   648,  3957,  1282,   551,   657,    17,    18,   625,
     663,   655,  3966,  3348,   315,   561,   562,  3352,    17,    18,
     566,   387,   568,   655,   390,   597,   657,   504,  4406,  1968,
      17,    18,   675,   368,  3864,   581,  3990,   512,   463,  1247,
    1472,  3995,   323,  1475,    66,   393,   592,  1479,   260,  1481,
     387,  3297,   598,   390,   631,   565,  2976,   495,  2570,   168,
    2089,    54,   608,  1338,  1534,  2570,  2524,   520,   428,   389,
     260,   559,   387,   496,  1832,   390,   420,  1509,  1510,   433,
     469,   627,   139,   637,   505,  1319,  2115,  1810,  1932,  2687,
    2687,    17,    18,  1567,   482,   641,  3395,   643,  1821,  2629,
     387,  1824,   168,   390,  1567,  1132,  1133,   609,    17,    18,
     656,  3084,   433,  3359,  3386,   661,   569,   663,  1255,   429,
     630,   667,   668,  3665,   609,   387,   672,   673,   390,   675,
    4086,  1158,  3398,   679,   505,  1272,  1411,   199,  2028,  1166,
     686,  1168,  3137,   656,  3410,  2174,  1620,   387,   456,   602,
     390,   608,   605,  1180,  1181,  1182,   609,  1620,  2187,  2568,
    1435,  1188,  1932,  3136,  3430,  3431,   626,   387,  2794,   387,
     390,  1606,   390,  2708,   364,  2687,   598,  2461,  3444,    17,
      18,   387,  2687,   527,   390,   598,   640,   617,   422,   832,
     833,  3898,   738,   556,   623,  1292,   505,  2655,   661,  2680,
     657,  1555,  2660,  1504,    17,    18,  3594,   578,  1804,   576,
    2668,  2669,   661,   576,   387,   576,  2674,   390,   595,   622,
     655,   584,   595,  3310,   586,   589,   610,   632,  2168,   632,
    1346,   387,   657,  3746,   390,   632,  2509,   581,   387,   657,
    1911,   390,  3780,   620,   655,   641,  3136,   610,   610,  1412,
    3152,  3885,   595,   799,   576,   801,   661,   387,   641,   648,
     390,   661,   655,  4205,   660,   655,   661,  3705,    17,    18,
     603,  1368,  4710,   610,  1310,   641,   661,   629,   655,   623,
     826,   827,   828,   829,   830,   831,   832,   833,  1385,   835,
     836,   657,   565,   496,   487,   841,  1412,   387,   629,  1577,
     390,  4243,  4325,   387,   641,   948,   390,   950,  4015,   536,
     953,   954,   565,  1476,   827,   496,   637,   630,   831,  4026,
     657,   555,   835,  3658,  3659,   387,   641,   970,   390,  2406,
     630,  2089,   878,   545,    17,    18,    17,    18,  3880,   529,
     603,   656,   657,  1621,   536,   891,   580,   657,   661,  2814,
    4057,    17,    18,   661,   641,   545,  1392,   903,   904,  2549,
    1476,   661,   908,   629,   380,    17,    18,  2522,   569,   656,
     657,   572,    17,    18,   632,   368,  3935,   387,  3001,   641,
     390,  2952,  2953,  3303,    17,    18,   463,   496,   387,  2915,
     327,   390,  2857,    17,    18,   657,  3420,  4161,  4162,   175,
     387,   641,   948,   390,   950,    17,    18,   953,   954,  3306,
      17,    18,   469,  1456,    17,    18,  2174,   657,   184,   441,
    3342,   641,   259,   641,   970,  1537,  1538,  1539,   204,  2187,
     496,    17,    18,   278,   112,   641,  3317,   657,   656,   657,
     138,  3428,   891,  3709,   897,    17,    18,  2658,   638,  3074,
     656,   657,  3074,  3348,  3356,   904,  4410,  3352,  4412,   908,
     663,   387,   655,  1571,   390,    35,   659,   136,   641,  1015,
     463,    18,    49,    17,    18,  1954,   378,   840,   387,  3547,
    2593,   390,   663,   656,   657,   641,    17,    18,  3556,  3001,
    4513,  3893,   641,  1727,  3478,  1974,  3001,  1043,    17,    18,
     656,   657,   495,  1039,  3479,    17,    18,   656,   657,    17,
      18,   641,  1628,  3399,   378,    17,    18,    17,    18,   673,
    2549,  1067,   227,  2023,  2492,   595,  2494,  2495,   204,    46,
    2494,  2495,  1078,  3549,  2257,   378,   989,  2883,   991,  3137,
    3137,  2570,  4319,  3180,  3074,   380,   616,   617,  2830,   387,
     248,   641,   390,  2023,   663,    27,  4083,   641,  2058,   487,
    3018,   816,  3020,  1838,  2378,   420,  1112,  1113,  1114,  1115,
    4402,  3029,   656,   657,   387,    13,   378,   390,   201,   641,
      17,    18,  2014,   212,  2205,  3043,   241,  3343,  2058,    17,
      18,  1234,  3050,  3051,   656,  2027,   433,   663,  2030,  2031,
      17,    18,   149,    74,   187,  3063,  3064,  3065,    12,  1155,
     405,  3069,  3070,  2503,  2334,   586,   259,  2418,  1067,   168,
    1895,   637,  4147,  1169,   220,  3137,  1623,   296,  1271,   252,
    1623,   641,  3137,     6,   130,  4342,   376,  4467,   387,   610,
     378,   390,   641,   220,  1919,  1920,   656,  3105,  4355,   366,
     199,  2680,  2945,   233,   641,   235,   285,   201,  2687,   378,
     130,   916,  3730,   429,   131,  3733,  1115,    17,    18,   265,
     657,   315,   527,  4380,  3397,  1221,   830,  1320,  3401,  3402,
    2340,  2341,   635,  4515,  2437,   255,  1823,    60,  1234,  2124,
     368,  2414,    17,    18,  2168,  3763,  3764,  3765,  1932,   416,
      17,    18,   173,  3771,   387,  2168,   387,   390,   278,   390,
     148,  3779,  3728,  3729,   149,   641,  1828,   161,   655,  3735,
     246,   387,  3738,  3739,   390,  1271,   581,   655,   172,   255,
    1276,   657,   641,  1376,  3721,   387,   279,  2333,   390,  3755,
     147,  4409,   387,  1840,   420,   390,  1292,  2343,   657,  2887,
    2888,  2889,   109,  3769,   387,   657,  4533,   390,   456,  3775,
    3776,  3777,  3778,   387,   402,   388,   390,  2520,   623,  2846,
     565,  2520,   244,  1319,  1320,   387,   138,  3235,   390,   152,
     387,  4545,  4546,   390,   387,   630,   253,   390,   371,   487,
     433,  2549,  1338,   657,  1906,    17,    18,   293,   345,   244,
    1346,   387,   637,   641,   390,  1351,  3017,  1353,    13,  3695,
    1356,  2089,   450,  1849,   657,   387,    17,    18,   390,   657,
      17,    18,  1368,   293,    17,    18,    17,    18,   641,   507,
    1376,   536,   245,   565,  3045,  3046,    17,    18,   355,  1385,
    1386,  1978,   608,   387,   657,   388,   390,  4372,  4373,   262,
    4252,   323,  4254,    17,    18,   657,   387,  1310,   237,   390,
     565,   274,  4250,   492,  3538,  1411,  1412,   393,   387,  1415,
      27,   390,   442,    17,    18,   387,   372,  1423,   390,   387,
    1426,   655,   390,   559,   288,   387,   248,   387,   390,  1435,
     390,  4668,   641,  4670,    17,    18,  2174,   369,  3011,  3012,
    1446,  1447,   372,   480,  1357,   603,  3712,  1356,   657,  2187,
     345,  1457,  1458,  1459,  1460,  1461,  1462,   657,   389,   657,
     138,  1467,  2680,   655,   369,   332,  4703,  1473,  1474,  2687,
    1476,  1574,  4457,     9,  1480,   568,  1933,  1386,   657,  1392,
    1933,  4269,   386,   148,  1457,  1458,  1459,   496,  1461,   487,
     387,   498,   499,   390,   481,  1501,  4202,   655,   641,   387,
     641,  1474,   390,  4740,  4741,  2933,  4796,  1480,   435,  3692,
     387,  4487,  3001,   390,   657,   641,   657,    17,    18,   377,
    1623,    55,  4104,  4105,    17,    18,  4654,  4655,   215,   641,
     438,   657,    66,   366,    17,    18,   641,   199,  3918,  1452,
     583,  2480,   381,   192,   559,   657,  2677,   405,   641,   166,
    1556,  1460,   657,  1462,   134,   617,   599,   641,   620,   657,
    2183,  2064,  4109,  2837,  2838,  2839,  1479,   487,  1574,   641,
     248,    17,    18,   657,   641,   262,  4060,   387,   641,  2883,
     390,    17,    18,  1589,    21,   657,   487,   279,  1594,  1595,
     657,   632,  1501,  3813,   657,   641,   134,   487,   471,   432,
    1606,   434,   387,    17,    18,   390,     0,  2183,   540,   641,
     387,   657,    82,   390,    41,   542,   657,  1623,   415,   268,
     166,   487,  1628,   409,   487,   657,   288,   244,   136,  2710,
    2810,  1637,   588,  1639,   456,   540,  2961,   641,   220,   646,
     647,   648,   649,   650,   651,   652,   653,  1556,  3137,   164,
     641,   280,   656,  2883,   283,  2868,   192,   655,   588,  2868,
     564,   106,   641,   409,    84,   487,   657,  1580,   541,   641,
     656,   293,   168,   641,   254,    17,    18,  3811,   657,   641,
    1589,   641,   565,   265,   592,   657,  1595,   656,   657,   657,
     565,    17,    18,   625,  3549,   657,   388,   657,   244,    17,
      18,   388,   139,   168,  2643,   387,   323,   565,   390,   215,
    4090,    17,    18,  2448,  4147,  3313,   254,   225,  4059,   368,
     625,  1727,  1728,   632,  4198,  4199,   387,   513,   198,   390,
     387,   116,  2863,   390,   387,   655,   387,   390,  1841,   390,
    2337,  4461,  2229,  4463,   641,  3282,   387,  2234,   657,   390,
     372,   285,   369,   641,   655,   650,   651,   652,   653,   656,
    2247,    17,    18,   387,   641,   655,   390,   513,   656,   711,
     712,   241,   655,  3993,    17,    18,  3996,  3071,   456,   656,
     655,   603,  1788,   387,    17,    18,   390,   175,   296,   655,
     175,   632,   655,   659,  2281,   265,    17,    18,    62,    63,
     245,   430,  2378,   534,   387,  3099,   655,   390,   610,   487,
      74,  2549,    84,   233,   663,   235,   657,   262,     9,   204,
     551,   134,  3395,   369,  1830,  1831,  2449,    17,    18,   274,
    1933,   641,  1838,   655,  1840,  1841,  3049,   663,    17,    18,
    3049,  3594,    33,   785,   264,   433,   656,  1853,  1951,    17,
      18,    37,  1858,    18,   656,   657,   641,  1863,    17,    18,
    1866,    20,   649,  2350,   641,   503,   454,  1873,  1874,   656,
    1876,   656,  4346,  2449,   633,   634,  4350,    63,  3796,   656,
    3735,    17,    18,  3738,  3739,    17,    18,   387,  3873,  1895,
     390,   130,  1898,    13,   387,   201,  1902,   390,   657,   236,
    3755,   255,   490,   845,   387,   456,  3479,   390,    17,    18,
     355,   215,  3897,  1919,  1920,  1921,  1922,   130,  2486,  3137,
     241,   275,  1831,   540,  3842,   603,  1932,  1933,    17,    18,
      17,    18,  1938,  1939,  1940,   487,  1849,  3336,   241,  4372,
    4373,   387,  2680,   495,   390,  1951,    17,    18,   418,  2687,
     655,   387,    17,    18,   390,   194,    17,    18,   663,   641,
      61,   151,  1968,   601,  1873,  1874,  2880,  1876,  2928,    17,
      18,    40,   244,   387,   656,   649,   390,   655,   241,    48,
     641,   194,   656,  1989,   641,    17,    18,   236,   641,  1898,
     641,   301,   302,  1902,   540,   656,    17,    18,  2928,   656,
     641,    17,    18,   656,  1917,   656,   644,   317,   625,   215,
      17,    18,  1921,  1922,   555,   656,   143,   641,   559,  3344,
    2959,    17,    18,  2029,  4457,   487,   471,   382,   148,  1938,
    1939,  1940,   656,   201,  3230,   420,  3156,   641,  3234,  2045,
     657,    17,    18,  4517,  4518,   387,  2052,  2939,   390,    17,
      18,   252,   656,    50,   293,   201,  2062,  2063,   641,  2065,
    2066,   387,   614,   615,   390,  3185,  3186,   559,  1007,   387,
     562,  1984,   390,   656,  1013,  1014,    17,    18,   615,   625,
     293,   387,  2185,   184,   390,   610,  3206,   188,  2191,  2062,
    2063,   363,    20,  3224,  3307,   187,   541,   369,   199,    17,
      18,    17,    18,   655,   531,   225,   495,  1049,   506,   536,
      84,   657,   201,  3407,  3698,  3699,   506,  2220,  2124,   296,
    2029,   656,   549,  4041,  4042,  4043,   559,   554,   661,  2232,
    2865,   387,   657,   372,   390,   445,   446,   562,   663,   656,
     657,   641,  3355,  2052,   387,   663,  3355,   390,   641,    18,
    4002,  3445,   614,   615,   387,   582,   656,   390,   641,   372,
     610,  2074,  3456,   656,   384,  3459,   387,   439,   559,   390,
    2083,  2084,   576,   656,   559,   604,   213,  2183,   106,  2185,
     527,  2094,  2095,  2096,  2097,  2191,  2099,  2100,   655,  2883,
     198,  2197,   166,   655,  2200,   641,   581,   387,    17,    18,
     390,   656,   657,   656,   657,   641,  1339,   657,   387,  1342,
     656,   390,  1345,   663,  2220,   660,   656,   657,     6,   387,
     656,   655,   390,  2326,   656,   657,  2232,   641,   387,   655,
     331,   390,   615,   616,   655,   618,   164,   620,   623,   655,
     168,   565,   656,   655,  2816,   656,   657,   656,   657,   656,
     657,   387,   655,  2356,   390,   387,   656,   657,   390,    17,
      18,  2837,  2838,  2839,  2887,  2888,  2889,   663,   540,   130,
     244,   199,   133,   365,   366,   656,   657,   655,   387,   371,
     149,   390,   655,   320,   321,   106,  3417,   215,   325,   326,
     655,    13,   655,   221,   656,   657,  4221,   655,   387,   641,
     387,   390,   655,   390,   656,   657,   475,   655,   116,  4161,
    4162,  2887,  2888,  2889,   656,   641,   387,   245,  2805,   390,
    2326,   593,   387,   641,   252,   390,   387,   655,   429,   390,
     656,   656,   657,   194,   262,   641,   656,   657,   656,   387,
     656,   657,   390,   162,   655,  2351,   274,   568,   655,   588,
    2356,   279,   657,   625,   655,   387,   656,   657,   390,   655,
     288,  3300,   223,   656,   657,   655,   387,    62,    63,   390,
     655,   387,  2378,  3801,   390,   588,   655,  3801,  3498,  3339,
     387,   655,    27,   390,   655,   641,   655,   556,    34,   363,
     655,   387,   540,   562,   390,   369,   656,   657,   641,  3137,
     656,   521,   522,   523,   524,   525,   526,  2413,   641,  3339,
     655,   387,  3625,   656,   390,    12,  3625,   655,   226,   387,
     641,   541,   390,   656,   245,   655,   148,   355,   656,   657,
     655,  2437,   293,  2536,  2537,  2441,   655,   606,   655,    84,
      86,   262,  2448,  2449,  3525,   655,   387,   655,   128,   390,
     378,   641,   655,   274,   623,   655,  2462,  3025,  2464,   655,
     388,   655,   641,   656,   657,   439,  4318,  4319,  4553,   387,
    4552,   387,   390,   641,   390,   655,   345,   656,   656,   657,
    2486,   655,   641,   656,   657,   655,  2492,   180,  2494,  2495,
     385,   583,   420,   656,   657,   656,   657,  4250,   655,  4072,
    4073,    13,  3005,   225,  3717,   641,   655,   599,  3717,   641,
    3013,   372,   655,   130,  2520,   655,   162,   656,   657,   116,
     656,   166,   655,  2529,   656,  3019,  2532,  3566,   656,   657,
    2536,  2537,   641,    45,   355,   610,  4454,   134,   655,  3033,
     185,  3035,  3036,   471,   656,   657,   419,   656,   655,  2462,
     655,   231,   641,  3047,   641,   655,   657,   378,   655,  2532,
     656,   657,   656,   657,   158,   159,   540,   495,   387,   656,
     641,   390,   656,   657,   655,  4427,   641,   194,   175,   655,
     641,  3951,  3952,   655,    27,   656,   394,    99,   656,   657,
    4442,   656,   104,   641,  3964,   656,   655,   405,   655,   244,
     655,  3971,   656,   657,   412,  4220,   223,   204,   656,   641,
     656,   657,   655,   541,   656,   657,  2622,   656,   657,   593,
     641,   656,   657,  3927,   656,   641,   655,  3997,  3998,   498,
     499,   655,  2638,   149,   641,   656,   655,  1125,  1126,  1127,
     656,    84,   656,   657,   655,   641,  2652,   656,   657,   656,
     471,   625,   568,    84,  1142,   335,   655,  4509,   149,   339,
     656,   299,   655,   301,   302,   641,   346,    98,   655,   597,
     655,  3975,   130,   641,  2070,  2071,   293,    20,   323,   317,
     656,  4533,   610,   657,   655,    28,  1174,   555,   656,  1177,
    3313,  2087,   289,  4545,  4546,   656,   657,  2703,  2704,  2705,
     641,   655,   630,   511,   632,   656,   657,  3194,  2104,  2105,
    1198,  1199,   656,   657,  1202,   656,   656,   657,   363,   655,
     541,   656,   657,   641,   369,   641,   655,   588,   656,   657,
     655,    74,   660,   661,  1222,  1223,   194,  3313,   656,   656,
     657,    84,   185,  2656,  2657,   257,  2659,   427,  2661,  2662,
    2663,  2664,  2665,  2666,  2667,   372,   655,  2670,   655,  3246,
    2673,   655,  4614,  2676,   149,   223,   655,  3335,   655,   415,
     656,   657,  4624,  2169,  2170,  2171,  2172,   646,   647,   648,
     649,   650,   651,   652,   653,   656,   657,    66,    28,   655,
     133,   437,   130,  4718,  2703,  2704,  2705,   475,   606,   521,
     522,   244,   524,    82,   526,   485,   378,   445,   446,   656,
     657,    61,   656,   657,   130,    94,  4668,   576,  4670,   541,
     332,   378,   641,   420,  2830,   657,  2832,   473,   237,   345,
    2836,  2837,  2838,  2839,    74,   293,   267,  3843,  3844,  2845,
     656,   657,   513,  4695,    84,    37,  1206,  1207,  3319,  3320,
      52,  4703,   656,  4705,   345,  4707,   194,   130,  2864,  2865,
     133,   290,  2868,    52,   207,  3275,  3276,  4050,   657,  4721,
     255,    63,  4797,  4725,   385,  3799,  3800,  2883,   194,   378,
     323,  2887,  2888,  2889,   396,   223,   532,   201,  4740,  4741,
     233,   378,   235,   133,  2900,   540,   493,  3604,  3605,   481,
     597,   650,   519,   495,  4756,  4757,   663,   223,   663,  4761,
     506,   130,   343,   174,   372,   168,   169,   655,   279,   198,
     363,   194,   265,   199,   203,   536,   369,  2933,   120,   555,
     527,   123,   513,  3427,   184,  3038,  2845,   368,   188,   131,
     290,   536,   165,   199,    93,   657,   657,   627,   551,   199,
     223,   379,   205,   656,   164,   293,   133,   119,   150,   556,
     345,  4092,   241,   643,   217,     6,   662,  3535,    66,  2975,
    2976,   588,   655,   118,     4,   194,   486,   293,   130,   623,
     625,   133,   498,   499,    82,   255,   265,  2900,   657,   149,
     402,    59,   448,   233,   180,   235,    94,   119,  3004,  3923,
     431,   234,   234,   515,   223,   258,  4219,  3016,  3014,  3015,
    4219,   663,   657,  3022,   233,  3021,   235,   270,   657,    74,
     293,  3027,   365,   366,   657,   265,   623,    13,   371,   629,
     148,   656,  3038,  3039,   372,   378,   656,    10,  3044,  3048,
     552,   657,   194,  3049,   297,  3054,   656,   656,   663,  3988,
     656,  3060,  3061,  3059,   130,   663,   372,   133,   278,    63,
     378,   253,   655,   166,   663,  3071,  2975,   657,   657,   290,
      52,   223,  3078,  3079,   293,   418,   662,    82,  3084,   290,
     657,   331,   290,   290,  3090,   290,  4125,   290,  3094,   657,
     168,  4222,  4131,  3099,   555,   255,   527,   540,   232,   372,
     198,   655,   285,   403,  3676,   203,   359,   657,   657,   576,
    3023,  3024,   657,   498,   499,   402,   120,  3090,   194,   123,
     657,   576,   168,   402,    35,   365,   366,   131,   199,  3135,
     588,   371,   648,   649,   650,   651,   652,   653,   378,   418,
    3053,   293,    39,   241,   657,  3151,   150,   223,   491,   657,
    3059,    74,   657,   372,   536,   255,  1644,   648,   649,   650,
     651,   652,   653,  4294,   650,   357,   256,   265,   189,   553,
     199,  3084,  4096,  4097,   657,  4099,  4100,   174,   418,   429,
    2576,   536,   625,  2579,  2580,   345,  2582,   510,   144,  2585,
    2586,   195,   407,   198,  2590,   657,   378,   406,    20,  2595,
     657,   604,   656,     7,  2600,  2601,  2602,  2603,  2604,   636,
     609,   657,  2608,  2609,   201,  2611,   130,   293,   106,  3322,
     372,  2617,  2618,  2619,  2620,   201,   123,  2623,  2624,  3142,
    2626,   656,   656,   130,  3240,   656,   241,   516,   149,   656,
     130,  1729,  3248,  4374,   650,  1733,   656,   496,   656,   253,
     588,   491,   656,  4466,   656,   598,   657,  4466,   649,   655,
     265,   646,   647,   648,   649,   650,   651,   652,   653,  1757,
     656,   597,   588,   656,   565,   656,   656,   656,   655,   657,
     194,   657,  3288,   656,   106,    87,   656,    89,   656,  2685,
     187,   655,   655,   653,   656,  3867,   372,   194,   657,   565,
     565,  3307,  3308,   630,   194,  3311,    84,  3313,   576,   223,
     243,   503,   657,  3881,    92,   588,  3322,  3420,   656,   598,
     418,   655,  3328,   547,    12,   655,   223,   224,   149,  3335,
    3336,   133,   213,   223,    13,  3248,    17,    18,   498,   499,
     656,   119,   164,   201,   255,   657,   168,   655,   663,  3355,
     354,   655,   276,   357,   156,  4269,   657,   245,   598,   657,
     663,   663,   201,   656,  3370,   178,   663,   278,   476,   588,
     428,  3377,  4411,   116,   262,   197,   657,   199,   495,   293,
     572,   199,  3391,   657,   602,  4568,   274,    50,   166,   204,
    4005,   193,  3398,   215,   657,   353,   293,   402,   527,   221,
     527,  3407,  4341,   293,  3410,   486,   527,   527,   130,   601,
     199,   133,   527,   418,  3420,   237,   451,   655,   516,   168,
     168,  4360,  3428,   245,  3430,  3431,   168,   168,  3341,   168,
     252,   435,   168,   168,   345,  3538,   588,   168,  3444,  3445,
     262,   168,   168,   124,   125,   126,   127,   128,   168,   168,
    3456,   168,   274,  3459,   365,   366,  4054,   279,   372,   356,
     203,   168,   168,   241,   168,   168,   288,   355,  3377,   168,
     367,   168,   194,   168,   371,   372,   106,  3483,   168,   657,
    3486,   289,   372,   378,   378,  3491,   646,   647,   648,   649,
     650,   651,   652,   653,   378,   663,   610,   656,   241,  4682,
     598,   223,   162,   656,   251,   251,   663,  3513,  3421,   656,
     656,   168,   588,   656,   656,   656,   656,   656,     7,   657,
     657,  3434,   576,   576,   345,   576,   657,   663,   663,   565,
     637,   442,  3538,   355,   285,    90,    50,   168,    84,  3642,
    4579,  4580,   655,  4582,   322,   655,   289,   228,   229,   230,
     231,   655,    98,   576,   655,   168,   378,  4770,   116,   385,
     201,  4770,   340,   201,   201,   252,   388,   201,   572,   565,
    4783,   293,   565,   259,  4783,  4788,   433,  3486,   657,  4788,
    4793,   178,   372,   471,  4793,   363,   262,   498,   499,   262,
    3503,   391,   336,   655,   396,   119,   142,   601,   420,   119,
      82,   402,   576,   514,   402,  4644,   402,  4646,  4647,   144,
     263,   556,   241,   263,  3620,   245,   402,   175,   556,  3625,
     402,   144,   149,    50,   404,   402,   402,   402,   402,   576,
    3026,   655,   262,   655,   384,   655,  3642,   215,   440,   565,
    4238,   650,   655,   655,   274,  3041,   204,   390,   663,   471,
     372,   253,   253,   541,   335,   656,   337,   338,   339,   657,
     124,   125,   126,   127,   128,   346,   656,   656,   565,   657,
     433,   656,   569,   495,   588,   572,   655,   498,   499,   656,
    3686,   656,   663,   241,   656,   656,   583,   385,   650,   655,
     237,   588,   656,   378,   591,   280,  4735,   657,   588,  3705,
     402,   201,   657,  3709,   656,    39,   387,   603,  3811,   390,
     663,  3717,  4752,   255,   656,  3721,   656,  3723,   433,   541,
      58,   267,   168,  4391,   262,   355,  4298,   657,   262,   472,
      68,   289,   657,   467,   655,   646,   647,   648,   649,   650,
     651,   652,   653,   402,    24,    83,   427,   265,   378,   265,
     493,   648,   649,   663,   416,   378,   378,    95,    96,    97,
      84,    20,   540,   656,   228,   229,   230,   231,   657,  3682,
     655,   388,   655,   516,   656,   597,   114,    50,   556,   489,
    3883,   656,  3788,   632,   656,  3791,   276,   609,   610,   123,
     183,   469,  3798,  3799,  3800,  3801,   130,   343,   213,   155,
     288,   272,   656,   484,   485,  3811,   656,   487,   630,   657,
     632,   215,   262,   556,   497,   262,   657,   378,   345,   365,
     366,  4393,   368,   656,   378,   646,   647,   648,   649,   650,
     651,   652,   653,   656,   656,   657,   513,     6,   660,   661,
     657,   471,   265,    12,   655,    14,   265,    16,   657,   632,
     657,   656,  4791,   187,    88,   598,   655,   415,   505,    28,
     194,    30,   420,   606,   151,   240,   588,   279,   656,   656,
    3973,   335,   656,   337,   338,   339,   655,  3883,    37,    37,
     372,    63,   346,   655,   655,   431,   656,  3893,   656,   223,
     224,    60,   253,   342,   656,   656,    65,    66,   656,   656,
    4468,   267,   428,    72,  3910,   657,    18,   385,   632,   252,
     655,   541,    37,    50,   472,    84,   656,  3923,   656,   221,
     657,   342,  3928,    92,   513,   657,   610,  3936,  3934,   482,
     663,   656,   655,   102,    20,   493,  3942,   133,   610,   657,
     656,   655,   133,   559,   655,    70,   627,   414,    37,    37,
     119,   663,   372,   342,   182,   145,   657,  4060,   565,   293,
     641,   642,   643,   427,   133,   656,   135,  3973,   137,   565,
     565,   498,   499,   265,   614,   559,   145,   146,   610,   319,
      58,   527,    70,   152,   655,  4653,  3899,   656,   655,   610,
      68,   160,   657,  3999,   655,   164,   334,   166,   556,   655,
     655,   620,   656,   655,   562,    83,   620,   655,   177,    15,
     542,   603,   265,   351,   133,    20,   141,    95,    96,    97,
     484,   485,   356,   581,   265,  3934,   371,   531,   197,   632,
     655,   178,   476,   466,    64,   385,   114,   371,   372,   657,
    4638,   166,   467,  4049,   656,   170,  4052,   168,   606,   546,
     656,   603,   252,   141,  4060,   655,   655,   378,   367,   615,
     163,  3974,   655,   629,   233,   623,   235,   655,    34,  4641,
     239,   192,   241,   664,  4427,  4081,  4082,  4745,   166,   656,
     249,   206,   170,   372,   205,   178,   567,   144,   144,  4442,
    4096,  4097,   655,  4099,  4100,   264,   217,   166,   420,    76,
     199,   199,   227,    34,  4772,   656,   655,   629,    66,   201,
     385,    66,   656,   399,   657,   656,   655,   242,   206,   288,
     647,   648,   649,   650,   651,   652,   653,   465,   281,   547,
     441,   656,   252,   162,   385,   656,   385,    50,   655,   227,
    4049,  4147,   661,    50,   161,   483,    50,   268,  4720,   270,
      50,    50,  4158,   322,   242,   142,  4509,  4163,   151,   691,
     655,   655,     5,   627,   696,   290,   378,   378,   629,   236,
     162,   340,   295,  4082,   661,   344,   297,   288,   642,   643,
     664,   132,    12,   655,    50,    50,  4192,  4193,    50,  4195,
     315,   138,   157,   603,   476,    56,   661,   657,   656,   656,
     478,   733,   290,   265,   568,   543,   162,   218,   661,   657,
     234,    56,   657,  4219,   383,   656,   656,   455,   750,   388,
     657,   199,  4794,   561,   199,   199,   395,   315,   397,    50,
     631,   565,   568,   402,  4147,   569,   405,   133,   572,   237,
     372,   362,   655,   200,  4168,   495,  4252,  2363,  4254,   583,
     657,  2675,  3517,  3796,   588,  4263,   334,   591,  4394,  3908,
    4595,  4614,   794,   795,   796,   797,  2565,   436,  4596,  1038,
     991,  4624,  4375,   351,   806,  3906,  3910,  1058,  4284,  4080,
    4772,   450,   451,   452,   453,  4733,    48,   600,  1931,  1863,
    2830,  4002,  4002,  4002,   419,  4002,   417,  4002,  4002,  4002,
    4002,  4002,  4742,   428,  4002,  4311,  4611,  4611,   477,  4546,
    4420,  4446,  4002,  4002,   648,   649,  4002,  4445,   443,  1583,
    4267,  2117,  4089,  1832,  3454,  2637,  3619,  2859,  1373,  1102,
    3288,   419,  4365,  2864,  4050,  3622,   461,  4470,  4682,  4638,
     428,  4576,  4695,  1620,  4238,  3915,  2629,   632,  3078,  3363,
    3686,  2638,  4705,  3081,  4707,   443,  3928,  3935,  4659,  4365,
    4298,  3177,   894,  3746,   533,   534,   535,  4123,  4721,  4375,
    3780,   540,  4725,   461,  3984,  4381,  3973,  2783,  4468,  3231,
     505,  2536,  3226,   508,  4487,  4400,  3234,   556,    11,    11,
    4517,   560,  4518,  2193,  4337,  4350,  4346,  4195,  3398,  2701,
    4131,  2637,  3074,  4756,  4757,   483,  1517,  1071,  4761,  1019,
     579,   536,  3940,  2506,  2432,   584,  2124,   505,  4452,  3704,
     508,  4334,  1616,  1921,  1595,  2406,  2845,  3283,   597,  2319,
     555,   238,   621,   558,   559,   940,  2453,  4004,  1945,  3248,
    2224,  2228,  2816,  2521,  4296,  2515,  4452,  3346,   536,  4075,
    4257,  4457,  4590,  2318,  3513,  4368,  4369,  4591,  3717,  2344,
    4466,  1169,  1534,  3070,  2933,   543,  3894,  1142,  4720,  3883,
     558,  4574,  2458,  2197,  1042,  1042,  1356,  1386,  2400,  2436,
    3625,  4487,   607,   561,  3302,  1042,  3301,  3355,  4466,   611,
     687,   298,   661,   300,   301,   302,   303,   304,  2024,   306,
     307,   308,   309,   310,   311,   312,   313,   314,  1465,   316,
     317,   318,  1042,  1637,   599,   599,  2500,  1852,  3723,   607,
    1393,  2025,  3286,  4680,  4715,  4494,  4586,  4788,  4793,  3975,
    2483,  3307,  1423,   598,  3335,   598,  3336,  1785,  1971,  2476,
     592,  2475,  2469,  1413,  4457,  1902,   920,  4039,   832,  4045,
    2448,  1348,  1084,  1628,  2832,   593,   927,   629,   629,   629,
      -1,  1038,  1038,  1038,    -1,  4478,  4479,    -1,  4574,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4590,  4591,    -1,    -1,    -1,  1121,
    1122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1130,  1131,
    1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,
    4616,    -1,    -1,    -1,    -1,    -1,    -1,  4623,  1150,  1151,
      -1,  1153,  1154,    -1,    -1,    -1,  1158,    -1,    -1,  1161,
    1162,  1163,  1164,    -1,  1166,  1167,  1168,    -1,   445,   446,
      -1,    -1,    -1,  1175,  1176,    -1,  1178,  1179,  1180,  1181,
    1182,    -1,    -1,  1185,  1186,  1187,  1188,  1189,  1190,  1191,
    1192,  1193,  1194,  1195,    -1,  1197,    -1,    -1,  1200,  1201,
      -1,    -1,    -1,  1205,    -1,    -1,  4779,  1209,  1210,  1211,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1224,  1225,  1226,    -1,    -1,    -1,  4704,    -1,
      -1,  1233,    -1,  4709,    -1,    -1,    -1,    -1,  1240,  1241,
    1242,    28,  1244,    30,    -1,    -1,    -1,    -1,    -1,  1251,
    1252,  1253,    -1,  1255,  1256,  1257,  1258,  1259,    14,  1261,
    1262,  1263,  1264,  1265,  1266,  1267,  1268,    -1,    -1,  4745,
    1272,  1273,    -1,  4656,    -1,    62,    63,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,  4770,    -1,  4772,    84,    -1,    -1,
      -1,    -1,    -1,  4779,    -1,    92,    -1,  4783,    -1,    -1,
      -1,    -1,  4788,    -1,    -1,    -1,    -1,  4793,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,   105,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1360,    -1,
      -1,    -1,    -1,  4229,  4230,    -1,    -1,  4233,  4234,  4235,
    4236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,
      -1,  1423,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1433,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   696,    -1,    -1,    -1,   233,  1449,   235,    -1,
      -1,  1453,    -1,    -1,   241,    -1,    -1,   213,    -1,    -1,
      -1,    -1,   249,    -1,    -1,    -1,    -1,    -1,    -1,  4335,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,   733,
      -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,   750,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4370,  4371,  1508,    -1,    -1,    -1,
      -1,    -1,    -1,  4379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,    -1,   322,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   797,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,
     397,    -1,    34,    -1,    -1,    -1,    38,    -1,   405,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
     894,    -1,    -1,    65,    66,    -1,    -1,    -1,  1650,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,   421,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,    -1,   441,    -1,    -1,    -1,    -1,
     477,    -1,    -1,   449,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   457,    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   151,
     152,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   164,    -1,   500,   501,   533,   534,   535,    -1,
      -1,    -1,    -1,   540,    -1,    -1,    -1,   179,    -1,    -1,
      -1,  1763,  1764,  1765,    -1,    -1,    -1,    -1,    -1,   556,
      -1,    -1,    -1,   560,   196,    -1,  1778,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,
      -1,   213,   579,    -1,   550,    -1,   218,    -1,    -1,    -1,
     222,    -1,  1804,    -1,    -1,    -1,    -1,    -1,  1810,    -1,
     597,  1813,    -1,  1815,    -1,    -1,    -1,    -1,    -1,  1821,
      -1,  1823,  1824,    -1,    -1,   581,   248,    -1,   250,    -1,
    1084,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,    -1,    -1,   603,    -1,   605,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,    -1,    -1,   288,  1121,  1122,    -1,
     657,    -1,    -1,    -1,    -1,    -1,  1130,  1131,    -1,    -1,
    1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1150,  1151,    -1,  1153,
    1154,    -1,    -1,    -1,    -1,    -1,    -1,  1161,  1162,  1163,
    1164,    -1,    -1,  1167,  1916,    -1,    -1,    -1,    -1,    -1,
      -1,  1175,  1176,    -1,  1178,  1179,    -1,    -1,    -1,    -1,
      -1,  1185,  1186,  1187,    -1,    -1,  1190,  1191,  1192,  1193,
    1194,  1195,    -1,  1197,    -1,    -1,  1200,  1201,    -1,    -1,
      -1,  1205,    -1,    -1,    -1,  1209,  1210,  1211,    -1,    -1,
      -1,   383,    -1,    -1,    -1,    -1,    -1,  1969,    -1,    -1,
    1224,  1225,  1226,    -1,    -1,    -1,  1978,    -1,   400,  1233,
     402,    -1,    -1,    -1,    -1,    -1,  1240,  1241,  1242,    -1,
      -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1273,
      -1,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,   451,
      28,   453,    30,    -1,   456,    -1,    -1,   459,   460,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,
      -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    65,    -1,    -1,
      -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1360,    -1,    -1,    -1,
     532,    -1,    -1,    -1,    -1,  2117,    -1,   539,    -1,    -1,
      -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    -1,  2139,    -1,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   584,    -1,    -1,    -1,    -1,    -1,   166,  1423,
      -1,    -1,    -1,    -1,   596,    -1,    -1,    -1,   600,  1433,
      -1,   603,    -1,    -1,    -1,    -1,    -1,   609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1449,    -1,    -1,    -1,  1453,
      -1,    -1,    -1,    -1,  2206,    -1,    -1,    -1,  2210,    -1,
      -1,    -1,    -1,  2215,  2216,    -1,    -1,   639,    -1,    -1,
      -1,    -1,  2224,   645,  2226,    -1,  2228,  2229,  2230,  2231,
      -1,    -1,  2234,   655,    -1,   233,    -1,   235,    -1,    -1,
      -1,    -1,  2244,   241,  2246,  2247,    -1,  2249,  2250,  2251,
    2252,   249,  2254,    -1,  1508,  2257,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2266,    -1,   264,    -1,    -1,    -1,
      -1,  2273,    -1,  2275,    -1,  2277,  2278,    -1,  2280,  2281,
      -1,    -1,    -1,  2285,  2286,  2287,    -1,    -1,    -1,  2291,
    2292,  2293,    -1,  2295,    -1,  2297,    -1,  2299,    -1,  2301,
      -1,  2303,    -1,    -1,    -1,    -1,  2308,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    14,
      -1,    16,    -1,    -1,   322,  2327,    -1,    -1,    -1,    -1,
      -1,    -1,  2334,    -1,    -1,  2337,    -1,    -1,    -1,    -1,
      -1,  2343,   340,    38,  2346,    -1,    -1,    -1,  2350,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    -1,    -1,  1650,   395,    -1,   397,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,    -1,    -1,
     105,    -1,  2414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   129,    28,    -1,    30,    -1,    -1,
      -1,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   151,   152,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      63,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    74,  2484,    -1,   179,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1763,
    1764,  1765,    -1,    -1,    -1,    -1,   211,    -1,   213,    -1,
      -1,    -1,    -1,   218,    -1,    -1,   119,   222,    -1,    -1,
      -1,    -1,    -1,  2535,    -1,   533,   534,   535,    -1,    -1,
     133,    -1,   540,    -1,   137,    -1,  2548,    -1,    -1,    -1,
    1804,    -1,    -1,   248,    -1,   250,    -1,    -1,   556,  1813,
      -1,  1815,   560,    -1,  2566,  2567,    -1,    -1,    -1,    -1,
      -1,   266,    -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,
      -1,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,   597,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2629,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,   235,    -1,    -1,    -1,    -1,    -1,   241,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,
      -1,    -1,  1916,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,    -1,    -1,    -1,    -1,  2678,  2679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,   402,    -1,    -1,
      -1,    -1,  2714,    -1,    -1,  1969,  2718,    -1,    -1,    -1,
     415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,
      -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2745,  2746,    -1,    -1,   340,    -1,    -1,
      -1,    -1,    -1,   448,    -1,    -1,   451,    -1,   453,    -1,
      -1,   456,    -1,  2765,   459,   460,    -1,    -1,    -1,    -1,
      -1,    -1,  2774,    -1,  2776,   470,  2778,    -1,   473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,
      -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     495,    -1,   395,  2805,   397,   500,   501,   502,  2810,    -1,
      -1,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   532,    -1,  2841,
      -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,  2139,    -1,    -1,    -1,   584,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,
      -1,    -1,    -1,  2915,   609,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     533,   534,   535,    -1,   639,    -1,    -1,   540,    -1,    -1,
     645,    -1,  2206,    -1,    -1,    -1,  2210,    -1,    -1,    -1,
     655,  2215,  2216,   556,  2966,    -1,    -1,   560,    -1,    -1,
    2224,    -1,  2226,    -1,  2228,    -1,  2230,  2231,    -1,  2981,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,
    2244,    -1,  2246,    -1,    -1,  2249,  2250,  2251,  2252,    -1,
    2254,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2266,    -1,    -1,    -1,    -1,    -1,    -1,  2273,
      -1,  2275,    -1,  2277,  2278,    -1,  2280,    -1,    -1,    -1,
      -1,  2285,  2286,  2287,    -1,    -1,    -1,  2291,  2292,  2293,
      -1,  2295,    -1,  2297,    -1,  2299,    -1,  2301,    -1,  2303,
      -1,    -1,    13,    -1,  2308,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   655,    -1,    -1,    26,    -1,    -1,    -1,    -1,
      -1,    -1,  3074,  2327,    -1,    -1,    37,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3087,  3088,    -1,    -1,  2343,
      -1,    -1,  2346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3136,    -1,    -1,    -1,    -1,    -1,
     101,    -1,   103,    -1,   105,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,  3159,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3191,
    3192,    -1,  3194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3203,    -1,    -1,   165,   166,  3208,    -1,    -1,  3211,
     171,  3213,  3214,   174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    37,    -1,    -1,    -1,    -1,    42,    -1,    44,
    2484,    46,    47,    -1,    -1,    -1,    28,    -1,    30,    -1,
      -1,   202,    -1,   204,  3246,    -1,    -1,    -1,    63,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    63,    -1,    65,    -1,  3277,    -1,    -1,    -1,   240,
     241,   242,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,  3301,
      92,    -1,   263,    -1,    -1,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   119,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,
      -1,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,
      -1,    -1,   167,    -1,   315,  3357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,   193,    -1,
     195,    -1,    -1,    -1,  3386,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,
      -1,   233,    -1,   235,    -1,    -1,    -1,   408,    -1,   241,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,   419,   420,
    2714,    -1,   423,   424,  2718,    -1,    -1,   282,    -1,    -1,
      -1,    -1,   264,    -1,    -1,    -1,   291,   292,    -1,   294,
      -1,    -1,    -1,   444,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2745,  2746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2765,    -1,   328,   329,   330,    -1,    -1,    -1,    -1,
    2774,    -1,  2776,    -1,  2778,    -1,    -1,    -1,    -1,    -1,
     322,   492,   347,   348,   349,    -1,    -1,    -1,    -1,   354,
      -1,    -1,   357,    -1,   505,    -1,    -1,    -1,   340,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,
     375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2841,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   410,   411,   558,   559,    -1,
      -1,    -1,    -1,   395,    -1,   397,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,  3626,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   607,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   618,    -1,    -1,
    3662,  2915,    -1,    -1,    -1,   626,    -1,    -1,  3670,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,  3691,
      -1,    -1,    -1,    -1,   509,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2966,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   533,   534,   535,    -1,    -1,    -1,    -1,   540,    -1,
      -1,   566,    -1,    -1,   569,    -1,    -1,   572,   573,   574,
     575,    -1,    -1,    -1,   556,    -1,    -1,    -1,   560,    -1,
      -1,  3773,     6,    -1,    -1,    -1,    -1,    -1,    12,    -1,
      14,    -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    30,    -1,    -1,    -1,
      -1,   616,   617,    -1,    -1,   597,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3825,    -1,    -1,    60,  3829,   643,    -1,
      -1,    65,    -1,  3087,  3088,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      -1,    -1,  3864,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3878,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,   137,    -1,  3159,    -1,    -1,    -1,    -1,
      -1,   145,    -1,  3915,    -1,    -1,    -1,    -1,   152,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,
      -1,    -1,   166,    -1,    -1,    -1,    -1,  3191,  3192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3203,
      -1,    -1,    -1,    -1,  3208,    -1,    -1,  3211,    -1,  3213,
    3214,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3984,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
    4002,   235,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3277,    -1,    -1,    -1,    -1,    -1,    -1,
     264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3301,  4050,    -1,
      -1,    -1,    -1,    -1,   288,    -1,  4058,    -1,    -1,    -1,
      -1,    -1,  4064,    -1,  4066,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3357,    -1,    -1,   340,    -1,    -1,    -1,
     344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4155,   388,    -1,    -1,    -1,    -1,  4161,
    4162,   395,    -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4194,    -1,    -1,    -1,  4198,  4199,    -1,    -1,
      -1,    -1,    -1,  4205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4243,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
     534,   535,  4304,    -1,  4306,    -1,   540,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4316,    -1,  4318,  4319,    -1,    -1,
      -1,    -1,   556,    -1,    -1,    -1,   560,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4337,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4346,   579,    -1,    -1,  4350,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3662,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3670,    -1,    -1,    -1,
      -1,    -1,    -1,  4425,    -1,  4427,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3691,    -1,    -1,
    4442,  4443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4460,    -1,
      -1,    -1,    -1,    -1,    -1,  4467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4509,    -1,    -1,
      -1,    -1,    -1,  4515,    -1,  4517,  4518,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4532,  4533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4545,  4546,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4568,    -1,    -1,    -1,
      -1,  3825,    -1,    -1,    -1,  3829,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3864,    -1,  4614,    -1,    -1,    -1,    -1,    -1,    -1,  4621,
      -1,    -1,  4624,    -1,  3878,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4661,
      -1,    -1,    -1,    -1,    -1,    -1,  4668,    -1,  4670,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4682,    -1,    -1,  4685,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4695,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4703,    -1,  4705,    -1,  4707,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4721,
      -1,    -1,    -1,  4725,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4740,  4741,
      -1,    -1,    -1,    -1,  4746,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4756,  4757,    -1,    -1,    -1,  4761,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4796,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4058,    -1,    -1,    -1,    -1,    -1,
    4064,    -1,  4066,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4304,    -1,  4306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4443,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4532,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4621,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4661,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,  4685,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,  4746,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,    -1,    -1,   107,   108,   109,
     110,   111,   112,    -1,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,  4796,   133,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
      -1,   191,   192,   193,   194,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,    -1,   222,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,   236,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,   249,
     250,   251,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,   271,   272,    -1,   274,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,   293,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,    -1,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,   398,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,   611,   612,   613,   614,   615,    -1,    -1,   618,   619,
      -1,   621,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,
      -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,
      -1,    -1,   662,   663,     5,    -1,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,    -1,    -1,   107,   108,   109,   110,
     111,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,   135,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
      -1,   222,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,   236,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,   248,   249,   250,
     251,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,   293,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,    -1,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,
     611,   612,   613,   614,   615,    -1,    -1,   618,   619,    -1,
     621,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,    -1,
      -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,    -1,
      -1,   662,   663,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,    -1,    -1,   107,   108,   109,   110,   111,
     112,    -1,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
     192,   193,   194,    -1,   196,    -1,    -1,    -1,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,    -1,
     222,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,   236,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,   248,   249,   250,   251,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,   293,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,    -1,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,   611,
     612,   613,   614,   615,    -1,    -1,   618,   619,    -1,   621,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,    -1,   648,   649,    -1,    -1,
      -1,    -1,   654,   655,    -1,    -1,   658,   659,    -1,    -1,
     662,   663,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,    -1,    -1,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,    -1,    -1,    -1,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,    -1,   222,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,   236,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,   248,   249,   250,   251,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,   274,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
     293,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,    -1,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,   456,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,   611,   612,
     613,   614,   615,    -1,    -1,   618,   619,    -1,   621,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,
     643,    -1,    -1,    -1,    -1,   648,   649,    -1,    -1,    -1,
      -1,   654,   655,    -1,    -1,   658,   659,    -1,    -1,   662,
     663,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,    -1,    -1,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,    -1,    -1,    -1,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,    -1,   222,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,   236,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,   248,   249,   250,   251,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
     274,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,   293,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,    -1,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,   456,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,   611,   612,   613,
     614,   615,    -1,    -1,   618,   619,    -1,   621,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,
     654,   655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
      -1,    -1,   107,   108,   109,   110,   111,   112,    -1,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,
     135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
      -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,    -1,   222,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,   236,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,   248,   249,   250,   251,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,
      -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,   274,
     275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,   293,    -1,
      -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,    -1,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,   396,    -1,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,   456,   457,    -1,   459,    -1,   461,   462,    -1,   464,
     465,    -1,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,   486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,
      -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,   608,    -1,    -1,   611,   612,   613,   614,
     615,    -1,    -1,   618,   619,    -1,   621,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,
      -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,
     655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,    -1,
      -1,   107,   108,   109,   110,   111,   112,    -1,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,    -1,   222,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
     236,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,   248,   249,   250,   251,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,   274,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,   293,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,    -1,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,   398,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
      -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,   611,   612,   613,   614,   615,
      -1,    -1,   618,   619,    -1,   621,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,
      -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,   655,
      -1,    -1,   658,   659,    -1,    -1,   662,   663,     5,    -1,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,    -1,    -1,
     107,   108,   109,   110,   111,   112,    -1,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,   135,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,    -1,   222,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,   236,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,   248,   249,   250,   251,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,
     267,   268,   269,    -1,    -1,   272,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,   293,    -1,    -1,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,    -1,    -1,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
      -1,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,   456,
     457,    -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,   485,   486,
      -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,
     497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,   542,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,   608,    -1,    -1,   611,   612,   613,   614,   615,    -1,
      -1,   618,   619,    -1,   621,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,
      -1,   648,   649,    -1,    -1,    -1,    -1,   654,   655,    -1,
      -1,   658,   659,    -1,    -1,   662,   663,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,    -1,    -1,   107,
     108,   109,   110,   111,   112,    -1,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,   134,   135,    -1,   137,
      -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,    -1,   191,   192,   193,   194,    -1,   196,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,    -1,   222,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,   232,   233,   234,   235,   236,    -1,
     238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,
     248,   249,   250,   251,    -1,    -1,   254,    -1,   256,   257,
      -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,
     268,   269,    -1,    -1,   272,    -1,   274,   275,   276,    -1,
      -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,
      -1,   289,   290,    -1,    -1,   293,    -1,    -1,    -1,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,    -1,    -1,   331,   332,   333,   334,   335,   336,    -1,
      -1,   339,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
     358,    -1,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
      -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,   485,   486,    -1,
      -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,
      -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,   507,
     508,    -1,   510,   511,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,
     528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,    -1,
     558,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
     608,    -1,    -1,   611,   612,   613,   614,   615,    -1,    -1,
     618,   619,    -1,   621,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,
     648,   649,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,
     658,   659,    -1,    -1,   662,   663,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,    -1,    -1,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,   135,    -1,   137,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,    -1,   222,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,   232,   233,   234,   235,   236,    -1,   238,
     239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,
     249,   250,   251,    -1,    -1,   254,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,
     269,    -1,    -1,   272,    -1,   274,   275,   276,    -1,    -1,
      -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,
     289,   290,    -1,    -1,   293,    -1,    -1,    -1,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
      -1,    -1,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,   358,
      -1,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,   456,   457,    -1,
     459,    -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,   485,   486,    -1,    -1,
      -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,
      -1,    -1,   501,    -1,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,
      -1,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,   558,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,
      -1,    -1,   611,   612,   613,   614,   615,    -1,    -1,   618,
     619,    -1,   621,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,
     649,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,
     659,    -1,    -1,   662,   663,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,    -1,    -1,   107,   108,   109,
     110,   111,   112,    -1,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
      -1,   191,   192,   193,   194,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,    -1,   222,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,   236,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,   249,
     250,   251,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,   274,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,   293,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,    -1,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,   398,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,   611,   612,   613,   614,   615,    -1,    -1,   618,   619,
      -1,   621,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,
      -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,
      -1,    -1,   662,   663,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,    -1,    -1,   107,   108,   109,   110,
     111,   112,    -1,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,   135,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
      -1,   222,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,   236,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,   248,   249,   250,
     251,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,   293,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,    -1,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,
     611,   612,   613,   614,   615,    -1,    -1,   618,   619,    -1,
     621,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,    -1,
      -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,    -1,
      -1,   662,   663,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,    -1,    -1,   107,   108,   109,   110,   111,
     112,    -1,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
     192,   193,   194,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,    -1,
     222,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,   236,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,   248,   249,   250,   251,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,   293,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,    -1,    -1,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,   611,
     612,   613,   614,   615,    -1,    -1,   618,   619,    -1,   621,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,    -1,   648,   649,    -1,    -1,
      -1,    -1,   654,   655,    -1,    -1,   658,   659,    -1,    -1,
     662,   663,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,    -1,    -1,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,    -1,   222,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,   236,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,   248,   249,   250,   251,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,   274,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
     293,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,    -1,    -1,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,   456,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,   611,   612,
     613,   614,   615,    -1,    -1,   618,   619,    -1,   621,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,
     643,    -1,    -1,    -1,    -1,   648,   649,    -1,    -1,    -1,
      -1,   654,   655,    -1,    -1,   658,   659,    -1,    -1,   662,
     663,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,    -1,    -1,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,    -1,   222,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,   236,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,   248,   249,   250,   251,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
     274,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,   293,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,    -1,    -1,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,   456,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,   611,   612,   613,
     614,   615,    -1,    -1,   618,   619,    -1,   621,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,
     654,   655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
      -1,    -1,   107,   108,   109,   110,   111,   112,    -1,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,   134,
     135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
      -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,    -1,   222,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,   236,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,   248,   249,   250,   251,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,
      -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,   274,
     275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,   293,    -1,
      -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,    -1,    -1,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,   396,    -1,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,   456,   457,    -1,   459,    -1,   461,   462,    -1,   464,
     465,    -1,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,   486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,
      -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,   608,    -1,    -1,   611,   612,   613,   614,
     615,    -1,    -1,   618,   619,    -1,   621,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,
      -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,
     655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    39,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,   130,    -1,    -1,    -1,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,   220,    -1,   222,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,   293,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
      -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
      -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,   662,   663,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,   241,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,   265,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,   278,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,   487,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   663,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,   241,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,   265,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   663,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,   487,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   656,    -1,    -1,    19,    -1,    -1,    22,   663,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,   656,    15,    -1,    -1,    -1,    19,   662,   663,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,   655,    -1,    15,    -1,    -1,    -1,    19,
      -1,   663,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,   252,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   663,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,    -1,    -1,    -1,    -1,    -1,
     650,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,   663,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,   655,    -1,    15,    -1,    -1,    -1,    19,    -1,   663,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
     662,   663,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   663,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   663,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   663,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   663,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   662,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
      -1,   182,   183,   184,   185,    -1,    -1,   188,   189,    -1,
     191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,
      -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
      -1,   342,    -1,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,
      -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    -1,   643,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   662,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,   277,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     662,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
     133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,    -1,   191,   192,
     193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,
     643,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,   182,   183,   184,
     185,    -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,
      -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,
      -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,
     275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,    -1,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,   486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,
      -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,
      -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,    -1,    -1,   550,   551,   552,   553,    -1,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   662,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
      -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
      -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,   662,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,    -1,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,    -1,    -1,    -1,    -1,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,   236,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,    -1,   249,    -1,    -1,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,   261,    -1,    -1,   264,    -1,    -1,
      -1,   268,   269,    -1,    -1,   272,   273,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,    -1,    -1,   295,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,    -1,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,    -1,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,   396,
      -1,    -1,    -1,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,    -1,    -1,   416,
     417,    -1,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,    -1,    -1,   452,    -1,   454,   455,    -1,
     457,    -1,    -1,    -1,   461,    -1,    -1,   464,   465,    -1,
     467,   468,   469,    -1,    -1,   472,    -1,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,   485,    -1,
      -1,    -1,    -1,   490,   491,   492,    -1,    -1,    -1,    -1,
     497,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,    -1,   510,    -1,   512,    -1,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,    -1,    -1,    -1,    -1,   536,
      -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,
      -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,   631,    -1,    -1,    -1,   635,    -1,
      -1,   638,    -1,   640,    -1,     5,   643,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
     657,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
     110,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,     5,   643,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,   655,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,    -1,   191,   192,
     193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,     5,
     643,     7,     8,     9,    10,    11,    12,   650,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
      -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
      -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,     5,   643,     7,     8,
       9,    10,    11,    12,   650,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,
     189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,
     269,    -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,
      -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,
     289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,    -1,   325,   326,    -1,    -1,
      -1,    -1,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,   340,    -1,   342,    -1,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,
     369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,    -1,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,
     459,    -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,
     469,    -1,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,   485,   486,    -1,    -1,
      -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,
      -1,    -1,   501,    -1,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,
      -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,   558,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,     5,   643,     7,     8,     9,    10,    11,
      12,   650,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,    -1,    -1,     5,   650,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,   105,    -1,   107,
      -1,   109,    -1,   111,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,    -1,    -1,   141,    -1,   143,   144,   145,   146,   147,
      -1,    -1,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,
     188,   189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,    -1,    -1,
     218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,   241,   242,    -1,   244,    -1,    -1,    -1,
     248,   249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,
      -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,
     268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,   277,
      -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,
     288,   289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,    -1,   325,   326,    -1,
      -1,    -1,    -1,   331,   332,   333,   334,   335,   336,    -1,
      -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,
     368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,
      -1,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
      -1,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,   457,
      -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,   485,   486,   487,
      -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,
      -1,    -1,   500,   501,    -1,   503,   504,   505,   506,   507,
     508,    -1,   510,   511,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,
     528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
      -1,    -1,   550,   551,   552,   553,    -1,   555,   556,    -1,
     558,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,   581,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,     5,   643,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,   105,    -1,   107,    -1,   109,    -1,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,   152,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
      -1,   182,   183,   184,   185,    -1,    -1,   188,   189,    -1,
     191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,    -1,    -1,   218,   219,   220,
      -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,    -1,   244,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,   288,   289,   290,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
      -1,   342,    -1,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,
      -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,   500,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
     581,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,     5,   643,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,   223,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,   293,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,    -1,   372,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,   518,   519,   520,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,   588,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,     5,   643,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,   135,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,    -1,    -1,   182,   183,   184,   185,    -1,
      -1,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,   220,    -1,   222,   223,    -1,    -1,   226,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,
     267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,   293,    -1,    -1,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,    -1,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,   368,   369,    -1,    -1,   372,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
      -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,    -1,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,
     457,    -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,   485,   486,
      -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,
     497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,   588,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,     5,   643,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,   194,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,   223,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,   293,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,   588,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,     5,   643,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,
     223,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
     293,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,   372,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,   588,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,     5,
     643,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,   277,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
      -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
     496,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,     5,   643,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
     109,   110,   111,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,
     189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,
     269,    -1,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,
     289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,    -1,   325,   326,    -1,    -1,
      -1,    -1,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,   340,    -1,   342,    -1,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,
     369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,    -1,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,
     459,    -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,
     469,    -1,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,   485,   486,    -1,    -1,
      -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,
      -1,    -1,   501,    -1,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,
      -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,   558,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,     5,   643,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,   277,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
       5,   643,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    39,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,   182,   183,   184,
     185,    -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,
      -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,   220,    -1,   222,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,
      -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,
     275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,    -1,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,   486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,
      -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,
      -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,    -1,    -1,   550,   551,   552,   553,    -1,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,     5,   643,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
      -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,
     188,   189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,
      -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,
     268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,
      -1,   289,   290,    -1,    -1,   293,    -1,    -1,    -1,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,    -1,   325,   326,    -1,
      -1,    -1,    -1,   331,   332,   333,   334,   335,   336,    -1,
      -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,
     368,   369,    -1,    -1,   372,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
      -1,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,   457,
      -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,   485,   486,    -1,
      -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,
      -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,   507,
     508,    -1,   510,   511,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,
     528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
      -1,    -1,   550,   551,   552,   553,    -1,   555,   556,    -1,
     558,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
     588,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,     5,   643,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
      -1,   182,   183,   184,   185,    -1,    -1,   188,   189,    -1,
     191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,
      -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,   293,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
      -1,   342,    -1,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,
      -1,   372,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,     5,   643,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,     5,   643,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,    -1,    -1,   182,   183,   184,   185,    -1,
      -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,   196,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,
     267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,   293,    -1,    -1,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,    -1,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,   368,   369,    -1,    -1,   372,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
      -1,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,    -1,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,
     457,    -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,   485,   486,
      -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,
     497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,   588,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,     5,   643,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,   111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,     5,   643,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,   110,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,    -1,   191,   192,
     193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,    -1,   275,   276,   277,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,     5,
     643,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,   277,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
      -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
      -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,     5,   643,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,   133,   134,   135,    -1,   137,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,
     189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,
     269,    -1,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,
     289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,    -1,   325,   326,    -1,    -1,
      -1,    -1,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,   340,    -1,   342,    -1,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,
     369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,    -1,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,
     459,    -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,
     469,    -1,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,   485,   486,    -1,    -1,
      -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,
      -1,    -1,   501,    -1,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,
      -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,   558,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,     5,   643,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,   277,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
       5,   643,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,   182,   183,   184,
     185,    -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,
      -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,
      -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,
     275,   276,   277,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,    -1,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,   486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,
      -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,
      -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,    -1,    -1,   550,   551,   552,   553,    -1,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,     5,   643,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    20,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
      -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,
     188,   189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,
      -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,
     268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,
      -1,   289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,    -1,   325,   326,    -1,
      -1,    -1,    -1,   331,   332,   333,   334,   335,   336,    -1,
      -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,
     368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,
      -1,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
      -1,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,   457,
      -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,   485,   486,    -1,
      -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,
      -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,   507,
     508,    -1,   510,   511,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,
     528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
      -1,    -1,   550,   551,   552,   553,    -1,   555,   556,    -1,
     558,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,     5,   643,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,    -1,    -1,   188,   189,    -1,
     191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,
      -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
      -1,   342,    -1,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,
      -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,     5,   643,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,     5,   643,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,    -1,    -1,   182,   183,   184,   185,    -1,
      -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,   196,
      -1,    -1,    -1,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,
     267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,    -1,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
      -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,    -1,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,
     457,    -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,   485,   486,
      -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,
     497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,     5,   643,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,     5,   643,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
     133,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,    -1,   191,   192,
     193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,     5,
     643,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,   135,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,
     196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
     396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
      -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,   485,
     486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,
      -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,     5,   643,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,
     189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,
      -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,
     269,    -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,
      -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,
     289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,    -1,   325,   326,    -1,    -1,
      -1,    -1,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,   340,    -1,   342,    -1,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,
     369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,
     459,    -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,
     469,    -1,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,   485,   486,    -1,    -1,
      -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,
      -1,    -1,   501,    -1,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,
      -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,   558,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,     5,   643,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,
     222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,
     272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,
     462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,
     492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
       5,   643,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,   182,   183,   184,
     185,    -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,
      -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,    -1,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,
      -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,    -1,
     275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,    -1,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,   464,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,   486,    -1,    -1,    -1,   490,   491,   492,   493,    -1,
      -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,    -1,
      -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,    -1,    -1,   550,   551,   552,   553,    -1,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,     5,   643,     7,
       8,     9,    10,    11,    12,    13,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
      -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,    -1,   182,   183,   184,   185,    -1,    -1,
     188,   189,    -1,   191,   192,   193,    -1,    -1,   196,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,   227,
      -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,   257,
      -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,   267,
     268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,
      -1,   289,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,    -1,   325,   326,    -1,
      -1,    -1,    -1,   331,   332,   333,   334,   335,   336,    -1,
      -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,
     368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,    -1,
      -1,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
      -1,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,   457,
      -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,   485,   486,    -1,
      -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,   497,
      -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,   507,
     508,    -1,   510,   511,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,
     528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,   546,   547,
      -1,    -1,   550,   551,   552,   553,    -1,   555,   556,    -1,
     558,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,     5,   643,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
      -1,   182,   183,   184,   185,    -1,    -1,   188,   189,    -1,
     191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,   220,
      -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,    -1,
      -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
      -1,   342,    -1,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,   368,   369,    -1,
      -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,   490,
     491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
     501,    -1,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,     5,   643,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,    -1,   191,   192,   193,
      -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,    -1,
      -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,
     264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,    -1,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
     384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,    -1,
     464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,     5,   643,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,    -1,    -1,   182,   183,   184,   185,    -1,
      -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,   196,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,   220,    -1,   222,    -1,    -1,    -1,   226,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,    -1,
     267,   268,   269,    -1,    -1,   272,    -1,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,    -1,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
      -1,    -1,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,    -1,
     457,    -1,   459,    -1,   461,   462,    -1,   464,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,   485,   486,
      -1,    -1,    -1,   490,   491,   492,   493,    -1,    -1,    -1,
     497,    -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,   532,    -1,    -1,    -1,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,     5,   643,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
      -1,   191,   192,   193,    -1,    -1,   196,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
     220,    -1,   222,    -1,    -1,    -1,   226,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,    -1,    -1,    -1,   264,    -1,    -1,   267,   268,   269,
      -1,    -1,   272,    -1,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,   368,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,   396,    -1,    -1,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,    -1,   457,    -1,   459,
      -1,   461,   462,    -1,   464,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,   486,    -1,    -1,    -1,
     490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,    -1,
      -1,   501,    -1,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,     5,   643,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,    -1,   191,   192,
     193,    -1,    -1,   196,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,   220,    -1,   222,
      -1,    -1,    -1,   226,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,   264,    -1,    -1,   267,   268,   269,    -1,    -1,   272,
      -1,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,   368,   369,    -1,    -1,    -1,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,   396,    -1,    -1,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,    -1,   457,    -1,   459,    -1,   461,   462,
      -1,   464,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,   485,   486,    -1,    -1,    -1,   490,   491,   492,
     493,    -1,    -1,    -1,   497,    -1,    -1,    -1,   501,    -1,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,     5,
     643,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,
      -1,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,
     156,    -1,   158,   159,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,    -1,    -1,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,
      -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
     236,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,   261,    -1,    -1,   264,    -1,
      -1,    -1,   268,   269,    -1,    -1,   272,   273,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,   295,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,    -1,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
     396,    -1,    -1,    -1,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,    -1,    -1,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,    -1,    -1,   452,    -1,   454,   455,
      -1,   457,    -1,    -1,    -1,   461,    -1,    -1,   464,   465,
      -1,   467,   468,   469,    -1,    -1,   472,    -1,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,   485,
      -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,    -1,
      -1,   497,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,    -1,   510,    -1,   512,    -1,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,    -1,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
      -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,   631,    -1,    -1,    -1,   635,
      -1,    -1,   638,    -1,   640,    -1,     5,   643,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    -1,    85,    -1,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    -1,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,   137,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,   158,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,    -1,
      -1,    -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,
     189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,
      -1,    -1,   231,   232,   233,   234,   235,   236,    -1,   238,
     239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,
     249,    -1,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,
     259,   260,   261,    -1,    -1,   264,    -1,    -1,    -1,   268,
     269,    -1,    -1,   272,   273,    -1,   275,   276,    -1,    -1,
      -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,
     289,   290,    -1,    -1,    -1,    -1,   295,    -1,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,    -1,   325,   326,    -1,    -1,
      -1,    -1,   331,   332,   333,   334,   335,   336,    -1,    -1,
     339,   340,    -1,   342,    -1,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,    -1,
     369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,   396,    -1,    -1,
      -1,    -1,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,    -1,    -1,   416,   417,    -1,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,    -1,
     449,    -1,    -1,   452,    -1,   454,   455,    -1,   457,    -1,
      -1,    -1,   461,    -1,    -1,   464,   465,    -1,   467,   468,
     469,    -1,    -1,   472,    -1,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,   485,    -1,    -1,    -1,
      -1,   490,   491,   492,    -1,    -1,    -1,    -1,   497,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
      -1,   510,    -1,   512,    -1,   514,   515,    -1,    -1,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,
      -1,    -1,   531,    -1,    -1,    -1,    -1,   536,    -1,    -1,
      -1,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,   558,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,   627,   628,
     629,    -1,   631,    -1,    -1,    -1,   635,    -1,    -1,   638,
      -1,   640,    -1,     5,   643,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    -1,    85,    -1,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    -1,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,   134,    -1,    -1,   137,    -1,    -1,    -1,   141,
      -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
      -1,    -1,   154,   155,   156,    -1,   158,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,
     182,   183,   184,   185,    -1,    -1,   188,   189,   190,   191,
     192,   193,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,    -1,    -1,    -1,   219,   220,    -1,
      -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,   231,
     232,   233,   234,   235,   236,    -1,   238,   239,   240,    -1,
     242,    -1,   244,    -1,    -1,    -1,    -1,   249,    -1,    -1,
      -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,   261,
      -1,    -1,   264,    -1,    -1,    -1,   268,   269,    -1,    -1,
     272,   273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,
     282,   283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,
      -1,    -1,    -1,   295,    -1,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,    -1,
     342,    -1,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,   364,    -1,    -1,    -1,    -1,   369,    -1,    -1,
      -1,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   395,   396,    -1,    -1,    -1,    -1,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,    -1,    -1,   416,   417,    -1,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,    -1,    -1,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,    -1,   449,    -1,    -1,
     452,    -1,   454,   455,    -1,   457,    -1,    -1,    -1,   461,
      -1,    -1,   464,   465,    -1,   467,   468,   469,    -1,    -1,
     472,    -1,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,   485,    -1,    -1,    -1,    -1,   490,   491,
     492,    -1,    -1,    -1,    -1,   497,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,    -1,   510,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,
      -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,   558,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,
     602,    -1,    -1,    -1,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,   627,   628,   629,    -1,   631,
      -1,    -1,    -1,   635,    -1,    -1,   638,    -1,   640,    -1,
       5,   643,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,
      85,    -1,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,
      -1,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,    -1,    -1,    -1,    -1,   182,   183,   184,
     185,    -1,    -1,   188,   189,   190,   191,   192,   193,    -1,
      -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,    -1,   212,    -1,   214,
      -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
     235,   236,    -1,   238,   239,   240,    -1,   242,    -1,   244,
      -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,   254,
      -1,   256,   257,    -1,   259,   260,   261,    -1,    -1,   264,
      -1,    -1,    -1,   268,   269,    -1,    -1,   272,   273,    -1,
     275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,
     295,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,    -1,
     325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,   396,    -1,    -1,    -1,    -1,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,    -1,
      -1,   416,   417,    -1,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,    -1,   449,    -1,    -1,   452,    -1,   454,
     455,    -1,   457,    -1,    -1,    -1,   461,    -1,    -1,   464,
     465,    -1,   467,   468,   469,    -1,    -1,   472,    -1,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
     485,    -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,
      -1,    -1,   497,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,    -1,   510,    -1,   512,    -1,   514,
     515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,    -1,    -1,   528,    -1,    -1,   531,    -1,    -1,    -1,
      -1,   536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,
     545,   546,   547,    -1,    -1,   550,   551,   552,   553,    -1,
     555,   556,    -1,   558,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,
      -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,   631,    -1,    -1,    -1,
     635,    -1,    -1,   638,    -1,   640,    -1,     5,   643,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,   137,
      -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,   147,
      -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
      -1,    -1,    -1,    -1,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,   227,
      -1,    -1,    -1,   231,   232,   233,   234,   235,   236,    -1,
     238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,
      -1,   249,    -1,    -1,    -1,    -1,   254,    -1,   256,   257,
      -1,   259,   260,   261,    -1,    -1,   264,    -1,    -1,    -1,
     268,   269,    -1,    -1,   272,   273,    -1,   275,   276,    -1,
      -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,   287,
      -1,   289,   290,    -1,    -1,    -1,    -1,   295,    -1,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,    -1,   325,   326,    -1,
      -1,    -1,    -1,   331,   332,   333,   334,   335,   336,    -1,
      -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,    -1,
      -1,   369,    -1,    -1,    -1,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,   396,    -1,
      -1,    -1,    -1,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,    -1,    -1,   416,   417,
      -1,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
      -1,   449,    -1,    -1,   452,    -1,   454,   455,    -1,   457,
      -1,    -1,    -1,   461,    -1,    -1,   464,   465,    -1,   467,
     468,   469,    -1,    -1,   472,    -1,   474,   475,   476,   477,
     478,   479,   480,    -1,   482,   483,    -1,   485,    -1,    -1,
      -1,    -1,   490,   491,   492,    -1,    -1,    -1,    -1,   497,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,    -1,   510,    -1,   512,    -1,   514,   515,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,    -1,
     528,    -1,    -1,   531,    -1,    -1,    -1,    -1,   536,    -1,
      -1,    -1,   540,    -1,   542,   543,   544,   545,   546,   547,
      -1,    -1,   550,   551,   552,   553,    -1,   555,   556,    -1,
     558,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,
      -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,   631,    -1,    -1,    -1,   635,    -1,    -1,
     638,    -1,   640,    -1,     5,   643,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    -1,    85,    -1,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    -1,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,    -1,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,   182,   183,   184,   185,    -1,    -1,   188,   189,   190,
     191,   192,   193,    -1,    -1,    -1,    -1,    -1,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
      -1,   212,    -1,   214,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,
     231,   232,   233,   234,   235,   236,    -1,   238,   239,   240,
      -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,    -1,
      -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,   260,
     261,    -1,    -1,   264,    -1,    -1,    -1,   268,   269,    -1,
      -1,   272,   273,    -1,   275,   276,    -1,    -1,    -1,    -1,
      -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,   290,
      -1,    -1,    -1,    -1,   295,    -1,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,    -1,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
      -1,   342,    -1,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,    -1,   369,    -1,
      -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   395,   396,    -1,    -1,    -1,    -1,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,    -1,    -1,   416,   417,    -1,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,    -1,
      -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,    -1,   449,    -1,
      -1,   452,    -1,   454,   455,    -1,   457,    -1,    -1,    -1,
     461,    -1,    -1,   464,   465,    -1,   467,   468,   469,    -1,
      -1,   472,    -1,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,   485,    -1,    -1,    -1,    -1,   490,
     491,   492,    -1,    -1,    -1,    -1,   497,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,    -1,   510,
      -1,   512,    -1,   514,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,    -1,
     531,    -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,   558,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,
      -1,   602,    -1,    -1,    -1,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
     631,    -1,    -1,    -1,   635,    -1,    -1,   638,    -1,   640,
      -1,     5,   643,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    83,
      -1,    85,    -1,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    -1,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,    -1,    -1,    -1,    -1,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,   191,   192,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,
      -1,    -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,
     234,   235,   236,    -1,   238,   239,   240,    -1,   242,    -1,
     244,    -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,
     254,    -1,   256,   257,    -1,   259,   260,   261,    -1,    -1,
     264,    -1,    -1,    -1,   268,   269,    -1,    -1,   272,   273,
      -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,   283,
      -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,    -1,
      -1,   295,    -1,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
      -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,   333,
     334,   335,   336,    -1,    -1,   339,   340,    -1,   342,    -1,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
     364,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   395,   396,    -1,    -1,    -1,    -1,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
      -1,    -1,   416,   417,    -1,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,    -1,    -1,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,    -1,   449,    -1,    -1,   452,    -1,
     454,   455,    -1,   457,    -1,    -1,    -1,   461,    -1,    -1,
     464,   465,    -1,   467,   468,   469,    -1,    -1,   472,    -1,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,   485,    -1,    -1,    -1,    -1,   490,   491,   492,    -1,
      -1,    -1,    -1,   497,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,    -1,   510,    -1,   512,    -1,
     514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,
      -1,   525,    -1,    -1,   528,    -1,    -1,   531,    -1,    -1,
      -1,    -1,   536,    -1,    -1,    -1,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,   558,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,
      -1,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,   631,    -1,    -1,
      -1,   635,    -1,    -1,   638,    -1,   640,    -1,     5,   643,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,
     137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,    -1,    -1,    -1,    -1,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
      -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
     227,    -1,    -1,    -1,   231,   232,   233,   234,   235,   236,
      -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,    -1,
      -1,    -1,   249,    -1,    -1,    -1,    -1,   254,    -1,   256,
     257,    -1,   259,   260,   261,    -1,    -1,   264,    -1,    -1,
      -1,   268,   269,    -1,    -1,   272,   273,    -1,   275,   276,
      -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,    -1,
     287,    -1,   289,   290,    -1,    -1,    -1,    -1,   295,    -1,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,    -1,   325,   326,
      -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,   336,
      -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,    -1,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,   396,
      -1,    -1,    -1,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,    -1,    -1,   416,
     417,    -1,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,    -1,   449,    -1,    -1,   452,    -1,   454,   455,    -1,
     457,    -1,    -1,    -1,   461,    -1,    -1,   464,   465,    -1,
     467,   468,   469,    -1,    -1,   472,    -1,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,   485,    -1,
      -1,    -1,    -1,   490,   491,   492,    -1,    -1,    -1,    -1,
     497,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,    -1,   510,    -1,   512,    -1,   514,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,    -1,
      -1,   528,    -1,    -1,   531,    -1,    -1,    -1,    -1,   536,
      -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,
      -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,   631,    -1,    -1,    -1,   635,    -1,
      -1,   638,    -1,   640,    -1,     5,   643,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    -1,    85,    -1,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    -1,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,   134,    -1,    -1,   137,    -1,    -1,
      -1,   141,    -1,   143,   144,   145,   146,   147,    -1,    -1,
      -1,    -1,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,    -1,   163,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,    -1,    -1,
      -1,    -1,   182,   183,   184,   185,    -1,    -1,   188,   189,
     190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,   235,   236,    -1,   238,   239,
     240,    -1,   242,    -1,   244,    -1,    -1,    -1,    -1,   249,
      -1,    -1,    -1,    -1,   254,    -1,   256,   257,    -1,   259,
     260,   261,    -1,    -1,   264,    -1,    -1,    -1,   268,   269,
      -1,    -1,   272,   273,    -1,   275,   276,    -1,    -1,    -1,
      -1,    -1,   282,   283,    -1,   285,    -1,   287,    -1,   289,
     290,    -1,    -1,    -1,    -1,   295,    -1,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,    -1,   325,   326,    -1,    -1,    -1,
      -1,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,    -1,   342,    -1,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,   364,    -1,    -1,    -1,    -1,   369,
      -1,    -1,    -1,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,   396,    -1,    -1,    -1,
      -1,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,    -1,    -1,   416,   417,    -1,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
      -1,    -1,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,    -1,   449,
      -1,    -1,   452,    -1,   454,   455,    -1,   457,    -1,    -1,
      -1,   461,    -1,    -1,   464,   465,    -1,   467,   468,   469,
      -1,    -1,   472,    -1,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,   485,    -1,    -1,    -1,    -1,
     490,   491,   492,    -1,    -1,    -1,    -1,   497,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,    -1,
     510,    -1,   512,    -1,   514,   515,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,   525,    -1,    -1,   528,    -1,
      -1,   531,    -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,   558,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,   599,
      -1,    -1,   602,    -1,    -1,    -1,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,   631,    -1,    -1,    -1,   635,    -1,    -1,   638,    -1,
     640,    -1,     5,   643,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    -1,    85,    -1,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    -1,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,   134,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,    -1,
     163,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,   182,
     183,   184,   185,    -1,    -1,   188,   189,   190,   191,   192,
     193,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,    -1,   212,
      -1,   214,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,   231,   232,
     233,   234,   235,   236,    -1,   238,   239,   240,    -1,   242,
      -1,   244,    -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,
      -1,   254,    -1,   256,   257,    -1,   259,   260,   261,    -1,
      -1,   264,    -1,    -1,    -1,   268,   269,    -1,    -1,   272,
     273,    -1,   275,   276,    -1,    -1,    -1,    -1,    -1,   282,
     283,    -1,   285,    -1,   287,    -1,   289,   290,    -1,    -1,
      -1,    -1,   295,    -1,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,    -1,   325,   326,    -1,    -1,    -1,    -1,   331,   332,
     333,   334,   335,   336,    -1,    -1,   339,   340,    -1,   342,
      -1,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   395,   396,    -1,    -1,    -1,    -1,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,    -1,    -1,   416,   417,    -1,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,    -1,    -1,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,    -1,   449,    -1,    -1,   452,
      -1,   454,   455,    -1,   457,    -1,    -1,    -1,   461,    -1,
      -1,   464,   465,    -1,   467,   468,   469,    -1,    -1,   472,
      -1,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,   485,    -1,    -1,    -1,    -1,   490,   491,   492,
      -1,    -1,    -1,    -1,   497,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,    -1,   510,    -1,   512,
      -1,   514,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,    -1,    -1,   528,    -1,    -1,   531,    -1,
      -1,    -1,    -1,   536,    -1,    -1,    -1,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,   558,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,
      -1,    -1,    -1,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,   631,    -1,
      -1,    -1,   635,    -1,    -1,   638,    -1,   640,    -1,     5,
     643,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,
      -1,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   134,    -1,
      -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
     146,   147,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,    -1,   163,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,    -1,    -1,    -1,    -1,   182,   183,   184,   185,
      -1,    -1,   188,   189,    -1,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,
      -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,   242,    -1,   244,    -1,
      -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,   254,    -1,
     256,   257,    -1,   259,   260,    -1,    -1,    -1,   264,    -1,
      -1,    -1,   268,   269,    -1,    -1,   272,    -1,    -1,   275,
     276,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,   285,
      -1,   287,    -1,   289,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,    -1,   325,
     326,    -1,    -1,    -1,    -1,   331,   332,   333,   334,   335,
     336,    -1,    -1,   339,   340,    -1,   342,    -1,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,   364,    -1,
      -1,    -1,    -1,   369,    -1,    -1,    -1,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
     396,    -1,    -1,    -1,    -1,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,    -1,    -1,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,    -1,    -1,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,    -1,   449,    -1,    -1,   452,    -1,   454,    -1,
      -1,   457,    -1,    -1,    -1,   461,    -1,    -1,   464,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,    -1,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,   485,
      -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,    -1,
      -1,   497,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,   507,   508,    -1,   510,    -1,   512,    -1,   514,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,
      -1,    -1,   528,    -1,    -1,   531,    -1,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,   558,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
      -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
      -1,    -1,   638,    -1,   640,    -1,    -1,   643
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    60,    65,    66,
      86,   105,   129,   138,   139,   140,   151,   152,   164,   179,
     196,   211,   213,   218,   222,   248,   250,   266,   284,   288,
     383,   400,   402,   415,   426,   448,   451,   453,   456,   459,
     460,   470,   473,   481,   487,   495,   500,   501,   502,   532,
     539,   584,   596,   600,   603,   609,   639,   645,   655,   666,
     669,   670,   671,   672,   673,   675,   680,   682,   691,   724,
     752,   759,   760,   879,   935,   970,  1056,  1106,  1109,  1119,
    1122,  1127,  1140,  1141,  1146,  1149,  1154,  1161,  1173,  1174,
    1343,  1345,  1356,  1359,  1384,  1392,  1405,  1412,  1426,  1430,
    1433,  1444,  1450,  1454,  1459,  1460,  1461,  1514,  1541,  1547,
    1549,  1556,  1559,  1593,  1599,  1600,  1601,  1602,  1653,  1661,
    1662,  1663,    12,   116,   134,   204,   289,   420,   493,   556,
    1057,  1624,  1625,  1626,  1627,   285,   370,  1148,  1594,   565,
    1503,   241,     5,     7,     8,     9,    10,    11,    12,    15,
      19,    22,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    34,    38,    42,    45,    46,    47,    49,    51,    52,
      55,    58,    59,    61,    62,    64,    65,    67,    68,    69,
      70,    71,    72,    73,    75,    76,    77,    78,    79,    80,
      81,    83,    84,    85,    86,    87,    88,    89,    90,    92,
      93,    95,    96,    97,    98,    99,   101,   104,   107,   109,
     112,   114,   118,   119,   120,   123,   128,   129,   134,   135,
     137,   141,   143,   144,   145,   146,   147,   151,   154,   155,
     156,   160,   162,   163,   165,   166,   167,   170,   171,   173,
     174,   175,   176,   177,   178,   179,   182,   183,   184,   185,
     188,   189,   191,   192,   193,   196,   200,   202,   204,   206,
     207,   208,   209,   210,   211,   212,   214,   218,   219,   220,
     222,   226,   227,   231,   232,   233,   234,   235,   238,   239,
     240,   242,   244,   249,   250,   254,   256,   257,   259,   260,
     264,   267,   268,   269,   272,   275,   276,   282,   283,   285,
     287,   289,   290,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   315,
     316,   317,   318,   320,   321,   322,   323,   325,   326,   331,
     332,   333,   334,   335,   336,   339,   340,   342,   344,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   357,   358,
     361,   362,   363,   364,   368,   369,   373,   375,   376,   377,
     379,   380,   381,   382,   384,   385,   394,   395,   396,   399,
     401,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   415,   416,   417,   419,   421,   422,   423,   424,   425,
     427,   428,   429,   432,   436,   437,   438,   439,   440,   443,
     444,   445,   446,   447,   449,   450,   452,   453,   454,   457,
     459,   461,   462,   464,   465,   467,   469,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   485,
     486,   490,   491,   492,   493,   497,   501,   503,   504,   505,
     506,   507,   508,   510,   511,   512,   513,   514,   515,   522,
     523,   525,   528,   531,   532,   536,   539,   540,   542,   543,
     544,   545,   546,   547,   550,   551,   552,   553,   555,   556,
     558,   560,   561,   562,   563,   566,   567,   569,   570,   571,
     572,   578,   579,   580,   584,   585,   586,   587,   589,   590,
     592,   593,   595,   596,   599,   602,   604,   606,   607,   608,
     615,   618,   622,   623,   624,   625,   626,   627,   628,   635,
     636,   638,   639,   640,   643,   718,  1502,  1506,  1512,  1513,
     315,   555,   559,  1543,  1543,   635,  1595,   116,   203,   289,
     390,   472,   493,   516,   556,   598,   606,   701,  1033,  1034,
    1035,  1393,  1344,   116,   175,   204,   241,   289,   420,   472,
     493,   556,   562,   581,   606,   623,  1355,  1506,  1148,   109,
     761,   717,   663,  1499,  1501,  1506,   681,  1357,   409,   513,
    1455,   119,   241,   640,  1466,  1543,  1148,   655,   880,  1506,
    1451,   481,   606,  1543,  1148,  1360,  1445,   519,   749,   753,
     754,  1506,   717,  1595,  1506,  1177,  1179,  1180,  1515,  1413,
     753,    13,   505,   578,    13,   505,   559,  1407,   409,   513,
    1548,  1385,  1506,    34,    86,   162,   415,   437,   473,   532,
    1655,   487,   655,  1175,     0,   164,   667,   415,   562,   700,
     931,   932,   933,   184,   403,  1431,  1499,  1506,   168,  1068,
    1506,   168,   718,   215,   718,   277,  1503,  1506,  1508,   825,
     826,   829,   852,  1506,  1098,  1099,   175,  1063,  1624,  1543,
    1595,  1155,   725,   663,   689,   690,  1503,  1120,  1142,    18,
    1596,   236,   934,   215,   456,   717,  1508,   827,   852,   717,
     241,   241,   241,   237,   296,   429,  1403,  1404,     8,    22,
      31,    37,    39,    40,    41,    43,    56,    57,    62,    63,
      72,    75,    77,    78,    79,    80,    81,    98,   102,   103,
     108,   110,   111,   115,   116,   121,   122,   123,   128,   130,
     133,   180,   186,   187,   194,   208,   210,   216,   223,   224,
     231,   236,   248,   251,   269,   274,   282,   293,   319,   324,
     335,   339,   341,   345,   346,   347,   348,   349,   356,   365,
     366,   367,   371,   372,   377,   398,   405,   410,   411,   413,
     427,   455,   456,   469,   471,   478,   479,   485,   537,   538,
     544,   548,   549,   554,   565,   569,   570,   571,   572,   582,
     583,   584,   588,   591,   606,   611,   612,   613,   614,   619,
     621,   627,   628,   643,   648,   649,   654,   655,   658,   659,
     662,   663,  1196,  1197,  1198,  1199,  1203,  1210,  1211,  1212,
    1213,  1214,  1215,  1223,  1227,  1240,  1485,  1487,  1489,  1490,
    1491,  1495,  1497,  1502,  1506,   236,  1354,  1354,  1354,  1354,
     215,  1354,   717,  1354,   852,  1354,   717,  1354,  1543,   676,
    1434,   143,    13,    14,   105,   111,   138,   152,   175,   179,
     191,   213,   241,   248,   288,   421,   425,   441,   449,   457,
     487,   500,   501,   550,   581,   603,   605,  1508,  1560,  1564,
    1565,  1567,  1569,  1570,  1506,   382,    71,   433,   663,  1508,
     136,   225,   296,  1362,  1506,  1503,   219,   512,  1456,   252,
    1462,  1542,  1543,   971,  1190,    50,   881,   201,    37,   315,
    1418,  1452,  1506,   717,  1150,  1543,   136,   296,  1363,  1391,
     315,   428,   505,  1446,  1447,   615,   750,   495,   755,     7,
      13,   425,  1557,  1558,  1565,  1567,   576,  1596,  1178,    13,
     148,   225,   521,   522,   523,   524,   525,   526,   541,  1184,
    1185,  1186,  1620,    62,    63,   133,   212,   285,   352,   405,
     472,   492,   578,   662,   996,  1506,  1516,  1528,  1532,  1533,
      13,    26,    38,    62,    70,    75,   101,   103,   105,   117,
     166,   171,   174,   202,   204,   212,   214,   240,   241,   242,
     263,   285,   315,   382,   408,   419,   420,   423,   424,   444,
     492,   505,   540,   558,   559,   607,   626,   996,  1032,  1414,
    1418,  1419,  1421,  1430,  1529,   755,   506,   689,   433,   632,
    1110,  1111,  1112,   506,   689,  1406,  1506,  1503,  1543,  1391,
      39,   223,   224,   565,  1486,  1504,  1654,  1654,  1654,  1654,
    1654,  1179,  1175,   656,   661,  1506,  1621,  1625,  1626,  1627,
     559,   932,  1428,  1427,   333,   563,   590,  1059,   604,   110,
    1508,  1509,  1510,  1564,  1061,   831,   853,  1506,  1060,   384,
       6,    60,   152,   366,   432,   434,   854,   559,   237,   381,
    1100,  1101,  1102,   718,   527,  1628,  1629,  1062,  1128,  1156,
    1157,  1158,  1159,  1499,   655,   726,  1506,   576,  1349,  1350,
    1499,  1349,    59,   368,   368,   448,  1597,   365,   366,  1202,
    1506,   830,   853,  1563,  1565,   198,     6,  1509,  1510,  1511,
    1580,  1584,   934,   934,   934,   201,  1394,  1400,  1401,  1506,
    1403,   655,   655,   655,  1210,   655,   655,   655,  1196,  1243,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,  1195,  1195,  1195,   655,  1194,   655,
     655,   655,   565,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,  1196,   655,   655,   655,   655,
    1241,  1242,  1495,  1506,   655,   655,   655,   655,   655,   655,
     655,   655,   655,  1196,  1194,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,  1194,   565,   655,   655,   655,   565,   655,
     655,   655,    39,   223,   224,   565,   995,   655,  1195,  1194,
    1194,   655,   655,   655,   655,   655,   655,  1210,  1210,  1210,
    1196,  1615,  1616,  1506,  1228,  1506,    17,    18,   387,   390,
     641,  1200,  1201,   168,   169,   205,   217,   258,   270,   297,
     359,  1204,    35,   149,   255,   278,   345,   442,   498,   499,
     514,   646,   647,   648,   649,   650,   651,   652,   653,  1202,
    1210,    74,   389,   657,  1504,   655,   663,   180,  1506,   718,
    1506,  1506,   853,   718,  1563,  1508,   863,  1419,   718,  1509,
    1511,  1579,  1348,  1354,   610,   677,    37,    70,   141,   166,
     170,   206,   227,   242,   290,   315,   419,   428,   443,   461,
     505,   508,   536,   558,   607,  1435,  1440,  1441,  1543,    91,
     662,   762,   763,   764,   765,  1506,   419,  1568,   475,   475,
     556,   562,   606,   623,  1195,   385,  1572,   555,   378,  1574,
      69,   505,  1571,   117,   623,  1573,   576,   378,   657,    20,
     168,  1295,  1296,  1550,  1506,   237,  1096,   513,    92,   428,
    1457,    52,    90,   296,  1468,  1499,  1544,  1545,  1147,   656,
    1196,   280,   283,   430,   882,   884,   662,   674,  1503,   290,
    1151,  1511,  1152,  1153,  1499,  1123,   252,  1351,  1364,  1365,
    1499,    52,  1448,   657,  1504,    58,    68,    83,    95,    96,
      97,   114,   334,   351,   483,   543,   561,   756,   758,   385,
    1568,   378,   201,   378,   481,  1598,  1597,   597,  1603,  1604,
     650,  1188,  1189,  1190,  1186,   495,   663,    37,   133,   168,
     496,   997,   998,  1375,  1508,   199,  1375,  1508,  1518,   662,
    1508,    37,   133,  1000,  1001,  1508,   663,  1519,  1517,  1375,
     506,   174,   278,   630,  1425,   655,   116,   175,   204,   420,
     559,   581,   623,  1425,    13,   944,  1508,   279,  1314,  1316,
     201,   255,  1420,  1422,    73,   536,   199,   536,   555,   513,
      73,   536,    13,    45,    99,   104,   257,   332,   396,   515,
     552,  1408,  1409,  1410,   689,   227,   536,   690,   536,  1314,
    1425,  1422,   290,   165,    76,   422,   555,   580,   199,   536,
     618,  1113,  1114,  1113,   380,   637,    93,   657,  1113,  1113,
    1350,  1096,   657,   379,  1657,   551,  1658,   262,   464,  1656,
     656,  1604,  1606,  1608,  1609,   164,   668,    11,   420,   581,
     704,  1190,  1623,  1629,  1637,  1641,  1642,  1648,   704,  1190,
    1622,  1629,  1637,  1642,  1648,  1624,   934,  1173,  1356,  1359,
    1384,  1392,  1429,  1432,  1486,  1506,   133,   929,   930,   941,
     942,  1005,   119,  1195,   662,   719,     6,   832,   719,   655,
     118,   849,   849,   849,     4,  1499,  1102,  1064,   486,   623,
    1629,  1129,  1130,  1350,   255,   657,   402,  1167,  1169,  1170,
     727,   728,  1196,   683,   184,   429,   657,  1121,    61,   184,
     188,   199,   331,   429,  1143,  1144,  1145,    59,   448,   180,
     699,   832,   632,   657,  1561,   119,   849,   234,   657,  1506,
    1506,  1506,  1352,  1353,  1499,  1500,  1506,   657,  1397,   663,
    1402,  1196,  1196,    13,   148,  1235,  1297,  1235,  1235,  1235,
     629,  1245,  1196,  1196,  1240,  1240,  1196,  1196,  1196,  1196,
    1208,  1209,  1196,  1196,  1196,  1196,   148,  1235,  1297,   656,
     130,   194,   223,   293,   372,   588,   656,  1323,  1326,  1327,
     656,  1196,  1196,  1196,  1196,  1495,  1615,   124,   125,   126,
     127,   128,   228,   229,   230,   231,   335,   337,   338,   339,
     346,   427,   484,   485,   627,   642,   643,  1292,  1293,  1240,
     120,   123,   569,   572,  1294,   148,  1230,  1196,  1196,  1196,
    1196,  1292,  1240,  1196,  1240,  1242,    10,   657,   663,   148,
    1235,  1196,  1196,   148,  1235,  1196,  1196,  1240,  1240,  1240,
    1196,  1196,  1196,  1240,  1199,  1196,  1196,  1196,  1196,  1196,
    1196,   656,  1196,  1235,  1235,  1196,  1196,   148,  1235,  1196,
    1293,  1293,  1196,    48,   271,   577,  1196,  1196,   656,  1496,
    1497,  1506,  1235,  1235,  1196,  1196,  1196,   656,   657,   656,
     487,   655,  1612,  1613,  1196,   662,  1229,  1508,   663,  1196,
    1196,  1196,  1198,   187,   371,   583,   599,  1202,    13,    19,
    1198,  1205,  1199,  1199,   655,  1210,  1199,  1199,  1199,  1199,
     278,  1199,  1199,   251,  1199,   251,  1199,  1199,  1199,  1199,
    1199,    35,   255,   278,   442,  1508,  1210,  1196,  1216,  1506,
     663,   378,   863,   369,   625,   864,   865,   166,   657,  1349,
    1346,   662,   678,   679,   290,   290,   290,   290,    52,   290,
     689,   290,   657,  1436,   123,   569,   572,   757,   767,  1227,
    1489,  1495,  1508,   657,   168,   555,   655,  1585,  1511,  1585,
    1585,  1585,  1580,   204,   420,   559,  1566,   175,   179,   191,
     421,   449,   457,   501,   550,  1570,  1506,   192,   362,  1506,
    1551,  1552,  1364,  1503,   232,   606,  1196,  1458,  1162,   285,
    1467,  1296,   657,  1349,  1191,    76,   655,   889,   890,   889,
     890,   403,   892,   220,   265,  1508,    33,   576,  1453,   657,
     576,   657,   576,  1349,  1365,  1361,   402,  1259,  1260,   689,
    1447,   657,   168,   199,   657,  1511,  1510,  1581,   204,   420,
    1566,  1506,    13,   148,  1611,   657,  1181,  1196,  1493,  1506,
    1506,    74,  1003,  1196,  1511,   377,   405,   565,  1539,   259,
     433,  1534,  1535,  1536,  1537,   212,   285,   492,  1530,  1375,
    1506,   578,  1520,  1531,  1533,   657,  1522,    13,    37,   133,
     378,  1196,  1540,   536,   255,  1423,  1503,  1196,   650,   934,
     718,   718,   718,  1499,   718,  1499,   290,   350,   536,  1417,
    1417,   293,   372,   476,   588,  1317,  1318,  1487,  1506,  1425,
    1506,   718,  1425,  1510,  1420,  1425,  1503,   718,  1425,   256,
     553,   189,   199,  1411,   657,   174,   536,  1420,  1499,  1422,
    1420,  1420,  1196,  1425,  1425,  1108,   447,   528,  1115,  1116,
    1107,   510,  1112,   487,   655,   659,  1246,  1247,  1248,  1249,
    1250,  1261,  1262,  1276,  1486,   407,  1659,   388,  1310,  1316,
    1610,  1190,  1190,  1190,   175,   204,   204,  1629,  1499,   930,
      74,   996,   144,  1508,    84,    98,   267,   343,   368,   431,
     527,   721,   723,   438,   592,   850,   851,   244,   846,   847,
     848,   855,   863,   865,   116,   226,   394,   405,   412,   511,
     606,   702,   703,  1503,    27,   323,   840,   841,   842,   855,
     856,   857,   863,   865,   833,   834,   840,  1058,   378,   712,
    1065,   134,   254,  1499,   657,   406,  1131,   133,  1160,  1506,
    1158,  1499,   878,  1169,   241,   265,  1030,  1171,   656,   657,
     238,   298,   300,   301,   302,   303,   304,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   316,   317,   318,   445,
     446,   684,   685,   688,  1350,   604,  1144,   928,   929,    84,
     363,   439,   593,   843,   844,   845,   855,   859,   860,   861,
     862,   863,   865,     7,  1565,   636,   609,   828,    50,   622,
     632,  1582,  1584,  1036,  1037,  1036,  1036,   657,  1398,  1259,
     663,  1402,  1401,   201,   650,  1506,   657,   656,  1235,   656,
    1236,   656,   656,   656,  1196,   158,   629,  1244,    20,   656,
     610,   656,   656,   656,   657,   656,   657,   656,   657,   657,
     657,   657,   610,   657,  1224,   656,   650,   656,   657,   657,
     656,   656,   656,   656,   201,   656,   657,  1226,   656,   657,
     657,   657,   649,   656,   657,   656,   656,   655,  1495,  1506,
    1235,   656,   656,   656,  1235,   656,   657,   656,   656,   656,
     656,   656,   656,   657,   656,   255,   656,   657,   657,   656,
     657,   657,   656,   656,   656,   657,   201,   657,  1235,   656,
     656,   657,   657,   657,   656,   201,  1196,   201,  1196,   201,
    1196,   201,   656,   657,   656,   656,   656,   656,   657,    20,
     276,   657,  1020,   656,  1240,  1266,  1267,  1268,   487,   655,
    1176,  1607,  1608,   597,  1617,   660,  1530,   496,  1506,   187,
     371,   583,   599,   655,    18,  1196,  1615,   173,  1302,  1199,
    1196,  1196,  1199,   655,  1210,  1199,  1190,  1220,  1221,  1222,
     655,   663,  1506,  1499,   864,  1375,  1376,  1511,    54,   463,
    1103,  1349,  1508,   657,   689,  1441,  1349,  1442,   765,   768,
     769,   764,   373,   479,   766,  1506,  1586,  1587,   576,   632,
    1562,   650,  1499,  1506,  1578,  1578,  1578,   168,   192,   205,
     217,   268,   270,   297,   362,   417,  1553,  1555,   630,  1298,
    1358,  1511,  1163,  1164,  1165,  1166,  1499,   243,   296,   433,
     637,  1546,  1545,   655,  1190,  1323,   547,   893,   883,    12,
     885,  1196,  1503,  1511,  1511,  1153,  1499,   184,   429,   608,
    1124,  1125,  1126,   487,   495,   614,   615,   655,   924,  1366,
    1369,   655,    13,  1449,   758,   757,  1565,   213,   201,   657,
    1578,  1578,  1578,  1605,  1189,   201,   252,  1182,  1183,  1309,
    1310,  1338,  1191,  1191,   663,   133,  1002,  1004,  1508,  1375,
     655,   655,   276,   380,   637,   657,   657,   663,   663,   663,
    1533,  1196,  1534,  1521,  1375,  1523,  1524,  1503,   201,  1424,
     656,  1506,   178,   476,   376,   657,  1425,   428,  1314,  1410,
    1423,  1425,  1420,  1499,  1425,  1425,   657,   602,  1117,  1275,
    1506,   106,   245,   262,   274,   355,   471,   541,  1257,  1258,
     495,   657,  1499,  1275,   657,   199,  1660,    50,  1314,   204,
     718,   718,   934,   718,  1506,   692,  1376,  1376,   353,  1503,
     527,   527,   527,   527,   527,   486,  1503,  1503,  1376,   657,
     848,  1503,  1503,  1503,  1503,   130,   194,   223,   293,   372,
     588,  1322,  1503,  1503,   656,   657,  1376,  1376,   657,   842,
     835,   836,   855,   856,   857,     6,    12,    14,    16,    28,
      30,    60,    65,    66,    72,    84,    92,   102,   119,   135,
     137,   145,   146,   152,   160,   166,   177,   197,   239,   241,
     249,   264,   288,   322,   340,   344,   383,   388,   395,   397,
     402,   405,   436,   450,   451,   452,   453,   477,   533,   534,
     535,   540,   556,   560,   579,   584,   597,   876,   937,   939,
     941,   942,  1069,  1073,  1075,  1078,  1085,  1086,  1087,  1088,
    1093,  1094,  1306,  1502,    88,   482,   451,  1066,  1630,  1130,
     199,  1168,   655,  1196,   168,   168,   168,   168,   168,   168,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
     168,   168,   168,   168,   168,   657,  1376,  1376,  1376,  1376,
     657,   845,  1510,  1508,   289,   185,   837,   838,   839,   855,
     856,   857,   858,   861,   862,   863,   865,   405,   565,  1508,
     586,   610,  1044,   378,   378,   378,  1353,  1506,   610,  1395,
    1506,  1247,   663,  1402,   251,  1196,   656,  1196,   568,  1196,
    1196,   162,    37,    63,   120,   123,   131,   150,   253,   357,
     503,   572,   601,  1237,   997,  1209,  1196,  1208,  1240,  1196,
    1196,   997,  1237,  1240,   656,   251,   251,  1196,  1196,  1240,
    1196,  1196,  1196,  1196,  1196,  1199,   656,   656,  1196,  1196,
    1196,  1196,  1196,  1196,  1240,   251,  1196,  1196,  1196,   656,
    1196,  1196,  1196,  1196,   201,  1196,   201,  1196,   201,  1196,
    1196,  1196,    37,    63,  1015,  1016,  1017,  1018,  1019,  1323,
    1322,   656,   656,  1618,  1619,  1620,  1267,  1176,   656,  1611,
    1508,  1196,  1615,  1198,   656,   657,   656,  1210,  1292,  1292,
      18,  1196,  1615,  1302,  1196,   656,   657,  1239,  1240,  1506,
    1347,   943,  1508,  1103,   679,   199,   632,  1437,  1438,   168,
     657,   656,   657,  1580,     7,   663,   663,   576,   576,   576,
    1554,  1299,  1315,  1316,  1366,   657,  1167,  1169,   565,  1505,
     637,   285,    90,   886,   887,   888,  1506,   898,  1199,    50,
     655,   900,   890,   168,   655,   576,  1125,   925,  1367,   655,
    1372,  1377,  1372,   656,   924,  1368,  1492,  1493,  1496,  1506,
    1370,  1291,  1506,   168,   385,  1579,  1510,   201,   201,   201,
    1174,   153,  1247,  1339,   199,   288,  1187,  1338,  1315,  1183,
      20,  1192,  1503,  1506,   650,  1506,  1539,   565,   565,   433,
     454,   490,  1538,  1536,  1535,  1375,  1522,  1540,   657,  1526,
    1528,  1532,   130,   194,   293,   372,   588,  1324,  1415,   171,
     626,  1318,  1319,   178,  1318,  1318,   372,  1424,  1298,  1420,
    1116,   299,   688,  1118,  1263,  1270,  1275,  1246,   262,   262,
     391,  1277,   274,   471,  1257,  1277,  1246,  1387,  1388,  1496,
    1248,  1259,  1272,  1273,  1322,   336,  1311,  1506,  1649,     9,
      33,   823,   718,   655,   467,   278,   655,   867,   870,   936,
     938,   939,  1004,   998,   119,   119,   134,   254,   223,   293,
     372,   588,   866,  1325,  1326,  1502,   848,   703,   866,   866,
     842,   657,   836,    82,    94,   402,   953,   960,   961,  1028,
    1030,  1034,  1035,  1095,  1376,  1095,   402,  1376,  1376,  1095,
    1376,   402,   402,  1376,  1376,   576,   144,   241,  1084,  1376,
     263,   556,   198,   402,   418,  1030,  1095,   263,  1376,   402,
     556,   144,  1376,  1376,  1376,  1376,  1376,  1095,   402,    50,
    1376,  1376,   878,  1376,   402,   404,    20,   168,   576,  1105,
     402,   402,  1376,  1376,  1376,  1376,   147,   332,  1506,  1376,
    1376,   402,  1376,   937,   657,   875,   876,  1073,   655,   663,
     952,   962,  1498,  1506,  1375,   366,   416,    25,   176,   706,
     576,   145,   160,   708,   655,  1631,    13,    76,  1132,   655,
     418,  1288,  1289,  1290,  1506,   655,  1322,  1503,  1503,  1324,
    1503,  1322,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1322,
    1322,  1503,   112,   368,   507,  1490,  1503,  1322,   685,  1503,
    1323,   866,   866,   845,   384,   215,  1376,   657,   839,   565,
      20,   610,  1583,    49,   220,   480,  1049,  1049,  1499,  1499,
    1499,   663,  1247,  1298,  1402,  1298,  1196,   656,  1196,   568,
     655,   987,   988,   988,   988,   655,   982,   983,   987,  1238,
     988,   253,   988,   253,   656,   656,   656,    20,  1206,   656,
      20,   656,   656,   656,  1225,  1196,  1196,   656,   656,   388,
    1232,   657,   657,   656,   657,   656,   255,  1217,  1218,   656,
     656,   656,   656,   657,   656,   656,  1196,   656,   199,   656,
     656,   657,   656,   657,   657,   656,  1196,   656,  1196,   656,
    1196,   656,   656,   656,   655,  1010,  1010,    21,   139,   469,
     648,  1012,  1013,  1014,   657,   657,  1188,  1620,   656,  1614,
     663,  1054,   656,  1240,  1198,   656,   657,   656,  1191,  1222,
     656,  1439,   433,    58,    68,    83,    95,    96,    97,   114,
     334,   351,   465,   483,   543,   561,   770,   769,  1587,   632,
    1590,   385,   650,   650,  1580,  1580,  1580,   655,  1196,   378,
    1382,  1165,  1499,  1169,   237,  1172,  1463,   656,   657,  1191,
     884,   402,   901,   902,  1323,   886,  1511,  1184,  1373,  1374,
    1496,  1378,   657,   655,  1369,   656,   656,   657,   663,  1603,
     656,   657,   757,   201,  1581,  1581,  1581,  1298,  1298,   154,
     392,  1334,  1335,  1340,   603,   255,  1503,  1506,   663,   656,
     656,    85,   589,   433,  1540,  1525,  1527,  1314,  1319,  1416,
    1425,   168,   657,   597,   656,  1607,  1271,   660,   262,  1277,
    1277,  1261,   262,   378,   610,   657,  1386,  1375,  1296,  1184,
    1196,  1312,  1494,   467,   655,   138,   248,   603,   824,   705,
    1643,   131,   253,   435,   542,   948,  1499,   278,   924,   949,
     950,   951,   952,   953,   874,   875,   657,   938,   836,  1052,
    1498,   934,    66,   198,   418,   598,   959,  1029,   934,  1053,
    1030,  1031,  1031,   934,   133,  1506,  1498,  1148,  1324,  1322,
    1354,  1322,    13,  1074,  1082,  1083,  1506,  1148,  1503,  1503,
     996,  1376,   418,  1506,    24,  1097,  1322,   265,  1354,   265,
    1354,  1354,   943,  1083,  1376,   192,   268,   368,   946,  1322,
     133,  1506,  1324,  1324,  1354,  1148,  1307,  1308,  1496,   133,
    1322,   133,  1322,  1328,   877,  1503,  1148,  1499,  1148,  1148,
      87,    89,   133,   156,   193,   396,   440,   945,   133,  1322,
     133,  1322,   133,  1322,  1322,  1328,  1074,   940,     6,   152,
    1088,   949,  1506,     9,   192,  1104,   441,   958,   959,  1022,
     963,   663,   133,  1325,  1503,  1506,   416,  1196,  1196,   378,
     712,   718,   378,    84,   713,  1506,  1632,    20,    13,   655,
    1133,  1074,   656,   657,   686,   687,  1322,   655,  1506,   866,
     839,  1503,   693,   695,   697,  1506,  1298,  1309,  1292,  1196,
     130,   293,   372,   588,    22,    37,    51,   595,   996,  1006,
    1007,  1008,   372,   655,   983,   989,    63,   120,   123,   131,
     150,   195,   253,   354,   357,   435,   572,   601,   976,   977,
    1207,  1237,   656,  1292,  1292,    50,   489,  1231,  1196,  1196,
    1240,    46,   355,   656,   632,  1219,  1196,  1292,  1196,  1196,
    1196,  1196,   656,   656,   656,  1323,   656,  1020,  1015,  1013,
    1015,  1016,  1322,  1269,  1612,  1506,   656,  1240,  1192,   183,
     288,   213,   458,  1588,  1588,  1588,   133,  1196,  1380,  1381,
     155,  1172,   272,   237,   456,  1469,   888,   656,   220,   265,
     903,   656,   657,   656,  1188,   657,  1375,  1379,  1380,  1377,
    1371,  1369,  1492,  1506,   878,  1506,  1581,  1315,   215,  1303,
    1505,  1505,   662,  1336,  1337,  1508,   497,   650,  1526,  1531,
    1314,  1503,   688,  1611,  1296,  1249,  1246,  1261,   262,   262,
    1246,  1261,  1251,  1252,  1388,  1298,  1381,  1286,  1287,  1188,
     657,    21,   139,  1313,   948,  1650,   378,   378,   729,   730,
     732,  1506,   513,  1499,   656,   656,   657,   871,  1469,   938,
    1148,   655,   265,   265,  1031,  1053,  1052,  1037,  1053,  1053,
     152,   495,  1074,  1498,  1071,   657,  1323,   998,  1503,  1354,
    1082,  1498,  1498,   632,  1503,  1498,  1074,   657,  1313,   881,
    1074,  1079,  1074,   655,   656,  1506,  1499,    36,    37,    42,
      44,    46,    47,   120,   123,   131,   150,   167,   193,   195,
     208,   209,   253,   282,   291,   292,   294,   328,   329,   330,
     347,   348,   349,   354,   357,   374,   375,   410,   411,   435,
     491,   495,   509,   566,   569,   572,   573,   574,   575,   616,
     617,   643,   964,   972,   975,   976,   977,   978,   979,   980,
     981,  1506,  1292,   505,  1503,   151,  1067,   656,   657,  1633,
    1634,  1134,   240,   656,  1289,   656,   657,   702,   655,   655,
     655,   279,  1320,   656,   656,   656,   656,   656,    37,    22,
     595,   996,    37,   997,   657,   372,   988,   982,    63,   988,
     253,  1008,   656,   656,   656,  1233,  1486,   656,   656,   657,
     656,   342,   267,   428,   656,   656,   656,   656,   656,   656,
    1011,   656,   657,   947,  1183,  1315,  1607,   656,    18,  1443,
     385,    67,   260,   364,   529,   545,   638,  1576,  1577,   632,
    1589,  1589,  1589,   656,   657,  1383,   252,   655,   891,   885,
     904,  1506,   902,   926,  1374,  1381,   656,  1606,    50,   221,
    1300,  1341,  1508,   657,   342,  1264,   378,  1254,  1261,  1261,
     378,  1256,  1196,   655,  1309,  1284,  1285,  1274,  1494,   513,
     246,   255,   393,   733,   734,   735,   736,  1190,   482,   656,
     657,   731,  1503,   656,   869,   868,   951,    20,   927,  1076,
    1196,  1053,  1037,   655,  1036,  1036,   133,   133,  1089,  1143,
    1083,  1003,  1498,  1103,   559,  1090,  1070,  1308,  1080,  1082,
    1072,  1442,   655,  1023,   987,   987,   988,   988,   982,   414,
     973,   982,   982,  1008,    63,   616,   976,   978,  1008,  1008,
      63,   617,   617,   620,   982,   974,   988,   988,   988,  1008,
     987,   988,    28,    74,    84,   133,   207,   371,   378,   418,
     491,   598,   965,   990,   991,   992,  1021,  1202,  1502,   620,
     987,  1008,    37,   987,  1009,   987,   987,   988,   989,   663,
     707,   714,   715,  1506,   487,   655,  1635,  1137,  1506,    13,
     655,  1135,   687,   656,  1050,  1051,  1506,  1050,  1050,   476,
    1318,  1396,   997,  1009,   372,  1234,  1494,  1196,   342,   182,
     656,  1322,  1187,  1187,   145,   565,   565,   565,    18,  1575,
     213,   320,   321,   325,   326,  1591,  1592,  1381,   265,   559,
    1190,   894,   655,   614,   905,   947,  1304,  1494,  1301,  1309,
     996,   999,  1337,  1612,  1253,   610,  1255,   610,  1291,  1320,
     197,   237,   609,  1279,  1280,  1283,   947,  1313,  1503,   656,
     657,   731,  1638,   706,  1644,   732,   972,   993,  1606,   936,
     655,   924,   403,   655,  1077,   656,   655,   655,  1050,   655,
     655,   123,   569,   572,   648,   649,  1488,  1489,   962,  1499,
     964,  1148,  1081,  1124,   656,  1024,  1506,   319,  1025,   503,
     601,   644,   984,   985,   986,   655,   984,   984,  1008,   620,
     984,   655,  1008,   984,  1002,  1503,   367,   994,  1488,    15,
     603,   133,   265,    20,   992,   265,   371,  1375,  1008,  1009,
    1008,  1009,   984,   984,  1506,   531,   709,    56,    71,   190,
     236,   261,   273,   382,   468,   716,   774,   776,   777,   778,
     780,   781,   782,   783,   784,   785,   787,   795,   796,   799,
     810,   813,   815,   816,  1502,  1507,  1513,  1177,  1175,   632,
    1636,   656,   657,  1136,   656,   657,  1313,   655,   656,   656,
     178,   476,   466,  1399,   656,   657,  1313,   656,   656,    64,
    1576,   385,  1322,  1322,  1322,   372,   648,  1321,  1592,   603,
    1499,   898,   546,   899,   896,   897,  1506,   255,   275,    84,
      92,   119,   241,   322,   340,   363,   556,   921,   922,   923,
    1419,   633,   634,   657,  1305,  1313,  1196,  1315,   998,  1342,
    1265,  1196,   655,  1196,   655,   656,  1030,  1030,  1280,  1651,
     735,  1506,  1499,   711,   712,   467,  1003,   874,   924,   872,
    1323,   901,  1050,  1050,   656,  1050,  1050,  1490,  1490,  1104,
     878,  1091,   252,   656,   657,   202,   401,   504,   378,  1026,
     986,  1055,  1486,  1055,   655,  1193,   367,   615,   655,   133,
    1325,  1503,  1506,  1196,   163,   710,   797,   800,  1506,   201,
     362,   788,   775,  1507,  1507,  1506,   779,   670,   295,   455,
     631,   819,    34,   817,   664,   656,    55,    66,   285,  1506,
     418,  1138,  1139,  1506,    84,   264,  1038,  1041,  1044,  1045,
    1046,  1502,  1051,   372,   632,  1039,  1043,  1045,  1048,  1040,
    1042,  1045,  1047,   178,  1188,  1494,   293,   372,  1389,  1390,
    1496,  1259,  1191,  1323,   656,   657,   907,   567,  1376,  1376,
     144,   144,  1376,  1376,  1376,  1376,   655,   916,   923,   166,
    1494,   420,  1329,    76,  1470,  1607,  1291,  1291,   199,  1278,
    1278,   720,   993,   199,   708,  1645,   871,   656,  1603,   656,
     656,   656,   954,   656,   656,  1104,   655,  1506,   138,   603,
     656,   657,   656,   656,  1323,  1193,   971,  1196,  1196,   629,
     802,   806,   201,  1506,   790,   791,  1196,   738,   773,   774,
     776,   778,   780,   782,   783,   784,   785,   787,   795,   810,
     813,   815,   738,   820,   818,   811,   814,  1606,    66,   385,
      66,   656,   657,  1503,  1376,   694,  1046,  1375,  1313,   656,
     399,   696,  1048,   698,  1047,  1313,   657,  1375,  1464,   656,
     895,   897,   655,   909,   911,   906,  1503,  1503,  1376,  1376,
    1325,  1325,  1323,  1508,   547,   917,   918,  1376,  1313,  1506,
     161,   172,   386,   564,  1471,  1472,   281,  1473,   656,   656,
     215,   262,   388,  1282,  1281,   142,   721,   722,  1202,  1652,
    1190,   713,   993,   873,  1022,   957,  1038,   955,   956,   901,
      54,   368,   463,   495,  1027,  1027,  1008,  1486,  1008,   656,
     656,   798,   807,   158,   806,   809,   252,   162,  1196,   162,
     773,   661,   602,  1196,   739,   819,   817,   385,   385,  1139,
    1322,  1092,  1093,  1094,   133,  1325,  1503,  1506,  1502,  1092,
    1092,  1390,  1381,   999,   899,   655,   910,   911,   912,   327,
     908,   911,  1503,  1503,   919,   656,   657,   943,  1330,    50,
      50,   161,    50,  1472,   530,   564,  1474,  1475,    50,    50,
     655,   655,   142,   773,  1639,   151,  1646,  1606,  1038,  1039,
    1040,   656,     5,   133,   371,   378,   378,   406,   624,   966,
     629,   801,   803,  1196,   738,   162,   786,   236,   568,   295,
     661,   822,   151,   132,   737,   740,   812,  1507,   812,  1094,
    1093,  1465,   656,   657,   327,   914,   915,  1199,   920,  1508,
     918,   655,  1486,  1486,    50,  1486,    50,    50,  1475,  1288,
    1290,   157,   714,   720,   603,   138,    84,   598,   967,   968,
     969,   804,   803,   809,   808,    56,   789,  1506,   792,  1196,
     821,   100,   181,   745,   771,  1506,   162,   773,   661,   476,
    1476,   911,   657,   913,   921,  1190,  1331,  1332,  1333,  1486,
    1486,  1486,   656,   656,   478,  1647,  1027,  1027,  1503,   265,
     969,  1196,   162,   568,   657,   738,   162,   738,   218,   657,
     741,    91,   113,   661,   234,  1470,   915,   656,  1196,   656,
     657,  1640,   773,   805,    56,   738,  1506,   793,   455,   162,
     199,  1506,   993,   199,   199,    50,  1473,  1191,  1333,   773,
     568,   158,   159,   794,   631,   742,   133,   772,   748,   749,
    1322,   743,   744,  1486,   237,  1477,   738,   738,   790,   518,
     520,   746,   747,   748,   751,  1202,  1506,  1196,  1173,   372,
     655,  1479,   657,   773,   200,   281,   476,  1478,   656,   662,
    1480,  1481,  1496,   495,  1482,   747,  1508,   656,   657,  1483,
    1484,  1496,  1481,   657,  1375,  1484,  1190,  1381,  1191
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1940 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1951 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1976 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2053 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2067 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2076 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2082 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2091 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2097 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2112 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2124 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2132 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 2143 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2147 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2157 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2161 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2165 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2169 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2173 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2177 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2182 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2186 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2190 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2194 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2198 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2202 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2207 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2211 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2216 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2247 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2262 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2268 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2272 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2288 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2292 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2298 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2308 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2318 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2330 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2339 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2354 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if ((yyvsp[(1) - (5)].num) && (yyvsp[(4) - (5)].num))
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE", "IF NOT EXISTS");
               MYSQL_YYABORT;
            }
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.options= ((yyvsp[(1) - (5)].num) | (yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num));
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2382 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2398 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2403 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2407 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2410 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2415 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2419 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2422 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2427 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2431 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2433 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2438 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2445 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= ((yyvsp[(1) - (1)].num) == 0 ? VIEW_CREATE_NEW :
                                    VIEW_CREATE_OR_REPLACE);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2452 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].num) && Lex->sql_command != SQLCOM_CREATE_VIEW)
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE",
                       "TRIGGERS / SP / EVENT");
               MYSQL_YYABORT;
            }
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2461 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2465 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_ROLE;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2469 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2473 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2477 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2488 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2502 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2506 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2510 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2514 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2518 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2522 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2526 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2533 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2552 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2563 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2570 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2576 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2578 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2584 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2590 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2599 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2606 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2614 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2620 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2626 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2632 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2640 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2642 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2649 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2691 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2722 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2737 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2753 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2770 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2771 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2775 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2776 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2782 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2784 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2786 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2788 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2790 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2792 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2794 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2799 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2800 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2801 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2806 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2810 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2817 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2825 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2841 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2845 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2863 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2884 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(1) - (3)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2923 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(3) - (4)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                  (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2949 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2950 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2951 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2952 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2956 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2961 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2967 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2971 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 2997 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3005 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3061 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3076 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3102 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3132 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3157 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3161 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3180 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3181 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3187 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3189 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3194 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3216 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3231 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3252 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3253 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3258 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3262 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3271 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3277 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3283 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3292 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3306 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3329 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3334 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3336 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3341 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3349 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3358 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3377 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3379 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3397 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3403 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3405 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3407 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3409 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3411 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3413 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3415 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3419 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3421 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3423 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3430 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3445 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3460 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3462 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3467 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3473 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3482 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3488 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3497 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3505 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3514 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3525 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3534 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3539 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3545 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3554 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3562 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3564 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3566 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3568 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3570 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3572 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3574 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3576 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3578 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3580 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3582 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3584 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3586 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3591 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(1) - (1)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3609 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(3) - (3)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3629 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3630 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3651 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3653 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3657 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3665 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3712 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3714 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3740 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(thd, empty_lex_str,
                                    lex->sphead->instructions());
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3747 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3756 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3809 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3852 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3872 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3889 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3894 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3920 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3940 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3962 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3964 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3980 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3992 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 4012 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 4018 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 4031 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4039 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4047 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4065 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4069 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4081 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4090 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4094 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4104 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4113 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4128 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4145 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4162 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4163 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4168 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4183 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4199 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(thd, empty_lex_str, ip);
            lab->type= sp_label::BEGIN;
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4206 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4214 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4224 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4252 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4262 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4264 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4280 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4291 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4293 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4312 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4314 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4319 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4321 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4323 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4357 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4359 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4369 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4375 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4398 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4492 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4500 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4508 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4516 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4528 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4540 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4545 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4550 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4558 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4566 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4574 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4582 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4590 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4598 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4606 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4619 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4632 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4651 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4656 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4668 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4670 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4721 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4722 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4723 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4729 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4729 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4731 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4744 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4745 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4749 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4751 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4752 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4754 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4755 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4760 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4796 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4802 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4820 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4839 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4851 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4860 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4867 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4868 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4870 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4872 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4874 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4876 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4882 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4887 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4889 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4905 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4906 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4910 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4911 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4916 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4935 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4945 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4956 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4964 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4966 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4981 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4983 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4984 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4987 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4992 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4996 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4997 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5002 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5020 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5035 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5037 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5052 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5068 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5089 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5090 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5095 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5114 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5119 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5128 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5150 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5165 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5167 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5182 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5187 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5208 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5213 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5242 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5253 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5254 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5259 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5270 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5272 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5295 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5296 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5301 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5314 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5334 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5348 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5373 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5374 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5379 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5411 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5416 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5420 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5421 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5426 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5431 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5433 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5439 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5445 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5447 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5449 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5451 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5453 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5455 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5464 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5479 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5483 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5493 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5494 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5498 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5499 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5503 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5504 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5508 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5509 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5513 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5514 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5518 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5519 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5528 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5533 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5541 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5545 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= HA_LEX_CREATE_REPLACE;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5568 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5573 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5578 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5583 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5588 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5593 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5598 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5603 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5618 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5624 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5639 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5644 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5659 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5665 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5683 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5688 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5693 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5698 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5703 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5708 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5713 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5717 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5741 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5746 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5751 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5756 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5758 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5760 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5762 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5768 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5773 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5778 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5784 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5790 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5796 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5805 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5823 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5840 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5863 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5876 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5877 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5878 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5879 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5881 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5882 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5886 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5887 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5888 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5892 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5897 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5898 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5899 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5900 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5906 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5924 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5931 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5933 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5939 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5941 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5947 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5949 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5955 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5957 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5962 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5983 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5998 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5999 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6003 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6008 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6019 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6033 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6037 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6045 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6050 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6054 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6058 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6064 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6065 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6069 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6075 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6081 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6086 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6091 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6107 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6122 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6123 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6124 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6126 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6131 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6135 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6140 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6145 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6149 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6154 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6159 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6165 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6170 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6176 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6180 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6185 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6190 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6208 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6210 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6212 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6225 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6227 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6232 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6237 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6249 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6254 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6259 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6264 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6266 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6268 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6270 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6272 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6274 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6276 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6278 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6280 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6282 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6284 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6286 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6288 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6290 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6298 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6299 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6301 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6305 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6306 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6307 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6308 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6309 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6313 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6317 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6318 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6322 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6323 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6327 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6328 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6329 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6330 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6331 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6335 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6336 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6337 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6338 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6339 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6344 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6349 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6351 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6356 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6358 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6360 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6365 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6373 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6374 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6378 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6379 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6383 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6384 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6385 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6389 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6390 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6391 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6392 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6395 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6396 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6400 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6401 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6405 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6406 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6410 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6415 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6416 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6419 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6427 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6433 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6439 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6445 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6450 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6452 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6465 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6471 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6477 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6483 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6492 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6513 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6519 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6524 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6528 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6529 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6534 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6541 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6545 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6546 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6550 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6551 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6556 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6564 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6568 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6569 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6574 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6581 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6582 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6586 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6587 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6591 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6592 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6597 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6599 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6603 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6610 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6619 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6624 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6631 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6634 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6635 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6637 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6642 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6649 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6650 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6655 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6663 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6667 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6668 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6672 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6675 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6676 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6677 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6678 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6683 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6691 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6697 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6698 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6703 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6712 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6713 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6717 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6718 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6732 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6739 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6745 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6752 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6764 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6766 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6768 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6770 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6775 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6781 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6787 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6794 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6801 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6809 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6810 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6811 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6812 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6813 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6817 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6821 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6822 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6826 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6827 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6831 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6836 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6837 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6838 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6842 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6843 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6847 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6852 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6864 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6881 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6886 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6891 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6911 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6912 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6917 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6918 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6920 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6926 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6932 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6938 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6956 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6968 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6969 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6970 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6974 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6975 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6980 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6986 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6999 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7000 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7005 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7016 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7017 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7021 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7022 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7030 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7047 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7057 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7067 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7072 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7081 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7092 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7103 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7110 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7121 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7128 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7139 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7146 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7158 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7160 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7180 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7193 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7198 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7203 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7208 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7213 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7222 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7223 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7224 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7225 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7229 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7231 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7242 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7243 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7247 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7248 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7254 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7262 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7285 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7290 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7297 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7310 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7321 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7333 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7345 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7352 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7364 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7390 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7397 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7405 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7423 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7428 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7435 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7450 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7454 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7458 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7465 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7466 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7471 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7484 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7486 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX_STRING defrag_index = {C_STRING_WITH_LEN("PRIMARY")};
            Lex->alter_info.defrag_index = defrag_index;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7491 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.defrag_index = (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7498 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_defragment_table();
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7512 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7521 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7525 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7530 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7535 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7542 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7546 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7557 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7570 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7574 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7583 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7592 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7602 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7611 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7617 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7623 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7632 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7641 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7660 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7680 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7690 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7694 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7711 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7716 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7727 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7732 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7742 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7743 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7747 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7748 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7753 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->async_commit= 0;
            (yyval.m_yes_no_unk) = TVL_YES;
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7758 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->async_commit= 1;
            (yyval.m_yes_no_unk) = TVL_NO;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7765 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7779 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7781 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7788 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7789 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7790 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7794 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7796 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7801 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7808 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7809 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7810 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7811 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7816 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7823 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7825 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7830 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7832 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7839 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7849 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7865 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7869 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7876 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7887 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7891 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7895 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7901 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7903 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7912 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7913 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7914 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7918 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7920 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7933 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7945 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7952 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7956 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7957 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7958 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7963 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7973 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7983 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7984 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7988 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7989 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7993 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7994 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7995 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 8000 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 8010 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 8030 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 8032 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 8039 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 8041 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8044 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8046 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8057 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8059 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8071 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8073 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 8078 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8086 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 8093 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8099 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8108 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8116 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8131 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8141 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8142 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8146 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8147 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8151 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8152 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8153 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8154 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8155 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8156 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8161 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8171 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8181 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8182 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8183 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8188 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8192 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8194 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8201 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8206 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8219 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8232 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8236 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8255 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8265 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8274 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8275 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8280 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8286 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8301 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8311 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8321 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8328 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8337 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8343 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8344 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8354 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8368 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8378 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8387 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8406 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8414 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8421 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8431 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8446 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8463 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8491 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8529 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8541 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8555 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8560 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8584 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8590 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8596 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8597 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8598 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8599 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8600 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8604 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8605 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8606 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8610 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8611 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8612 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8616 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8617 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8623 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8674 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8681 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8724 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8730 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8736 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8742 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8748 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8754 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8760 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8770 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8776 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8782 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8788 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8794 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8804 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8810 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8819 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8825 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8833 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8839 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8849 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8855 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8864 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8874 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8890 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8896 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8909 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8915 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8921 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8927 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8933 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8939 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8945 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8951 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8957 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8963 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8969 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8975 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8981 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8987 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9016 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9017 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9018 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9019 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9020 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9021 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9025 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9026 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9031 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9037 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9042 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9049 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9056 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9063 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9070 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9077 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9082 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9088 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9095 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9102 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9110 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9121 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9143 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9150 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9163 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9178 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9184 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9188 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9194 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9200 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9206 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9212 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9214 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9221 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9228 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9234 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd,
                                            item->str_value.ptr(),
                                            item->str_value.length(),
                                            item->str_value.charset(),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9277 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9286 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9293 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9301 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9307 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9314 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9320 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9334 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9342 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9357 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9363 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9369 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9377 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9385 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9391 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9397 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9403 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9409 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9423 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9434 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9440 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9446 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9452 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9458 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9464 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9470 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9476 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9482 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9488 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9494 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9500 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9506 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9512 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9518 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9524 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9530 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9538 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9559 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9566 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9572 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9579 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9587 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9594 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9600 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9606 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9612 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9619 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9625 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9632 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9638 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9644 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9650 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9656 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9662 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9680 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9686 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9692 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9699 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9706 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9714 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9721 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9728 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9735 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9742 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9759 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9765 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9771 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9777 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9783 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9790 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9796 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9802 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9808 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9814 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9820 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9831 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9837 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9843 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9849 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9855 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9863 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9869 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9886 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9892 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9900 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9910 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9916 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9932 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9938 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9945 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9952 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9959 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9966 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9973 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9977 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9996 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10015 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10068 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10109 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10111 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10115 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10116 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10120 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10121 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10125 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10126 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10131 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10138 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10146 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10172 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10178 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10184 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10190 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10196 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10202 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10211 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10217 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10219 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10221 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10227 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10238 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10244 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10250 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10256 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10262 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10268 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10274 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10280 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10286 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10292 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10296 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10311 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10319 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10326 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10336 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10344 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10359 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10360 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10365 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10370 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10376 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10393 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10395 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10400 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10409 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10419 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10421 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10423 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10427 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10429 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10431 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10433 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10435 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10441 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10447 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10449 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10451 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10454 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10455 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10460 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10467 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10474 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10475 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10480 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10487 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10494 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10495 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10499 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10500 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10505 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10513 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10525 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10536 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10547 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10548 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10554 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10556 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10576 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10579 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10587 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10595 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10599 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10605 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10614 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10622 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10630 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10634 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10640 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10650 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10658 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10667 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10671 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10678 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10689 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10690 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10691 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10695 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10696 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10704 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10710 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10724 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10729 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10740 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10780 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10856 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10866 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10871 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10879 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10891 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10910 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10918 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10927 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10933 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10949 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10966 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10973 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10978 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 11003 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 11004 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11009 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 11012 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 11013 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11014 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 11018 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11019 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11024 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11029 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11042 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11046 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11051 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11052 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11057 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11059 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11069 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11080 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11092 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11093 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11094 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11095 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11096 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11097 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11098 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11099 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11100 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11101 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11102 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11103 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11107 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11108 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 11109 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 11110 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11111 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11112 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 11113 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11114 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11115 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11119 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11120 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11121 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11122 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11132 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11134 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11147 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11149 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11153 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11165 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11169 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11180 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11185 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11206 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11208 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11212 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11214 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11234 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11268 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11286 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11321 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11323 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11327 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11328 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11329 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11334 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11341 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11345 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11346 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11351 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11358 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11362 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11369 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11376 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11383 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11393 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11426 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11430 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11436 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11442 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11451 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11458 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11463 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11469 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11470 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11474 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11475 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11476 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11480 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11481 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11482 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11483 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11484 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11485 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11489 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11490 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11491 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11492 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11493 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11497 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11498 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11499 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11500 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11501 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11505 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11506 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11507 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11508 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11509 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11514 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11524 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11530 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11560 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11561 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11571 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11580 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11586 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11591 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11596 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11615 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11647 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11659 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11667 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11670 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11682 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11693 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11699 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11710 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11719 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11720 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11721 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11737 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11744 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11766 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11786 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11798 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11802 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_ROLE;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11806 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11814 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11816 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11822 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11829 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11834 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11839 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11854 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11865 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11883 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11894 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11899 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11906 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11907 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11915 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11923 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11928 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11933 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11940 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11945 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11950 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11958 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11960 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11967 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11971 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11973 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11983 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11984 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11989 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11997 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11998 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11999 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 12001 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12011 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12012 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12016 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12017 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12019 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12020 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12022 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12023 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12038 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12047 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12048 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12052 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12053 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12058 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12063 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12071 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12077 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12082 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12089 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12091 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12100 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12108 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12116 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12134 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12144 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12157 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12166 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12167 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12174 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12189 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12200 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12201 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12203 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12209 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12214 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12220 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12238 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12251 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12266 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12267 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12271 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12272 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12276 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12277 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12278 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12283 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12294 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12318 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12322 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12326 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12330 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12334 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12338 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12342 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12346 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12350 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12357 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12361 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12370 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12379 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12386 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12393 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12401 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12409 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12433 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12440 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12447 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12453 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12455 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12457 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12466 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12470 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12474 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12479 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12484 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12493 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12500 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12505 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12510 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12515 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12517 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12519 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12521 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12523 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12525 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12532 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12540 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12542 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12550 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12557 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12564 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12571 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12577 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12583 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12592 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12600 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12604 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12609 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12616 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12621 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12628 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12635 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12642 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12649 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12656 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12663 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12669 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12676 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12683 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12688 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12693 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12698 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12708 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12710 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12712 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12726 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12727 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12731 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12732 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12741 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12742 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12746 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12747 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12753 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12760 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12770 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12781 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12785 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12787 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12807 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12808 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12809 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12813 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12814 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12816 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12830 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12837 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12842 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12856 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12858 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12871 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num); }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12873 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12886 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12891 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12893 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12895 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12897 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12899 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12901 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12912 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12914 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12916 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12918 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12924 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12926 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12937 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12939 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12941 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12943 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12945 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12947 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12949 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12953 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12954 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12958 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12959 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12963 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12968 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12977 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12979 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12980 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12981 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12985 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12986 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12991 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12997 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13006 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13010 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13022 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13030 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13036 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13037 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13038 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13041 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13042 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13043 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13045 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13053 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
         }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13057 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13065 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13072 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13083 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13094 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13104 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13114 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13118 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13122 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13123 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13127 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13128 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13132 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13134 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13141 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13145 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13146 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13147 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13162 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13167 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13174 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13179 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13197 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13202 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13209 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13211 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13216 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13223 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13225 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13229 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13230 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13231 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13236 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13238 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13242 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13244 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13252 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13253 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13263 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13276 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13299 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13311 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item_string *str= new (thd->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13322 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13341 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13349 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13361 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13369 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13384 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13403 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13404 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13406 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13413 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13414 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13415 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13424 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13430 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13436 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13442 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13448 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13454 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13483 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13514 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13524 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13534 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13540 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13549 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13561 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13567 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13573 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13588 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13589 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13594 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13603 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13617 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13622 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13667 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13672 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13688 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13693 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13771 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13795 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13824 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13826 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13842 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13851 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13856 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13862 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13868 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13878 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13884 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13893 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13902 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13904 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13932 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13946 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13960 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13974 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13976 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13985 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13987 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13996 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13997 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13998 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14003 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14018 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14050 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14062 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
           if ((yyvsp[(1) - (1)].lex_user)->user.str != current_user.str && (yyvsp[(1) - (1)].lex_user)->host.str == 0)
             (yyvsp[(1) - (1)].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
         }
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14071 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14072 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14073 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14074 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14075 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14076 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14077 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14078 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14079 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14080 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14081 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14082 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14083 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14084 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14085 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14086 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14087 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14088 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14089 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14090 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14091 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14092 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14093 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14094 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14095 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14096 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14097 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14098 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14099 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14100 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14101 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14102 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14103 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14104 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14105 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14106 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14107 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14108 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14109 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14110 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14111 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14112 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14113 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14114 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14115 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14116 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14117 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14118 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14119 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14120 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14121 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14122 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14123 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14124 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14125 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14126 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14127 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14128 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14129 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14130 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14131 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14141 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14142 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14143 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14144 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14145 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14146 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14147 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14148 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14149 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14150 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14151 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14152 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14153 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14154 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14155 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14156 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14157 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14158 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14159 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14160 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14161 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14162 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14163 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14164 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14165 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14166 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14167 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14168 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14169 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14170 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14171 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14172 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14173 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14174 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14175 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14176 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14177 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14178 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14179 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14180 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14181 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14182 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14183 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14184 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14185 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14186 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14187 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14188 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14189 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14190 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14191 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14196 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14197 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14198 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14199 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14200 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14201 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14202 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14203 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14204 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14205 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14206 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14207 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14208 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14209 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14210 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14211 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14212 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14213 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14214 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14215 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14216 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14217 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14218 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14219 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14220 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14221 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14222 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14223 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14224 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14225 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14226 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14227 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14228 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14229 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14230 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14231 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14232 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14233 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14234 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14235 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14236 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14237 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14238 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14239 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14240 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14241 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14242 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14243 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14244 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14245 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14246 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14247 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14248 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14249 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14250 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14251 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14252 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14253 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14254 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14255 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14256 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14257 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14258 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14259 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14260 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14261 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14262 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14263 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14264 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14265 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14266 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14267 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14268 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14269 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14270 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14271 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14272 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14273 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14274 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14275 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14276 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14277 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14278 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14279 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14280 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14281 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14282 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14283 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14284 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14285 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14286 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14287 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14288 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14289 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14290 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14291 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14292 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14293 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14294 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14295 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14296 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14297 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14298 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14299 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14300 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14301 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14302 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14303 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14304 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14305 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14306 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14307 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14308 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14309 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14310 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14311 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14312 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14313 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14314 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14315 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14316 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14317 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14318 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14319 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14320 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14321 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14322 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14323 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14324 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14325 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14326 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14327 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14328 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14329 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14330 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14331 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14332 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14333 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14334 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14335 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14336 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14337 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14338 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14339 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14340 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14341 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14342 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14343 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14344 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14345 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14346 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14347 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14348 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14349 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14350 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14351 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14352 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14353 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14354 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14355 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14356 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14357 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14358 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14359 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14360 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14361 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14362 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14363 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14364 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14365 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14366 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14367 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14368 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14369 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14370 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14371 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14372 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14373 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14374 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14375 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14376 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14377 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14378 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14379 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14380 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14381 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14382 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14383 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14384 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14385 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14386 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14387 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14388 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14389 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14390 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14391 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14392 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14393 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14394 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14395 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14396 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14397 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14398 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14399 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14400 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14401 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14402 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14403 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14404 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14405 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14406 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14407 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14408 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14409 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14410 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14411 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14412 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14413 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14414 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14415 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14416 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14417 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14418 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14419 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14420 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14421 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14422 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14423 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14424 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14426 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14427 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14428 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14429 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14430 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14431 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14432 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14433 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14434 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14435 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14436 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14437 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14438 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14439 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14440 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14441 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14442 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14443 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14444 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14445 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14446 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14447 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14448 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14449 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14450 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14451 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14452 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14453 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14454 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14455 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14467 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14477 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14484 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14490 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14494 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14499 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14509 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14515 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14529 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14533 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14538 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14542 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14551 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14559 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14560 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14561 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14565 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14566 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14567 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14568 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14572 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14573 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14574 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14575 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14581 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14605 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14631 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14642 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14654 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14667 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14682 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14701 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new set_var_role((yyvsp[(2) - (2)].lex_str));
            lex->var_list.push_back(var);
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14707 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14732 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14745 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14771 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14814 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14835 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14852 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14868 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14869 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14873 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14874 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14875 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14876 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14882 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? thd->variables.old_passwords ?
              Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14891 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14901 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14902 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14904 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14910 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14916 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14927 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14938 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14953 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14967 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14968 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14970 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14974 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14975 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14980 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14991 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 15000 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15012 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15024 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15044 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 15057 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15058 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15062 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15063 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15067 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15068 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15069 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15070 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15072 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15080 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15084 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15085 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15086 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15087 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15088 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 15095 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15100 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15106 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15117 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15128 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 15132 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15139 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 15148 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15150 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15155 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 15161 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15168 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15180 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15191 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15198 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15209 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15210 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15213 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 15214 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15218 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15223 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15231 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15242 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].lex_str).length == 0)
            {
              my_error(ER_INVALID_ROLE, MYF(0), "");
              MYSQL_YYABORT;
            }
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15270 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15272 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15290 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15291 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15293 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15294 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15296 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15297 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15299 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15300 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15301 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15302 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15303 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15304 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15305 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15306 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15307 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15308 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15309 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15310 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15311 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15312 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15313 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15314 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15315 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15316 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15317 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15318 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15319 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15320 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15321 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15322 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15323 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15324 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15325 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15326 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15330 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15331 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15341 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15351 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15361 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15374 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15389 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 15402 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 15415 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15427 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15432 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15440 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15445 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15453 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15458 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15469 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (thd->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15498 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15503 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15509 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15515 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15520 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15534 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15563 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15567 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 15571 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 15575 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 15581 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 15586 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 15587 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15591 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15592 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15596 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15598 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15604 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15610 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 15616 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 15625 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 15630 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 15634 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 15635 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 15640 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 15641 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 15642 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 15647 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 15648 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2706:

/* Line 1455 of yacc.c  */
#line 15649 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 15653 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 15654 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 15659 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 15671 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 15681 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 15690 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 15699 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 15712 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 15718 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 15723 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 15733 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 15734 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 15735 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 15739 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 15740 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 15744 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 15759 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 15771 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 15772 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2729:

/* Line 1455 of yacc.c  */
#line 15773 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2730:

/* Line 1455 of yacc.c  */
#line 15778 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2731:

/* Line 1455 of yacc.c  */
#line 15782 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 15791 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 15797 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2735:

/* Line 1455 of yacc.c  */
#line 15806 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2736:

/* Line 1455 of yacc.c  */
#line 15812 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2737:

/* Line 1455 of yacc.c  */
#line 15833 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2742:

/* Line 1455 of yacc.c  */
#line 15861 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2743:

/* Line 1455 of yacc.c  */
#line 15863 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2744:

/* Line 1455 of yacc.c  */
#line 15870 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2745:

/* Line 1455 of yacc.c  */
#line 15871 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2746:

/* Line 1455 of yacc.c  */
#line 15872 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2747:

/* Line 1455 of yacc.c  */
#line 15874 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2748:

/* Line 1455 of yacc.c  */
#line 15880 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2749:

/* Line 1455 of yacc.c  */
#line 15885 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2750:

/* Line 1455 of yacc.c  */
#line 15896 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2751:

/* Line 1455 of yacc.c  */
#line 15898 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2752:

/* Line 1455 of yacc.c  */
#line 15900 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2766:

/* Line 1455 of yacc.c  */
#line 15933 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2767:

/* Line 1455 of yacc.c  */
#line 15947 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            thd->lex->definer= (yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 2768:

/* Line 1455 of yacc.c  */
#line 15960 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2769:

/* Line 1455 of yacc.c  */
#line 15962 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2770:

/* Line 1455 of yacc.c  */
#line 15964 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2771:

/* Line 1455 of yacc.c  */
#line 15969 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2772:

/* Line 1455 of yacc.c  */
#line 15971 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2773:

/* Line 1455 of yacc.c  */
#line 15973 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2774:

/* Line 1455 of yacc.c  */
#line 15978 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2776:

/* Line 1455 of yacc.c  */
#line 15994 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2778:

/* Line 1455 of yacc.c  */
#line 16000 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2779:

/* Line 1455 of yacc.c  */
#line 16005 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2780:

/* Line 1455 of yacc.c  */
#line 16012 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2781:

/* Line 1455 of yacc.c  */
#line 16021 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2784:

/* Line 1455 of yacc.c  */
#line 16042 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2785:

/* Line 1455 of yacc.c  */
#line 16044 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2786:

/* Line 1455 of yacc.c  */
#line 16046 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2787:

/* Line 1455 of yacc.c  */
#line 16048 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2788:

/* Line 1455 of yacc.c  */
#line 16065 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2789:

/* Line 1455 of yacc.c  */
#line 16071 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2790:

/* Line 1455 of yacc.c  */
#line 16076 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2791:

/* Line 1455 of yacc.c  */
#line 16105 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2792:

/* Line 1455 of yacc.c  */
#line 16139 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2793:

/* Line 1455 of yacc.c  */
#line 16156 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2794:

/* Line 1455 of yacc.c  */
#line 16178 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2795:

/* Line 1455 of yacc.c  */
#line 16209 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2796:

/* Line 1455 of yacc.c  */
#line 16213 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2797:

/* Line 1455 of yacc.c  */
#line 16222 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2798:

/* Line 1455 of yacc.c  */
#line 16245 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2799:

/* Line 1455 of yacc.c  */
#line 16253 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2800:

/* Line 1455 of yacc.c  */
#line 16308 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2801:

/* Line 1455 of yacc.c  */
#line 16332 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2802:

/* Line 1455 of yacc.c  */
#line 16341 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2803:

/* Line 1455 of yacc.c  */
#line 16348 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2804:

/* Line 1455 of yacc.c  */
#line 16355 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2805:

/* Line 1455 of yacc.c  */
#line 16369 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2806:

/* Line 1455 of yacc.c  */
#line 16373 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2807:

/* Line 1455 of yacc.c  */
#line 16377 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2808:

/* Line 1455 of yacc.c  */
#line 16381 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2809:

/* Line 1455 of yacc.c  */
#line 16385 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2810:

/* Line 1455 of yacc.c  */
#line 16389 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2811:

/* Line 1455 of yacc.c  */
#line 16396 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2812:

/* Line 1455 of yacc.c  */
#line 16403 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2813:

/* Line 1455 of yacc.c  */
#line 16410 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2814:

/* Line 1455 of yacc.c  */
#line 16419 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2815:

/* Line 1455 of yacc.c  */
#line 16420 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2816:

/* Line 1455 of yacc.c  */
#line 16424 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2817:

/* Line 1455 of yacc.c  */
#line 16425 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2818:

/* Line 1455 of yacc.c  */
#line 16426 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2819:

/* Line 1455 of yacc.c  */
#line 16430 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2820:

/* Line 1455 of yacc.c  */
#line 16431 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2821:

/* Line 1455 of yacc.c  */
#line 16436 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2822:

/* Line 1455 of yacc.c  */
#line 16438 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2824:

/* Line 1455 of yacc.c  */
#line 16443 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {}
    break;

  case 2825:

/* Line 1455 of yacc.c  */
#line 16444 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2826:

/* Line 1455 of yacc.c  */
#line 16449 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2827:

/* Line 1455 of yacc.c  */
#line 16456 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2828:

/* Line 1455 of yacc.c  */
#line 16466 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2829:

/* Line 1455 of yacc.c  */
#line 16472 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2830:

/* Line 1455 of yacc.c  */
#line 16483 "/data/.r/mariadb-10.0.12/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 44999 "/data/.r/mariadb-10.0.12/Release/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



